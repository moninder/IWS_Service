<?xml version="1.0"?><DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts" DTS:ExecutableType="SSIS.Package.2">
<DTS:Property DTS:Name="PackageFormatVersion">3</DTS:Property>
<DTS:Property DTS:Name="VersionComments"></DTS:Property>
<DTS:Property DTS:Name="CreatorName">GCR1\rguidi</DTS:Property>
<DTS:Property DTS:Name="CreatorComputerName">WS-H88W5R1</DTS:Property>
<DTS:Property DTS:Name="CreationDate" DTS:DataType="7">4/6/2013 9:30:28 AM</DTS:Property>
<DTS:Property DTS:Name="PackageType">5</DTS:Property>
<DTS:Property DTS:Name="ProtectionLevel">1</DTS:Property>
<DTS:Property DTS:Name="MaxConcurrentExecutables">-1</DTS:Property>
<DTS:Property DTS:Name="PackagePriorityClass">0</DTS:Property>
<DTS:Property DTS:Name="VersionMajor">1</DTS:Property>
<DTS:Property DTS:Name="VersionMinor">0</DTS:Property>
<DTS:Property DTS:Name="VersionBuild">206</DTS:Property>
<DTS:Property DTS:Name="VersionGUID">{C6055B5B-FAD3-49E4-8F10-3C5C3BF9CB24}</DTS:Property>
<DTS:Property DTS:Name="EnableConfig">-1</DTS:Property>
<DTS:Property DTS:Name="CheckpointFileName"></DTS:Property>
<DTS:Property DTS:Name="SaveCheckpoints">0</DTS:Property>
<DTS:Property DTS:Name="CheckpointUsage">0</DTS:Property>
<DTS:Property DTS:Name="SuppressConfigurationWarnings">0</DTS:Property>
<DTS:Configuration>
<DTS:Property DTS:Name="ConfigurationType">1</DTS:Property>
<DTS:Property DTS:Name="ConfigurationString">C:\ACAMS_SSIS\SSISpackage\PicturePerfectExport.dtsConfig</DTS:Property>
<DTS:Property DTS:Name="ConfigurationVariable"></DTS:Property>
<DTS:Property DTS:Name="ObjectName">Configuration 1</DTS:Property>
<DTS:Property DTS:Name="DTSID">{961059B3-B63B-43FA-BCB0-5284ABDDA8D0}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Configuration>
<DTS:Configuration>
<DTS:Property DTS:Name="ConfigurationType">1</DTS:Property>
<DTS:Property DTS:Name="ConfigurationString">C:\ACAMS_SSIS\SSISpackage\PicturePerfectExport_TEST.dtsConfig</DTS:Property>
<DTS:Property DTS:Name="ConfigurationVariable"></DTS:Property>
<DTS:Property DTS:Name="ObjectName">Configuration 2</DTS:Property>
<DTS:Property DTS:Name="DTSID">{EB412AA3-82BD-4470-89AD-E0B4EC347FD6}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Configuration>
<DTS:Property DTS:Name="LastModifiedProductVersion">10.50.4033.0</DTS:Property>
<DTS:Property DTS:Name="ForceExecValue">0</DTS:Property>
<DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property>
<DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property>
<DTS:Property DTS:Name="Disabled">0</DTS:Property>
<DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property>
<DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property>
<DTS:Property DTS:Name="LocaleID">1033</DTS:Property>
<DTS:Property DTS:Name="TransactionOption">1</DTS:Property>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">Data Source=10.65.216.19;User ID=gcrinc;Password=Freddy12;Initial Catalog=CS_BOSD_ProductionQA;Application Name=SSIS-ACAMPackagePP4-{70559378-9960-4DA3-8862-DE50C4083CCA}</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">CS_Connection</DTS:Property>
<DTS:Property DTS:Name="DTSID">{E7001991-2FD6-404C-AF08-4B3B0F318B84}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">lawacssupport@gcrincorporated.com</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">EmailFromAddress</DTS:Property>
<DTS:Property DTS:Name="DTSID">{4863A716-7E66-42F9-B75E-2B3BA7CB8A73}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">rguidi@gcrconsulting.com</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">EmailToAddress</DTS:Property>
<DTS:Property DTS:Name="DTSID">{3ACABA46-793F-4608-BE52-480A20F95BE9}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">C:\ACAMS_SSIS\Logs\</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">logDir</DTS:Property>
<DTS:Property DTS:Name="DTSID">{AA7E9096-2BE6-4C02-9B8B-8E4BBAD21F85}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">uid=informix;Dsn=PPtest32;pw=PP2014LAWACS;</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">PP_Connection</DTS:Property>
<DTS:Property DTS:Name="DTSID">{2BCF41DE-9225-4540-B2A6-E23E2C531F63}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">192.168.40.218</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">SmtpClient</DTS:Property>
<DTS:Property DTS:Name="DTSID">{3AEECF15-80DC-4A51-B985-5BCECD53D563}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:LoggingOptions>
<DTS:Property DTS:Name="LoggingMode">0</DTS:Property>
<DTS:Property DTS:Name="FilterKind">1</DTS:Property>
<DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions>
<DTS:Executable DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" DTS:ThreadHint="0">
<DTS:Property DTS:Name="ExecutionLocation">0</DTS:Property>
<DTS:Property DTS:Name="ExecutionAddress"></DTS:Property>
<DTS:Property DTS:Name="TaskContact"></DTS:Property>
<DTS:Property DTS:Name="ForceExecValue">0</DTS:Property>
<DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property>
<DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property>
<DTS:Property DTS:Name="Disabled">0</DTS:Property>
<DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property>
<DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property>
<DTS:Property DTS:Name="LocaleID">-1</DTS:Property>
<DTS:Property DTS:Name="TransactionOption">1</DTS:Property>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions>
<DTS:Property DTS:Name="LoggingMode">0</DTS:Property>
<DTS:Property DTS:Name="FilterKind">1</DTS:Property>
<DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions>
<DTS:Property DTS:Name="ObjectName">Script Task</DTS:Property>
<DTS:Property DTS:Name="DTSID">{9416766A-5646-4730-9821-1ADD933C116A}</DTS:Property>
<DTS:Property DTS:Name="Description">Script Task</DTS:Property>
<DTS:Property DTS:Name="CreationName">Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</DTS:Property>
<DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property><DTS:ObjectData><ScriptProject Name="ST_28621249e4bc462887f30e8b24c811e2" VSTAMajorVersion="2" VSTAMinorVersion="1" Language="VisualBasic" EntryPoint="Main" ReadOnlyVariables="User::CS_Connection,User::logDir,User::PP_Connection,User::EmailFromAddress,User::EmailToAddress,User::SmtpClient" ReadWriteVariables=""><ProjectItem Name="\my project\settings.designer.vb">
<![CDATA['------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



Partial Friend NotInheritable Class MySettings
    Inherits System.Configuration.ApplicationSettingsBase

    Private Shared m_Value As MySettings

    Private Shared m_SyncObject As Object = New Object

    <System.Diagnostics.DebuggerNonUserCode()> _
    Public Shared ReadOnly Property Value() As MySettings
        Get
            If (MySettings.m_Value Is Nothing) Then
                System.Threading.Monitor.Enter(MySettings.m_SyncObject)
                If (MySettings.m_Value Is Nothing) Then
                    Try
                        MySettings.m_Value = New MySettings
                    Finally
                        System.Threading.Monitor.Exit(MySettings.m_SyncObject)
                    End Try
                End If
            End If
            Return MySettings.m_Value
        End Get
    End Property
End Class]]></ProjectItem><ProjectItem Name="\my project\assemblyinfo.vb">
<![CDATA[Imports System
Imports System.Reflection
Imports System.Runtime.InteropServices

' General Information about an assembly is controlled through the following 
' set of attributes. Change these attribute values to modify the information
' associated with an assembly.

' Review the values of the assembly attributes

<Assembly: AssemblyTitle("ST_28621249e4bc462887f30e8b24c811e2.vbproj")> 
<Assembly: AssemblyDescription("")> 
<Assembly: AssemblyCompany("Microsoft")> 
<Assembly: AssemblyProduct("ST_28621249e4bc462887f30e8b24c811e2.vbproj")> 
<Assembly: AssemblyCopyright("Copyright @ Microsoft 2013")> 
<Assembly: AssemblyTrademark("")> 
<Assembly: CLSCompliant(True)> 

<Assembly: ComVisible(False)> 

'The following GUID is for the ID of the typelib if this project is exposed to COM
<Assembly: Guid("7d3e37cc-f85e-43e1-80f7-937de043e70a")> 

' Version information for an assembly consists of the following four values:
'
'      Major Version
'      Minor Version 
'      Build Number
'      Revision
'
' You can specify all the values or you can default the Build and Revision Numbers 
' by using the '*' as shown below:
' <Assembly: AssemblyVersion("1.0.*")>

<Assembly: AssemblyVersion("1.0.0.0")> 
<Assembly: AssemblyFileVersion("1.0.0.0")> ]]></ProjectItem><ProjectItem Name="\my project\settings.settings">
<![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)" GeneratedClassNamespace="$safeprojectname" GeneratedClassName="MySettings">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem><ProjectItem Name="\badge.vb">
<![CDATA[Public Class Badge

    'Properties
    Private mEmployeeID As String
    Private mPersonID As String
    Private mSTAEmployeeStatusID As String
    Private mDivisionID As String
    Private mDivisionCode As String
    Private mDivisionName As String
    Private mCompanyID As String
    Private mCompanyCode As String
    Private mCorporationName As String
    Private mBadgeID As String
    Private mBadgeNumber As String
    Private mBadgeColorID As String
    Private mCardNumber As String
    Private mWhenBecomesActive As String
    Private mWhenExpires As String

    Private mLAW As String
    Private mBadgeCOlorName As String
    Private mDriverFlag As String
    Private mGatesFlag As String
    Private mCustomsFlag As String
    Private mAtct As String




    Public Property EmployeeID() As String
        Get
            Return mEmployeeID
        End Get
        Set(ByVal Value As String)
            mEmployeeID = Value
        End Set
    End Property

    Public Property PersonID() As String
        Get
            Return mPersonID
        End Get
        Set(ByVal Value As String)
            mPersonID = Value
        End Set
    End Property

    Public Property STAEmployeeStatusID() As String
        Get
            Return mSTAEmployeeStatusID
        End Get
        Set(ByVal Value As String)
            mSTAEmployeeStatusID = Value
        End Set
    End Property

    Public Property DivisionID() As String
        Get
            Return mDivisionID
        End Get
        Set(ByVal Value As String)
            mDivisionID = Value
        End Set
    End Property

    Public Property DivisionCode() As String
        Get
            Return mDivisionCode
        End Get
        Set(ByVal Value As String)
            mDivisionCode = Value
        End Set
    End Property

    Public Property DivisionName() As String
        Get
            Return mDivisionName
        End Get
        Set(ByVal Value As String)
            mDivisionName = Value
        End Set
    End Property

    Public Property CompanyID() As String
        Get
            Return mCompanyID
        End Get
        Set(ByVal Value As String)
            mCompanyID = Value
        End Set
    End Property

    Public Property CompanyCode() As String
        Get
            Return mCompanyCode
        End Get
        Set(ByVal Value As String)
            mCompanyCode = Value
        End Set
    End Property

    Public Property CorporationName() As String
        Get
            Return mCorporationName
        End Get
        Set(ByVal Value As String)
            mCorporationName = Value
        End Set
    End Property

    Public Property BadgeID() As String
        Get
            Return mBadgeID
        End Get
        Set(ByVal Value As String)
            mBadgeID = Value
        End Set
    End Property

    Public Property BadgeNumber() As String
        Get
            Return mBadgeNumber
        End Get
        Set(ByVal Value As String)
            mBadgeNumber = Value
        End Set
    End Property

    Public Property BadgeColorID() As String
        Get
            Return mBadgeColorID
        End Get
        Set(ByVal Value As String)
            mBadgeColorID = Value
        End Set
    End Property

    Public Property CardNumber() As String
        Get
            Return mCardNumber
        End Get
        Set(ByVal Value As String)
            mCardNumber = Value
        End Set
    End Property

    Public Property WhenBecomesActive() As String
        Get
            Return mWhenBecomesActive
        End Get
        Set(ByVal Value As String)
            mWhenBecomesActive = Value
        End Set
    End Property

    Public Property WhenExpires() As String
        Get
            Return mWhenExpires
        End Get
        Set(ByVal Value As String)
            mWhenExpires = Value
        End Set
    End Property


    Public Property LAWFlag() As String
        Get
            Return mLAW
        End Get
        Set(ByVal value As String)
            value = mLAW
        End Set
    End Property

    Public Property BadgeColorName() As String
        Get
            Return mBadgeCOlorName
        End Get
        Set(ByVal Value As String)
            mBadgeCOlorName = Value
        End Set
    End Property

    Public Property DriverFlag() As String
        Get
            Return mDriverFlag
        End Get
        Set(ByVal value As String)
            mDriverFlag = value
        End Set
    End Property

    Public Property GatesFlag() As String
        Get
            Return mGatesFlag
        End Get
        Set(ByVal value As String)
            mGatesFlag = value
        End Set
    End Property

    Public Property CustomsFlag() As String
        Get
            Return mCustomsFlag
        End Get
        Set(ByVal value As String)
            mCustomsFlag = value
        End Set
    End Property


    Public Property ATCT() As String
        Get
            Return mAtct
        End Get
        Set(ByVal value As String)
            mAtct = value
        End Set
    End Property




    'Methods
    Public Sub New()

    End Sub

    ' Public Sub New(
    '     ByVal EmployeeID As String,
    '     ByVal PersonID As String,
    '     ByVal STAEmployeeStatusID As String,
    '     ByVal DivisionID As String,
    '     ByVal DivisionName As String,
    '     ByVal CompanyID As String,
    '     ByVal CorporationName As String,
    '     ByVal BadgeID As String,
    '     ByVal BadgeNumber As String,
    '     ByVal BadgeColorID As String,
    '     ByVal CardNumber As String,
    '     ByVal WhenBecomesActive As String,
    '     ByVal WhenExpires As String
    '     )
    '     MyClass.EmployeeID = EmployeeID
    '     MyClass.PersonID = PersonID
    '     MyClass.STAEmployeeStatusID = STAEmployeeStatusID
    '     MyClass.DivisionID = DivisionID
    '     MyClass.DivisionName = DivisionName
    '     MyClass.CompanyID = CompanyID
    '     MyClass.CorporationName = CorporationName
    '     MyClass.BadgeID = BadgeID
    '     MyClass.BadgeNumber = BadgeNumber
    '     MyClass.BadgeColorID = BadgeColorID
    '     MyClass.CardNumber = CardNumber
    '     MyClass.WhenBecomesActive = WhenBecomesActive
    '     MyClass.WhenExpires = WhenExpires
    ' End Sub

End Class]]></ProjectItem><ProjectItem Name="\st_28621249e4bc462887f30e8b24c811e2.vbproj">
<![CDATA[<Project ToolsVersion="3.5" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{A860303F-1F3F-4691-B57E-529FC101A107};{F184B08F-C81C-45F6-A57F-5ABD9991F28F}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <RootNamespace>ST_28621249e4bc462887f30e8b24c811e2.vbproj</RootNamespace>
    <AssemblyName>ST_28621249e4bc462887f30e8b24c811e2.vbproj</AssemblyName>
    <StartupObject>
    </StartupObject>
    <OptionExplicit>On</OptionExplicit>
    <OptionCompare>Binary</OptionCompare>
    <OptionStrict>Off</OptionStrict>
    <OptionInfer>On</OptionInfer>
    <ProjectGuid>{1E424D46-359B-41FE-B193-0EEB19CCE983}</ProjectGuid>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DefineConstants>
    </DefineConstants>
    <DefineDebug>true</DefineDebug>
    <DefineTrace>true</DefineTrace>
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>bin\</OutputPath>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <NoWarn>42016,42017,42018,42019,42032</NoWarn>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DefineConstants>
    </DefineConstants>
    <DefineDebug>false</DefineDebug>
    <DefineTrace>true</DefineTrace>
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>bin\</OutputPath>
    <RegisterForComInterop>false</RegisterForComInterop>
    <RemoveIntegerChecks>false</RemoveIntegerChecks>
    <NoWarn>42016,42017,42018,42019,42032</NoWarn>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.AddIn, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <!-- Visual Basic supports Importing namespaces (equivalent to using statements in C#).-->
  <ItemGroup>
    <Import Include="Microsoft.VisualBasic" />
    <Import Include="System" />
    <Import Include="System.Collections" />
    <Import Include="System.Data" />
    <Import Include="System.Diagnostics" />
    <Import Include="System.Windows.Forms" />
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="My Project\" />
    <Compile Include="badge.vb" />
    <Compile Include="division.vb" />
    <Compile Include="My Project\AssemblyInfo.vb">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="My Project\Resources.resx">
      <Generator>VbMyResourcesResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.vb</LastGenOutput>
      <CustomToolNamespace>My.Resources</CustomToolNamespace>
    </EmbeddedResource>
    <Compile Include="My Project\Resources.Designer.vb">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Resources.resx</DependentUpon>
      <SubType>Code</SubType>
    </Compile>
    <None Include="My Project\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.vb</LastGenOutput>
    </None>
    <Compile Include="My Project\Settings.Designer.vb">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="person.vb" />
    <Compile Include="personDivision.vb" />
    <Compile Include="ScriptMain.vb">
      <SubType>Code</SubType>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a VB project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.VisualBasic.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{A860303F-1F3F-4691-B57E-529FC101A107}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{C1B21C64-9E6F-4923-A89D-9F958503C1CE}" ApplicationType="usd" Language="vb" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0\InstallDir#\devenv.exe" />
        <Host Name="SSIS_ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ScriptTask</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem><ProjectItem Name="\scriptmain.vb">
<![CDATA[' Microsoft SQL Server Integration Services Script Task
' Write scripts using Microsoft Visual Basic 2008.
' The ScriptMain is the entry point class of the script.

Imports System
Imports System.Data
Imports System.Math
Imports Microsoft.SqlServer.Dts.Runtime
Imports System.Data.SqlClient
Imports System.Data.Odbc
Imports System.Threading
Imports System.Reflection
Imports System.Net.Mail

<System.AddIn.AddIn("ScriptMain", Version:="1.0", Publisher:="", Description:="")> _
<System.CLSCompliantAttribute(False)> _
Partial Public Class ScriptMain
	Inherits Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase

    Dim maxACAMSMessageQueue As Integer = 500

	Enum ScriptResults
		Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success
		Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
	End Enum
	
    Dim statusMapStr As String = "ACTIVE=0,CONFISCATED=5,EXPIRED=5,INVALID=5,LOST=4,RECALL=5,RETURNED=6,UNCLAIMED=5,CANCELLED=6,STOLEN=4,9-30-02  non FP=5"
    Dim specialCategoriesStartSlot As Integer = 9999    ' mmg: set it to large number to avoid any retention of categories across badge updates
    Dim statusMapTable As Hashtable
    Dim personUserDataMap As New Hashtable
    Dim badgeUserDataMap As New Hashtable

	' The execution engine calls this method when the task executes.
	' To access the object model, use the Dts property. Connections, variables, events,
	' and logging features are available as members of the Dts property as shown in the following examples.
	'
	' To reference a variable, call Dts.Variables("MyCaseSensitiveVariableName").Value
	' To post a log entry, call Dts.Log("This is my log text", 999, Nothing)
	' To fire an event, call Dts.Events.FireInformation(99, "test", "hit the help message", "", 0, True)
	'
	' To use the connections collection use something like the following:
	' ConnectionManager cm = Dts.Connections.Add("OLEDB")
	' cm.ConnectionString = "Data Source=localhost;Initial Catalog=AdventureWorks;Provider=SQLNCLI10;Integrated Security=SSPI;Auto Translate=False;"
	'
	' Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
	' 
	' To open Help, press F1.

    Dim GlobalErrorlevel As Integer = 3
    '  connection attributes
    Dim CS_ConnectionString As String = ""
    Dim CS_Manager As ConnectionManager
    Dim CS_Connection As SqlConnection

    Dim PP_ConnectionString As String = ""
    Dim InformixReadConnectionODBC As Odbc.OdbcConnection
    Dim InformixWriteConnectionODBC As Odbc.OdbcConnection
    Dim InformixReadConnectionSQL As SqlConnection
    Dim InformixWriteConnectionSQL As SqlConnection
    '    counters
    Dim NumberOfDepartmentsAdded As Integer = 0
    Dim numberOfPersonsAdded As Integer = 0
    Dim numberOfBadgesAdded As Integer = 0
    Dim NumberOfPicturesAdded As Integer = 0
    Dim NumberOfPerson_UserAdded As Integer = 0
    Dim NumberOfPerson_Category As Integer = 0
    Dim logDir As String = ""
    Dim PP_Schema As String = ""
    Dim mtest As String


	Public Sub Main()

        'get package variable values
        logDir = Dts.Variables("User::logDir").Value
        If (logDir = "" Or logDir = "Development time Value") Then
            logDir = "C:\ACAMS_SSIS\Logs\"
        End If

        CS_ConnectionString = Dts.Variables("User::CS_Connection").Value
        If (CS_ConnectionString = "" Or CS_ConnectionString = "Development time Value") Then
            CS_ConnectionString = "Data Source=192.168.65.3;Initial Catalog=CS_BOSD -- Dev;Integrated Security=True;Application Name=SSIS-ACAMPackagePP4-{70559378-9960-4DA3-8862-DE50C4083CCA}192.168.65.3.CS_BOSD -- Dev;"
        End If

        PP_ConnectionString = Dts.Variables("User::PP_Connection").Value
        If (PP_ConnectionString = "" Or PP_ConnectionString = "Development time Value") Then
            PP_ConnectionString = "uid=informix;Dsn=PicturePerfectInformix;pw=informix;"
        End If


        PP_Schema = "informix"

        'NO WAY TO TEST THIS AT THE MOMENT!
        'Check the queue size before continuing
        '''   If ckACAMSqueue() > maxACAMSMessageQueue Then
        '''TraceLog(1, "***** Processing Haulted, ACAMS message queue = " & maxACAMSMessageQueue)
        '''  Exit Sub
        '''  End If

        ' Initialize badge status map
        Me.statusMapTable = New Hashtable
        Dim spl() As String = Me.statusMapStr.Split(",")
        For Each s As String In spl
            Dim nv() As String = s.Split("=")
            Me.statusMapTable.Add(nv(0), nv(1))
        Next

        'These two fields are done outside of the hashtable mapping
        'badgeUserDataMap.Add("CompanyName", 1)
        'badgeUserDataMap.Add("DivisionName", 2)


        badgeUserDataMap.Add("BadgeColorName", 3)
        'badgeUserDataMap.Add("user4", 4)
        badgeUserDataMap.Add("CustomsFlag", 5)
        badgeUserDataMap.Add("JobRole", 6)
        'badgeUserDataMap.Add("work_loc", 7)
        badgeUserDataMap.Add("DriverFlag", 8)
        badgeUserDataMap.Add("LAWFlag", 9)
        badgeUserDataMap.Add("GatesFlag", 10)
        badgeUserDataMap.Add("ATCT", 11)
        badgeUserDataMap.Add("BadgeNumber", 25)

        'RGuidi: replaced commented entries with our column names

       
        personUserDataMap.Add("CalculatedHeightInFeet", 14) 'RGuidi: no match
        
        personUserDataMap.Add("DriverLicenseNumber", 21) 'RGuidi: no match
        personUserDataMap.Add("DriverLicenseState", 22) 'RGuidi: no match
        personUserDataMap.Add("DriverLicenseExpire", 23) 'RGuidi: no match

        personUserDataMap.Add("DateOfBirth", 12)
        personUserDataMap.Add("SocialSecurityNumber", 13)
        personUserDataMap.Add("CalculatedHeightInInches", 15)
        personUserDataMap.Add("WeightInPounds", 16)
        personUserDataMap.Add("SexCode", 17)
        personUserDataMap.Add("EyeDesc", 18)
        personUserDataMap.Add("HairDesc", 19)
        personUserDataMap.Add("RaceDesc", 20)

        TraceLog(3, " ") 'blank line at job start

        Dim refCmd As SqlCommand

        Try

            CS_Manager = Dts.Connections.Add("ADO.NET")
            CS_Manager.ConnectionString = CS_ConnectionString
            CS_Connection = CS_Manager.AcquireConnection(Nothing) 'New SqlConnection
            TraceLog(3, "Acquired connection to CS_BOSD")
        Catch ex As Exception
            Dim emailstatus = SendMail("Exception in connecting to the CS database", ex.ToString)
            TraceLog(0, "Exception in connecting to the CS database " & ex.ToString & ": " & emailstatus)
            Return
        End Try

        Try
            'NOTE: You cannot call the AcquireConnection method of the ODBC connection manager from managed code
            '      because it returns a native object. Use the connection string to connect to the data source. 
            InformixReadConnectionODBC = New OdbcConnection(PP_ConnectionString)
            InformixReadConnectionODBC.Open()

            InformixWriteConnectionODBC = New OdbcConnection(PP_ConnectionString)
            InformixWriteConnectionODBC.Open()

            TraceLog(3, "Acquired connection to informix")
        Catch ex As Exception
            Dim emailstatus = SendMail("Exception in connecting to the Informix database", ex.ToString)
            TraceLog(0, "Exception in connecting to the Informix database " & ex.ToString & ": " & emailstatus)

            'NOTE: The process runs once a minute. The email recipient will therefore receive 60 emails an hour until the process is stopped or the issue resolved.
            'Resolution involves getting IWS folks on the horn to resolve the issue.
            'I am putting the process to sleep for 15 minutes to minimize the emails.
            'Better idea?
            Thread.Sleep(900000)

            Return
        End Try

        Dim c As Integer = 0

        'RGuidi: added [TransferID] > @PriorTransferID to prevent infinite loops when something goes haywire
        Dim PriorTransactionID As Integer = 0
        Dim sSql As String = "Select TOP 1 * from [Data].[AccessControl.Transfers] where [TransmitEnd] is null and [TransferID] > @PriorTransferID ORDER BY [TransferID] "

        Dim sSqlUpdStart As String = "UPDATE [Data].[AccessControl.Transfers] Set [TransmitStart]=getDate() WHERE [TransferID] = @TransferID"
        Dim sSqlUpdEnd As String = "UPDATE [Data].[AccessControl.Transfers] Set [TransmitEnd]=getDate() WHERE [TransferID] = @TransferID"

        'NOTE: This process updates the control tables accordingly:
        '[AccessControl.Transfers].[TransmitStart]                  -- within Main
        '[AccessControl.TransferPersonDivisions].[WhenTransmitted]  -- within TransferPersonDiv
        '[AccessControl.TransferPersons].[WhenTransmitted]          -- within TransferPersonUpdates
        '[AccessControl.TransferBadges].[WhenTransmitted]           -- within TransferBadge
        '[AccessControl.TransferDivisions].[WhenTransmitted]        -- within TransferDivision
        '[AccessControl.Transfers].[TransmitEnd]                    -- within Main

        Try
            While c < 5000
                c = c + 1
                refCmd = New SqlCommand(sSql, CS_Connection)
                refCmd.Parameters.AddWithValue("PriorTransferID", PriorTransactionID)
                Dim CS_ControlTableReader = refCmd.ExecuteReader()

                If CS_ControlTableReader.Read Then

                    'Read a record from [Data].[AccessControl.Transfers] table
                    Dim transactionID As Integer = CS_ControlTableReader("TransferID")
                    Dim DataType As String = CS_ControlTableReader("DataType")
                    refCmd.Dispose()

                    Try


                        CS_ControlTableReader.Close()

                        TraceLog(3, "============================Processing row with TransferID = " & transactionID)
                        refCmd = New SqlCommand(sSqlUpdStart, CS_Connection)
                        refCmd.Parameters.AddWithValue("TransferID", transactionID)
                        If refCmd.ExecuteNonQuery() <= 0 Then TraceLog(0, "Failed to update start_transmit date for transactionID " & transactionID)

                        'CALLS DEPEND ON DATA TYPE
                        If DataType = "PersonDiv" Then
                            TransferPersonDiv(transactionID)

                            '4/11/2013 rguidi: This is new. Using  triggers of the XRef table to insert new persons and only using biographics for udpating bio data

                        ElseIf DataType = "Person" Then
                            TransferPersonUpdates(transactionID)

                            '3/19/2013 rguidi: it was decided not to transmit badges
                        ElseIf DataType = "Badge" Then
                            TransferBadge(transactionID)

                        ElseIf DataType = "BadgeStat" Then
                            UpdateBadgeStatus(transactionID)

                        ElseIf DataType = "BadgeRprnt" Then
                            ReprintBadge(transactionID)

                        ElseIf DataType = "Division" Then
                            TransferDivision(transactionID)
                        End If

                        'Currently not being used
                        'TransferCategory(transactionID)
                        'TransferBadgeCategory(transactionID)

                        If DataType.StartsWith("Badge") Then
                            UpdateModifyDateTimeForPerson(transactionID)
                        End If

                        If countPending(transactionID) = 0 Then
                            refCmd = New SqlCommand(sSqlUpdEnd, CS_Connection)
                            refCmd.Parameters.AddWithValue("TransferID", transactionID)
                            If refCmd.ExecuteNonQuery() <= 0 Then TraceLog(0, "Failed to update End_transmit date for transactionID " & transactionID)
                            refCmd.Dispose()
                        End If

                        PriorTransactionID = transactionID

                    Catch ex As Exception
                        TraceLog(0, "Error processing transcation: " + ex.Message)
                        PriorTransactionID = transactionID
                    End Try

                Else
                    Exit While
                End If
            End While
        Catch ex As Exception
            TraceLog(0, ex.ToString)
            If Not IsNothing(ex.InnerException) Then

                TraceLog(0, ex.InnerException.ToString())

            End If

        End Try

        CS_Connection.Close()

        InformixReadConnectionODBC.Close()
        InformixWriteConnectionODBC.Close()

        Dts.TaskResult = ScriptResults.Success

    End Sub

    Function LoadPersonDivisionObject(ByVal transactionID As Integer) As personDivision

        Dim sSQL As String = ""

      
            'Read record from Transfer tables with matching transfer_id
        sSQL = "Select top(1)  " & _
                   " x.PersonID, x.[DivisionID] " & _
                   " FROM [Data].[AccessControl.TransferPersonDivisions] tpd " & _
                   " INNER JOIN [Data].[Person.PersonDivisionXref] x on x.[PersonDivisionXrefID] = tpd.[PersonDivisionXrefID] " & _
                   " where TransferID = " & transactionID

        TraceLog(1, sSQL)


        Dim refCmd = New SqlCommand(sSQL, CS_Connection)
        Dim Reader = refCmd.ExecuteReader
        Dim oPersonDivision As personDivision = New personDivision()

        While Reader.Read
            oPersonDivision.PersonID = Reader("PersonID").ToString
            oPersonDivision.DivisionID = Reader("DivisionID").ToString
        End While
            Reader.Close()
            refCmd.Dispose()

        Return oPersonDivision

    End Function

    Sub ReprintBadge(ByVal transactionID As Integer)
        Try


            Dim sSQL As String = "SELECT top(1) b.[BadgeID], b.[BadgeNumber], bp.[BadgeStatusCode], b.[CardNumber] " & _
                                " FROM [Data].[AccessControl.TransferBadges] tb " & _
                                " INNER JOIN [Data].[Person.Badges] b on b.[BadgeID] = tb.[BadgeID] " & _
                                " INNER JOIN [Data].[Person.BadgeStatusPeriods] bp on bp.[BadgeID] = b.[BadgeID] " & _
                                " WHERE tb.TransferID = " & transactionID & _
                                " order by bp.[_DataChanges_RowID] desc "

            Dim refCmd = New SqlCommand(sSQL, CS_Connection)
            'refCmd.Parameters.AddWithValue("TransferID", transactionID)
            TraceLog(1, sSQL)
            Dim CS_BadgeReader As SqlDataReader = refCmd.ExecuteReader

            Dim BadgeID As String
            Dim BadgeNumber As String
            Dim BadgeStatus As String
            Dim currentPPBadgeStatus As String = 0
            Dim CardNumber As String

            Dim oBadge As Badge = New Badge()
            While CS_BadgeReader.Read

                BadgeID = CS_BadgeReader("BadgeID").ToString.Trim
                BadgeNumber = CS_BadgeReader("BadgeNumber").ToString.Trim
                BadgeStatus = CS_BadgeReader("BadgeStatusCode").ToString.Trim
                CardNumber = "00520" & CS_BadgeReader("CardNumber").ToString.Trim

            End While
            CS_BadgeReader.Close()
            CS_BadgeReader = Nothing
            refCmd.Dispose()

            TraceLog(1, "Badge Reprint :  " & BadgeStatus)

            If Not IsNumeric(BadgeNumber.Substring(0, 1)) Then

                BadgeNumber = BadgeNumber.Substring(1, BadgeNumber.Length - 1)

            End If

            Dim informixCmd As OdbcCommand
            Dim nRows As Integer




            Dim sqlUpdatePerson = "set lock mode to wait 10; Update " & PP_Schema & ".badge set status = 6, modify_date=" & Format(DateTime.Now, "yyyyMMdd") & " , modify_time = " & Format(DateTime.Now, "HHMMss") & "  where status = 0 and unique_id='" & BadgeNumber & "'"

            informixCmd = New Odbc.OdbcCommand(sqlUpdatePerson, InformixWriteConnectionODBC)
            TraceLog(1, "Executing Query: " & sqlUpdatePerson)

            nRows = informixCmd.ExecuteNonQuery()


            Dim sqlUpdatePerson2 = "set lock mode to wait 10; Update " & PP_Schema & ".badge set status = 0 " & ", modify_date=" & Format(DateTime.Now, "yyyyMMdd") & " , modify_time = " & Format(DateTime.Now, "HHMMss") & "  where bid = '" & CardNumber & "'"

            informixCmd = New Odbc.OdbcCommand(sqlUpdatePerson2, InformixWriteConnectionODBC)
            TraceLog(1, "Executing Query: " & sqlUpdatePerson2)

            nRows = informixCmd.ExecuteNonQuery()

            Dim sSqlUpdTrans As String = "UPDATE [Data].[AccessControl.TransferBadges] Set [WhenTransmitted]=getDate() WHERE [TransferID] = @TransferID"
            Dim refCommandUpdate As SqlCommand
            refCommandUpdate = New SqlCommand(sSqlUpdTrans, CS_Connection)
            refCommandUpdate.Parameters.AddWithValue("TransferID", transactionID)
            If refCommandUpdate.ExecuteNonQuery() <= 0 Then TraceLog(0, "Failed to update badge status for Badges update transactionID " & transactionID)





        Catch ex As Exception
            TraceLog(0, "Failed to update reprint badge status for Badges update transactionID " & transactionID)
            TraceLog(0, ex.Message)

        End Try


    End Sub



    Sub UpdateBadgeStatus(ByVal transactionID As Integer)
        Try

       
            Dim sSQL As String = "SELECT top(1) b.[BadgeID], b.[BadgeNumber], bp.[BadgeStatusCode], b.[CardNumber] " & _
                                " FROM [Data].[AccessControl.TransferBadges] tb " & _
                                " INNER JOIN [Data].[Person.Badges] b on b.[BadgeID] = tb.[BadgeID] " & _
                                " INNER JOIN [Data].[Person.BadgeStatusPeriods] bp on bp.[BadgeID] = b.[BadgeID] " & _
                                " WHERE tb.TransferID = " & transactionID & _
                                " order by bp.[_DataChanges_RowID] desc "

            Dim refCmd = New SqlCommand(sSQL, CS_Connection)
            'refCmd.Parameters.AddWithValue("TransferID", transactionID)
            TraceLog(1, sSQL)
            Dim CS_BadgeReader As SqlDataReader = refCmd.ExecuteReader

            Dim BadgeID As String
            Dim BadgeNumber As String
            Dim BadgeStatus As String
            Dim currentPPBadgeStatus As String = 0
            Dim CardNumber As String

            Dim oBadge As Badge = New Badge()
            While CS_BadgeReader.Read

                BadgeID = CS_BadgeReader("BadgeID").ToString.Trim
                BadgeNumber = CS_BadgeReader("BadgeNumber").ToString.Trim
                BadgeStatus = CS_BadgeReader("BadgeStatusCode").ToString.Trim
                CardNumber = "00520" & CS_BadgeReader("CardNumber").ToString.Trim

            End While
            CS_BadgeReader.Close()
            CS_BadgeReader = Nothing
            refCmd.Dispose()

            TraceLog(1, "Current Badge Status in CS is :  " & BadgeStatus)

            If Not IsNumeric(BadgeNumber.Substring(0, 1)) Then

                BadgeNumber = BadgeNumber.Substring(1, BadgeNumber.Length - 1)

            End If

            Dim informixCmd As OdbcCommand
            Dim nRows As Integer

            'Default the badge status to deleted
            Dim PPBadgeStatus As String = "6"

            Select Case BadgeStatus
                Case "LOST"
                    PPBadgeStatus = "4"

                Case "LSTLN"
                    PPBadgeStatus = "4"

                Case "CFSC"
                    PPBadgeStatus = "5"

                Case "EXPR"
                    PPBadgeStatus = "5"

                Case "INVLD"
                    PPBadgeStatus = "5"

                Case "RECAL"
                    PPBadgeStatus = "5"

                Case "UNCLM"
                    PPBadgeStatus = "5"

                Case "RTRN"
                    PPBadgeStatus = "6"

                Case "CANC"
                    PPBadgeStatus = "6"

                Case "ACTV"
                    PPBadgeStatus = "0"

            End Select

            If BadgeStatus <> "ACTV" Then

                Dim sqlUpdatePerson = "set lock mode to wait 10; Update " & PP_Schema & ".badge set status = " & PPBadgeStatus & ", modify_date=" & Format(DateTime.Now, "yyyyMMdd") & " , modify_time = " & Format(DateTime.Now, "HHMMss") & "  where status = " & currentPPBadgeStatus & " and unique_id='" & BadgeNumber & "'"

                informixCmd = New Odbc.OdbcCommand(sqlUpdatePerson, InformixWriteConnectionODBC)
                TraceLog(1, "Executing Query: " & sqlUpdatePerson)

                nRows = informixCmd.ExecuteNonQuery()

            Else

                Dim sqlUpdatePerson = "set lock mode to wait 10; Update " & PP_Schema & ".badge set status = " & PPBadgeStatus & ", modify_date=" & Format(DateTime.Now, "yyyyMMdd") & " , modify_time = " & Format(DateTime.Now, "HHMMss") & "  where bid = '" & CardNumber & "'"

                informixCmd = New Odbc.OdbcCommand(sqlUpdatePerson, InformixWriteConnectionODBC)
                TraceLog(1, "Executing Query: " & sqlUpdatePerson)

                nRows = informixCmd.ExecuteNonQuery()

            End If


            Dim sSqlUpdTrans As String = "UPDATE [Data].[AccessControl.TransferBadges] Set [WhenTransmitted]=getDate() WHERE [TransferID] = @TransferID"
            Dim refCommandUpdate As SqlCommand
            refCommandUpdate = New SqlCommand(sSqlUpdTrans, CS_Connection)
            refCommandUpdate.Parameters.AddWithValue("TransferID", transactionID)
            If refCommandUpdate.ExecuteNonQuery() <= 0 Then TraceLog(0, "Failed to update badge status for Badges update transactionID " & transactionID)





        Catch ex As Exception
            TraceLog(0, "Failed to update badge status for Badges update transactionID " & transactionID)
            TraceLog(0, ex.Message)

        End Try


    End Sub

    Function LoadPersonObject(ByVal transactionID As Integer, ByVal EmployeeID As Integer, ByVal PersonID As Integer, ByVal DivisionID As Integer) As Person

        Dim sSQL As String = ""
        TraceLog(1, "Fetching Person from CS")

        If transactionID > 0 Then
            'Read record from Transfer tables with matching transfer_id
            sSQL = "Select top(1)  " & _
                   " tp.PersonID, pin, FirstName, MiddleName, LastName, Address, ApartmentNumber, City, CountrySubdivisionCode, CountryCode, PostalCode,  " & _
                   " WorkPhoneNumber, EmployeeID, DateOfBirth, SocialSecurityNumber, HeightInInches, WeightInPounds, SexCode, pb.EyeColorCode, pb.HairColorCode, pb.RaceCode , ec.eyecolordescription, hc.HairColorDescription, race.RaceDescription  " & _
                   " FROM [Data].[AccessControl.TransferPersons] tp  " & _
                   " INNER JOIN [Data].[Person.PersonBiographics] pb on pb.PersonID = tp.PersonID " & _
                   " LEFT join [Data].[Miscellaneous.EyeColors] as ec on ec.EyeColorCode = pb.EyeColorCode" & _
                   " LEFT join [data].[Miscellaneous.HairColors] as hc on hc.HairColorCode = pb.HairColorCode" & _
                   " LEFT join [data].[Miscellaneous.Races] as race on race.RaceCode = pb.RaceCode" & _
                   " where TransferID = " & transactionID
        ElseIf EmployeeID > 0 Then
            'Read record from PersonBiographics table with matching EmployeeID
            sSQL = "Select * from [Data].[Person.PersonBiographics] where EmployeeID = " & EmployeeID
        ElseIf DivisionID > 0 And PersonID > 0 Then

            sSQL = "Select top(1)  " & _
                    " pb.personid,pin, FirstName, MiddleName, LastName, Address, ApartmentNumber, City, CountrySubdivisionCode, CountryCode, PostalCode,  " & _
                    " WorkPhoneNumber, EmployeeID, DateOfBirth, SocialSecurityNumber, HeightInInches, WeightInPounds, SexCode, pb.EyeColorCode, pb.HairColorCode, pb.RaceCode , ec.eyecolordescription, hc.HairColorDescription, race.RaceDescription, JobRoleDescription  " & _
                    " FROM [Data].[Person.PersonBiographics] pb " & _
                    " LEFT join [Data].[Miscellaneous.EyeColors] as ec on ec.EyeColorCode = pb.EyeColorCode" & _
                    " LEFT join [data].[Miscellaneous.HairColors] as hc on hc.HairColorCode = pb.HairColorCode" & _
                    " LEFT join [data].[Miscellaneous.Races] as race on race.RaceCode = pb.RaceCode" & _
                    " INNER Join            Data.[Person.PersonDivisionXref] AS PPDX           ON pb.PersonID = PPDX.PersonID " & _
                    " Left JOIN [Data].[Person.PersonDivisionJobRoleXref] as pdj on pdj.PersonDivisionxRefID = PPDX.PersonDivisionXRefID " & _
                    " left join [Data].[Person.JobRoles] as pjr on pjr.jobroleid = pdj.JobRoleID" & _
                    " WHERE         PPDX.PersonID = " & PersonID & " and PPDX.DivisionID = " & DivisionID

            ' " INNER Join            Data.[Common.Entities] AS CE                  ON PPDX.PersonDivisionXrefID = CE.PersonDivisionXrefID                        AND CE.EntityTypeCode = 'PERS' " & _
        Else
            
            'Read record from PersonBiographics table with matching EmployeeID
            sSQL = "Select * from [Data].[Person.PersonBiographics] where PersonID = " & PersonID
        End If

        TraceLog(1, sSQL)

        ' need to load oPerson!
        Dim refCmd = New SqlCommand(sSQL, CS_Connection)
        Dim Reader = refCmd.ExecuteReader

        Dim oPerson As Person = New Person()
        While Reader.Read
            ' If transactionID > 0 Or EmployeeID > 0 Then
            oPerson.PersonID = Reader("PersonID").ToString
            '  End If

            oPerson.Pin = Reader("pin").ToString
            oPerson.FirstName = Reader("FirstName").ToString
            oPerson.MiddleName = Reader("MiddleName").ToString
            oPerson.LastName = Reader("LastName").ToString
            oPerson.Address = Reader("Address").ToString
            oPerson.ApartmentNumber = Reader("ApartmentNumber").ToString
            oPerson.City = Reader("City").ToString
            oPerson.CountrySubdivisionCode = Reader("CountrySubdivisionCode").ToString
            oPerson.CountryCode = Reader("CountryCode")
            oPerson.PostalCode = Reader("PostalCode").ToString
            oPerson.WorkPhoneNumber = Reader("WorkPhoneNumber").ToString
            oPerson.EmployeeID = Reader("EmployeeID").ToString
            oPerson.DateOfBirth = Reader("DateOfBirth").ToString
            oPerson.SocialSecurityNumber = Reader("SocialSecurityNumber").ToString
            oPerson.HeightInInches = Reader("HeightInInches").ToString
            oPerson.WeightInPounds = Reader("WeightInPounds").ToString
            oPerson.SexCode = Reader("SexCode").ToString
            oPerson.EyeColorCode = Reader("EyeColorCode").ToString
            oPerson.HairColorCode = Reader("HairColorCode").ToString
            oPerson.RaceCode = Reader("RaceCode").ToString
            oPerson.EyeDesc = Reader("EyeColorDescription").ToString
            oPerson.HairDesc = Reader("HairColorDescription").ToString
            oPerson.RaceDesc = Reader("RaceDescription").ToString
            oPerson.CalculatedHeightInFeet = Integer.Parse(Reader("HeightInInches").ToString) / 12
            oPerson.CalculatedHeightInInches = Integer.Parse(Reader("HeightInInches").ToString) Mod 12

            Try
                oPerson.JobRole = Reader("JobRoleDescription").ToString()
            Catch ex As Exception

            End Try

            'oPerson.CompanyName = Reader("DBAName").ToString
            'oPerson.DivisionName = Reader("DivisionName").ToString

        End While
        Reader.Close()
        refCmd.Dispose()

        If (DivisionID > 0 And oPerson.PersonID > 0) Then

            Dim DriverLicenseSQL As String = "SELECT " & _
                        "CRD.DocumentID,    CRDT.DocumentTypeDescription,    CRD.IssuingAuthority_CountryCode,    CRD.IssuingAuthority_CountrySubdivisionCode,    CRD.IdentificationNumber,    CRD.ExpirationDate,        PPDX.DivisionID" & _
                        " FROM         Data.[Person.PersonBiographics] AS PPB       INNER Join            Data.[Person.PersonDivisionXref] AS PPDX           ON PPB.PersonID = PPDX.PersonID " & _
                        " INNER Join            Data.[Common.Entities] AS CE                  ON PPDX.PersonDivisionXrefID = CE.PersonDivisionXrefID                        AND CE.EntityTypeCode = 'PERS'" & _
                        " INNER Join            Data.[Common.Requirement.Documents] AS CRD                  ON CE.EntityID = CRD.EntityID        INNER Join" & _
                        " Data.[Common.Requirement.DocumentTypes] AS CRDT                   ON CRD.DocumentTypeNumber = CRDT.DocumentTypeNumber                        AND CRDT.DocumentTypeDescription LIKE 'B1. %'        INNER Join " & _
                        " Data.[Common.Requirement.DocumentsRequired] AS CRDR                  ON CRD.RequirementCode = CRDR.RequirementCode                         AND CRDR.DropdownName = 'PRIMARY'                        AND CRD.DocumentTypeNumber = CRDR.DocumentTypeNumber" & _
                        " WHERE       PPDX.PersonID = " & oPerson.PersonID & " and PPDX.DivisionID = " & DivisionID


            refCmd = New SqlCommand(DriverLicenseSQL, CS_Connection)

            Reader = refCmd.ExecuteReader


            While Reader.Read

                oPerson.DriverLicenseExpire = Reader("ExpirationDate").ToString.Trim
                oPerson.DriverLicenseNumber = Reader("IdentificationNumber").ToString.Trim
                oPerson.DriverLicenseState = Reader("IssuingAuthority_CountrySubdivisionCode").ToString.Trim

            End While
            Reader.Close()
            Reader = Nothing
            refCmd.Dispose()

        End If

       

        Return oPerson

    End Function

    Function LoadDivisionObject(ByVal transactionID As Integer, ByVal DivisionID As Integer) As Division

        Dim sSQL As String = ""

        If transactionID > 0 Then
            'Read record from Transfer_Division table with matching transfer_id
            sSQL = "SELECT top(1) td.[DivisionID], d.[DivisionCode], d.[DivisionName], c.CompanyID, c.CompanyCode, c.CorporationName " & _
                   " FROM [Data].[AccessControl.TransferDivisions] td " & _
                   " INNER JOIN [Data].[Division.Divisions] d on d.[DivisionID] = td.[DivisionID] " & _
                   " INNER JOIN [Data].[Company.Companies] c on c.[CompanyID] = d.[CompanyID] " & _
                   " WHERE td.TransferID = " & transactionID '@TransferID"
        Else
            'Read record from Division table with matching DivisionID
            sSQL = "SELECT top(1) d.[DivisionID], d.[DivisionCode], d.[DivisionName], c.CompanyID, c.CompanyCode, c.CorporationName " & _
                   " FROM [Data].[Division.Divisions] d " & _
                   " INNER JOIN [Data].[Company.Companies] c on c.[CompanyID] = d.[CompanyID] " & _
                   " WHERE d.[DivisionID] = " & DivisionID
        End If

        Dim refCmd = New SqlCommand(sSQL, CS_Connection)
        Dim CS_DivisionTableReader = refCmd.ExecuteReader

        Dim oDivision As Division = New Division()
        While CS_DivisionTableReader.Read
            oDivision.DivisionID = CS_DivisionTableReader("DivisionID").ToString.Trim
            oDivision.DivisionCode = CS_DivisionTableReader("DivisionCode").ToString.Trim
            oDivision.DivisionName = CS_DivisionTableReader("DivisionName").ToString.Trim
            oDivision.CompanyID = CS_DivisionTableReader("CompanyID").ToString.Trim
            oDivision.CompanyCode = CS_DivisionTableReader("CompanyCode").ToString.Trim
            oDivision.CorporationName = CS_DivisionTableReader("CorporationName").ToString.Trim
            oDivision.PPDivision = "9" & oDivision.CompanyCode.PadLeft(4, "0") & oDivision.DivisionCode
        End While
        CS_DivisionTableReader.Close()
        refCmd.Dispose()

        Return oDivision
    End Function

    Sub TransferDivision(ByVal transactionID As Integer)

        'Read record from Transfer_Division table with matching transfer_id
        Dim oDivision As Division = LoadDivisionObject(transactionID, 0)

        If Not IsNothing(oDivision.DivisionID) Then
            Dim i As Integer = InsertDivision(oDivision)

            If i >= 0 Then
                Dim sSqlUpdTrans As String = "UPDATE [Data].[AccessControl.TransferDivisions] Set [WhenTransmitted]=getDate() WHERE [TransferID] = @TransferID"
                Dim refCmd = New SqlCommand(sSqlUpdTrans, CS_Connection)
                refCmd.Parameters.AddWithValue("TransferID", transactionID)
                If refCmd.ExecuteNonQuery() <= 0 Then TraceLog(0, "Failed to update TransferDivisions.WhenTransmitted date for transactionID " & transactionID)
            End If

        End If 'If Not IsNothing(oDivision.DivisionID)

        oDivision = Nothing
    End Sub

    '2/2013 NOT USED
    Sub TransferCategory(ByVal transactionID As Integer)
        'Read record from Transfer_Division table with matching transfer_id
        Dim refCmd = New SqlCommand("Select * from Transfer_Category where transferID = @transferID", CS_Connection)
        refCmd.Parameters.AddWithValue("transferID", transactionID)
        Dim laxidReader = refCmd.ExecuteReader
        While laxidReader.Read
            Dim informixCmd As New OdbcCommand("UPDATE Category SET description=?,modify_date=?,modify_time=? WHERE id=?", InformixWriteConnectionODBC)
            informixCmd.Parameters.AddWithValue("description", laxidReader("descrp"))
            informixCmd.Parameters.AddWithValue("modify_date", DateTime.UtcNow.ToString("yyyyMMdd"))
            informixCmd.Parameters.AddWithValue("modify_time", DateTime.UtcNow.ToString("HHmmss"))
            informixCmd.Parameters.AddWithValue("id", laxidReader("CatID"))
            Try
                If informixCmd.ExecuteNonQuery <= 0 Then ' no records updated. Insert record
                    informixCmd.Dispose()
                    informixCmd = New OdbcCommand("INSERT INTO Category (id,description,permission_grp,m2mr_type,facility,modify_date,modify_time)" & _
                                                       " VALUES (?,?,-1,0,?,?,?)", InformixWriteConnectionODBC)
                    informixCmd.Parameters.AddWithValue("id", laxidReader("CatID"))
                    informixCmd.Parameters.AddWithValue("description", laxidReader("descrp"))
                    informixCmd.Parameters.AddWithValue("facility", -1)
                    informixCmd.Parameters.AddWithValue("modify_date", DateTime.UtcNow.ToString("yyyyMMdd"))
                    informixCmd.Parameters.AddWithValue("modify_time", DateTime.UtcNow.ToString("HHmmss"))
                    informixCmd.ExecuteNonQuery()
                    TraceLog(3, "New category created " & laxidReader("CatId"))
                Else ' update was successful
                    TraceLog(3, "Category record updated. id=" & laxidReader("CatId"))
                End If
            Catch ex As Exception
                TraceLog(0, "Exception creating Category ID=" & laxidReader("CatId") & ":" & ex.ToString)
            Finally
                informixCmd.Dispose()
            End Try

        End While
        laxidReader.Close()
        refCmd.Dispose()

    End Sub

    '2/2013 NOT USED 
    Sub UpdateInsertCategories(ByVal laxCats As ArrayList, ByVal emp_id As String, ByVal co_div As String, ByVal transactionID As String)
        ' read existing categories for this person
        Dim sql As String = "SELECT pc.id ID, pc.category_id, pc.slot_number, p.id person_id" & _
                            " from person p" & _
                            " inner join department d on p.department=d.id" & _
                            " left join person_category pc on pc.person_id=p.id" & _
                            " Where p.employee=? and d.division=? Order by pc.category_id"

        Dim informixCmd As New Odbc.OdbcCommand(sql, InformixReadConnectionODBC)
        informixCmd.Parameters.AddWithValue("employee", emp_id)
        informixCmd.Parameters.AddWithValue("division", co_div)
        Dim informixReader As OdbcDataReader = informixCmd.ExecuteReader
        Dim currentCats As New Hashtable
        Dim person_id As Integer = 0
        While informixReader.Read
            person_id = informixReader("person_id")
            If informixReader.IsDBNull(informixReader.GetOrdinal("category_id")) Then Continue While ' This will happen if there are no categories
            If informixReader("slot_number") < specialCategoriesStartSlot Then ' not a special category. Retain special categories in PP.
                ' tbd: change this when categories are managed in b2k
                If Not laxCats.Contains(informixReader("category_id").ToString) Then ' category not in new list
                    ' delete this catetory for this person from pp
                    Dim delCommand As New OdbcCommand("DELETE From person_category where person_id=? and category_id=?", InformixWriteConnectionODBC)
                    delCommand.Parameters.AddWithValue("person_id", person_id)
                    delCommand.Parameters.AddWithValue("category_id", informixReader("category_id"))
                    delCommand.ExecuteNonQuery()
                    TraceLog(3, String.Format("Person Category {0} Deleted for person {1}", informixReader("category_id"), co_div + "." + emp_id))
                    delCommand.Dispose()
                    Continue While
                End If
            End If
            ' store the category and slot_number for reference during insertion
            If Not currentCats.ContainsKey(informixReader("category_id").ToString) Then currentCats.Add(informixReader("category_id").ToString, informixReader("slot_number").ToString)
        End While

        informixReader.Close()
        informixCmd.Dispose()

        Dim freeSlot As Integer = 0
        Dim personCatMaxID As Integer = 0 ' this will be used as ID during insertion. Should not be required if ID was auto-increment field
        ' insert new category in laxCats i.e. the ones not present in currentCats
        For Each cat As Integer In laxCats
            If Not currentCats.ContainsKey(cat.ToString) Then ' this is new category
                ' find a free slot for insertig category
                Do
                    freeSlot = freeSlot + 1
                Loop While currentCats.ContainsValue(freeSlot.ToString) ' slot number is in use

                If personCatMaxID = 0 Then  ' lazy initialization of max ID
                    informixCmd = New OdbcCommand("SELECT MAX(ID) MaxID from person_category", InformixReadConnectionODBC)
                    Integer.TryParse(informixCmd.ExecuteScalar().ToString, personCatMaxID)
                    informixCmd.Dispose()
                End If

                ' insert the new category in pp
                Dim insCommand As New OdbcCommand("INSERT Into person_category (id, person_id, category_id, slot_number, facility, modify_date, modify_time)" & _
                                                  " VALUES (?,?,?,?,?,?,?)", InformixWriteConnectionODBC)
                personCatMaxID = personCatMaxID + 1
                TraceLog(3, String.Format("Adding Person_Category id={0}, person_id={1}, slot_number={2}, category_id={3} ", personCatMaxID, person_id, freeSlot, cat))
                insCommand.Parameters.AddWithValue("id", personCatMaxID)
                insCommand.Parameters.AddWithValue("person_id", person_id)
                insCommand.Parameters.AddWithValue("category_id", cat)
                insCommand.Parameters.AddWithValue("slot_number", freeSlot)
                insCommand.Parameters.AddWithValue("facility", -1)
                insCommand.Parameters.AddWithValue("modify_date", DateTime.UtcNow.ToString("yyyyMMdd"))
                insCommand.Parameters.AddWithValue("modify_time", DateTime.UtcNow.ToString("HHmmss"))
                Try
                    'Check ACAMS Pending Messages stop after set amount
                    If laxCats.IndexOf(cat) Mod 5 = 0 Then
                        If ckACAMSqueue() > maxACAMSMessageQueue Then
                            TraceLog(1, "***** Processing Haulted, ACAMS message queue = " & maxACAMSMessageQueue)
                            Exit Sub
                        End If
                    End If

                    If insCommand.ExecuteNonQuery() <= 0 Then
                        TraceLog(1, String.Format("Failed to insert Category {0} for person {1} ", cat, co_div + "." + emp_id))
                    Else
                        'Update the transfer Badge Category Record to include a date
                        TraceLog(3, String.Format("Person Category {0} Added to person {1}", cat, co_div + "." + emp_id))
                        Dim updateCmd As New SqlCommand("UPDATE Transfer_BadgeCategory Set transmission_date = getDate() where transferID = @transferId AND category_id = @catID AND emp_id = @empId", CS_Connection)
                        updateCmd.Parameters.AddWithValue("transferId", transactionID)
                        updateCmd.Parameters.AddWithValue("catID", cat)
                        updateCmd.Parameters.AddWithValue("empId", emp_id)
                        updateCmd.ExecuteNonQuery()
                        updateCmd.Dispose()
                    End If
                Catch ex As Exception
                    TraceLog(1, String.Format("Exception Inserting Category {0} for person {1}: {2} ", cat, co_div + "." + emp_id, ex.Message))
                End Try
                insCommand.Dispose()
            End If
        Next
    End Sub

    '2/20133 NOT USED
    Sub TransferBadgeCategory(ByVal transactionID As Integer)
        'Read record from Transfer_Division table with matching transfer_id
        Dim refCmd = New SqlCommand("Select distinct emp_id, co_div, category_id from Transfer_BadgeCategory where transferID = @transferID and transmission_date IS NULL order by emp_id, co_div, category_id", CS_Connection)
        refCmd.Parameters.AddWithValue("transferID", transactionID)
        Dim emp_id As String = ""
        Dim co_div As String = ""
        Dim laxidReader = refCmd.ExecuteReader
        Dim laxCats As New ArrayList
        Dim moreRecords As Boolean = laxidReader.Read
        While moreRecords
            laxCats.Clear() ' new emp. start over
            emp_id = laxidReader("emp_id")
            co_div = "9" & laxidReader("co_div")
            While moreRecords
                If emp_id.Equals(laxidReader("emp_id").ToString) And co_div.Equals("9" & laxidReader("co_div").ToString) Then
                    laxCats.Add(laxidReader("Category_ID").ToString) ' collect the categories in an array
                    moreRecords = laxidReader.Read
                Else
                    Exit While
                End If
            End While
            UpdateInsertCategories(laxCats, emp_id, co_div, transactionID)
        End While
        refCmd.Dispose()
        laxidReader.Close()
    End Sub

    Function UpdatePersonRecords(ByVal oPerson As Person) As Integer
        ' Update Person based on employee id alone. (note that this may update multiple records)

        Dim nRows As Integer = 0
        Dim nRowsAffected As Integer = 0

        'rguidi: added this block - the old code was relying on the count of records affected by the update.
        Dim sql = "Select count(employee) as cnt from " & PP_Schema & ".person where employee = " & oPerson.EmployeeID & ";"
        Dim informixCmd1 As Odbc.OdbcCommand
        informixCmd1 = New Odbc.OdbcCommand(sql, InformixReadConnectionODBC)
        Try
            nRows = informixCmd1.ExecuteScalar
        Catch ex As Exception
            TraceLog(0, "Exception in obtaining person record count for Employee " & oPerson.EmployeeID & ":" & ex.ToString)
        Finally
            informixCmd1.Dispose()
        End Try

        If nRows > 0 Then
            Dim sqlUpd = "update " & PP_Schema & ".person set pin=?" & _
                            ", first_name=?, last_name=?, initials=?, title =?" & _
                            ", address1=?, address2=?, address3=?, address4=?, address5=?, phone=? " & _
                            ", modify_date=? ,modify_time=?" & _
                            " where person.status = 0 And employee = ?;"

            Dim informixCmd As Odbc.OdbcCommand
            informixCmd = New Odbc.OdbcCommand(sqlUpd, InformixWriteConnectionODBC)
            informixCmd.Parameters.AddWithValue("pin", oPerson.Pin)
            informixCmd.Parameters.AddWithValue("first_name", oPerson.FirstName)
            informixCmd.Parameters.AddWithValue("last_name", oPerson.LastName)
            informixCmd.Parameters.AddWithValue("initials", oPerson.MiddleName)
            informixCmd.Parameters.AddWithValue("title", DBNull.Value) ' TBD
            informixCmd.Parameters.AddWithValue("address1", oPerson.Address)
            informixCmd.Parameters.AddWithValue("address2", oPerson.ApartmentNumber)
            informixCmd.Parameters.AddWithValue("address3", oPerson.City)
            informixCmd.Parameters.AddWithValue("address4", oPerson.CountrySubdivisionCode)
            informixCmd.Parameters.AddWithValue("address5", oPerson.PostalCode & oPerson.CountryCode)
            informixCmd.Parameters.AddWithValue("phone", oPerson.WorkPhoneNumber)
            informixCmd.Parameters.AddWithValue("modify_date", DateTime.UtcNow.ToString("yyyyMMdd"))
            informixCmd.Parameters.AddWithValue("modify_time", DateTime.UtcNow.ToString("HHmmss"))
            informixCmd.Parameters.AddWithValue("employee", oPerson.EmployeeID)

            Try
                nRowsAffected = informixCmd.ExecuteNonQuery()
            Catch ex As Exception
                TraceLog(0, "Exception in updating person record for EmployeeID " & oPerson.EmployeeID & ":" & ex.ToString)
            Finally
                informixCmd.Dispose()
            End Try
        End If 'nRows > 0 

        If nRowsAffected > 0 Then ' person exists. update user data for this person
            InsertOrUpdateUserData(personUserDataMap, oPerson, Nothing)
        End If

        Return nRows
    End Function

    Function InsertDivision(ByVal oDivision As Division) As Integer

        TraceLog(1, "Inserting division")
        Dim nRows As Integer = 0
        Dim bExists As Boolean = False
        Dim sSql2 As String = "select id from " & PP_Schema & ".department where division = ?"
        Dim sSqlUpd As String = "UPDATE " & PP_Schema & ".department " + _
                        " SET description=?,location=?,manager=?,phone=?,user1=?,user2=?,facility=?, modify_date=?, modify_time=? " & _
                        " WHERE division=?;"

        Dim informixCmd As New Odbc.OdbcCommand
        Dim updCmdODBC As New Odbc.OdbcCommand
        Dim CS_Cmd As New SqlCommand
        Dim updCmdSQL As New SqlCommand

        Dim dept As String = ""
        Dim ddesc As String = ""
        Dim dloc As String = ""

        'dept = "9" + oDivision.CompanyCode + oDivision.DivisionCode
        dept = oDivision.PPDivision 'left pads companycode 4

        informixCmd = New Odbc.OdbcCommand(sSql2, InformixReadConnectionODBC)
        Dim reader As Odbc.OdbcDataReader = Nothing
        informixCmd.Parameters.AddWithValue("division", dept)
        '2. if found exit. 
        Try
            reader = informixCmd.ExecuteReader
            If reader.Read Then
                TraceLog(3, "PP Department already exists department.id = " & reader("id"))
                bExists = True

                updCmdODBC = New Odbc.OdbcCommand(sSqlUpd, InformixWriteConnectionODBC)

                ddesc = dept + " " + oDivision.CorporationName
                If ddesc.Length > 50 Then ddesc = ddesc.Substring(0, 50)
                updCmdODBC.Parameters.AddWithValue("description", ddesc)

                dloc = oDivision.CorporationName + ", " + oDivision.DivisionName
                If dloc.Length > 60 Then dloc.Substring(0, 60).Trim()

                updCmdODBC.Parameters.AddWithValue("location", "")
                updCmdODBC.Parameters.AddWithValue("manager", "")
                updCmdODBC.Parameters.AddWithValue("phone", "")
                updCmdODBC.Parameters.AddWithValue("user1", oDivision.CorporationName)
                updCmdODBC.Parameters.AddWithValue("user2", oDivision.DivisionName)
                updCmdODBC.Parameters.AddWithValue("facility", -1)
                updCmdODBC.Parameters.AddWithValue("modify_date", DateTime.UtcNow.ToString("yyyyMMdd"))
                updCmdODBC.Parameters.AddWithValue("modify_time", DateTime.UtcNow.ToString("HHmmss"))
                updCmdODBC.Parameters.AddWithValue("division", dept)
                Try
                    nRows = updCmdODBC.ExecuteNonQuery()
                    If (nRows = 0) Then
                        TraceLog(1, "Warning: No rows updated by Update department : description=" & ddesc)
                        nRows = -1
                    Else
                        TraceLog(3, "Department Updated : description=" & ddesc)
                    End If
                Catch ex As Exception
                    TraceLog(0, "Casi_Department: Exception updating new department : description=" & ddesc & ":" & ex.ToString)
                    nRows = -1
                End Try

                updCmdODBC.Dispose()
                informixCmd.Dispose()

            End If
        Catch ex As Exception
            TraceLog(0, "Casi_Department:Exception in Reading department " & ex.ToString)
        Finally
            reader.Close()
            informixCmd.Dispose()
        End Try

        If bExists = False Then
            ' Create department record in PP
            Dim insCmdText As String = "INSERT INTO " & PP_Schema & ".department (" & _
                                       "description,division,location,manager,phone,user1,user2," & _
                                       "facility, modify_date, modify_time) VALUES (?,?,?,?,?,?,?,?,?,?);"

            Dim insCmd As New Odbc.OdbcCommand(insCmdText, InformixWriteConnectionODBC)
            Dim desc As String = dept + " " + oDivision.CorporationName
            If desc.Length > 50 Then desc = desc.Substring(0, 50)
            insCmd.Parameters.AddWithValue("description", desc)
            insCmd.Parameters.AddWithValue("division", dept)
            Dim loc As String = oDivision.CorporationName + ", " + oDivision.DivisionName
            If loc.Length > 60 Then loc.Substring(0, 60).Trim()
            insCmd.Parameters.AddWithValue("location", "")
            insCmd.Parameters.AddWithValue("manager", "")
            insCmd.Parameters.AddWithValue("phone", "")
            insCmd.Parameters.AddWithValue("user1", oDivision.CorporationName)
            insCmd.Parameters.AddWithValue("user2", oDivision.DivisionName)
            insCmd.Parameters.AddWithValue("facility", -1)
            insCmd.Parameters.AddWithValue("modify_date", DateTime.UtcNow.ToString("yyyyMMdd"))
            insCmd.Parameters.AddWithValue("modify_time", DateTime.UtcNow.ToString("HHmmss"))
            Try
                nRows = insCmd.ExecuteNonQuery()
                If (nRows = 0) Then
                    TraceLog(1, "Warning: Failed to create department: description=" & desc)
                    nRows = -1
                Else
                    TraceLog(3, "New department created: description=" & desc)
                End If
            Catch ex As Exception
                TraceLog(0, "Casi_Department: Exception creating new department: description=" & desc & ":" & ex.ToString)
                nRows = -1
            Finally
                insCmd.Dispose()
            End Try
        End If 'bExists 

        Return nRows
    End Function
    Function InsertPersonCompanyAndDivisionUserField(ByVal PersonID As Integer, ByVal DivisionID As Integer, ByVal PPPersonID As Integer) As Integer




        Dim sSQL As String = "SELECT c.DBAName, d.DivisionName" & _
                          " FROM [Data].[Person.Persons] p" & _
                          " INNER JOIN [Data].[Person.PersonDivisionXref] x on x.[PersonID] = p.[PersonID] " & _
                          " INNER JOIN [Data].[Person.PersonBiographics] pb on pb.[PersonID] = x.[PersonID] " & _
                          " INNER JOIN [Data].[Division.Divisions] d on d.[DivisionID] = x.[DivisionID] " & _
                          " INNER JOIN [Data].[Company.Companies] c on c.[CompanyID] = d.[CompanyID] " & _
                          " WHERE p.PersonID = " & PersonID & " and x.DivisionID = " & DivisionID


        Dim refCmd = New SqlCommand(sSQL, CS_Connection)

        Dim CS_BadgeReader As SqlDataReader = refCmd.ExecuteReader

        Dim companyName As String = ""
        Dim DivisionName As String = ""

        Dim oBadge As Badge = New Badge()
        While CS_BadgeReader.Read
            companyName = CS_BadgeReader("DBAName").ToString.Trim
            DivisionName = CS_BadgeReader("DivisionName").ToString.Trim
        End While
        CS_BadgeReader.Close()
        CS_BadgeReader = Nothing
        refCmd.Dispose()

        Dim sqlInsert = "Insert Into person_user (id, description, person_id, slot_number, facility, modify_date, modify_time) VALUES (?,?,?,?,?,?,?);"


        Try
            Dim personCatMaxID As Integer

            If personCatMaxID = 0 Then  ' lazy initialization of max ID
                Dim informixCmd = New OdbcCommand("SELECT MAX(ID) MaxID from person_user", InformixReadConnectionODBC)
                Integer.TryParse(informixCmd.ExecuteScalar().ToString, personCatMaxID)
                informixCmd.Dispose()
            End If

            TraceLog(1, String.Format("Updating company name and division for this person.. ", DivisionName))
            TraceLog(1, "PPersonID=" & PPPersonID.ToString())
            personCatMaxID = personCatMaxID + 1

            Dim sqlUpdate = "Update person_user set description=?, modify_date=?, modify_time=? WHERE person_id=? AND slot_number=?;"


            ' try to update first. if update does not change any records then insert
            Dim cmd As New OdbcCommand(sqlUpdate, InformixWriteConnectionODBC)
            cmd.Parameters.AddWithValue("description", companyName)
            cmd.Parameters.AddWithValue("modify_date", DateTime.UtcNow.ToString("yyyyMMdd"))
            cmd.Parameters.AddWithValue("modify_time", DateTime.UtcNow.ToString("HHmmss"))
            cmd.Parameters.AddWithValue("person_id", PPPersonID)
            cmd.Parameters.AddWithValue("slot_number", 1)

            If cmd.ExecuteNonQuery() <= 0 Then ' no rows were updated. Insert this slot
                cmd.Dispose()
                cmd = New OdbcCommand(sqlInsert, InformixWriteConnectionODBC)
                cmd.Parameters.AddWithValue("id", personCatMaxID)
                cmd.Parameters.AddWithValue("description", companyName)
                cmd.Parameters.AddWithValue("person_id", PPPersonID)
                cmd.Parameters.AddWithValue("slot_number", 1)
                cmd.Parameters.AddWithValue("facility", -1)
                cmd.Parameters.AddWithValue("modify_date", DateTime.UtcNow.ToString("yyyyMMdd"))
                cmd.Parameters.AddWithValue("modify_time", DateTime.UtcNow.ToString("HHmmss"))
                TraceLog(1, "Company Updated")
            End If

            Dim nRows As Integer = cmd.ExecuteNonQuery()
            cmd.Dispose()

            If (nRows = 0) Then
                TraceLog(1, String.Format("Error Inserting company name user data ", companyName))
            End If

            cmd = New OdbcCommand(sqlUpdate, InformixWriteConnectionODBC)
            cmd.Parameters.AddWithValue("description", DivisionName)
            cmd.Parameters.AddWithValue("modify_date", DateTime.UtcNow.ToString("yyyyMMdd"))
            cmd.Parameters.AddWithValue("modify_time", DateTime.UtcNow.ToString("HHmmss"))
            cmd.Parameters.AddWithValue("person_id", PPPersonID)
            cmd.Parameters.AddWithValue("slot_number", 2)
            If cmd.ExecuteNonQuery() <= 0 Then ' no rows were updated. Insert this slot
                cmd.Dispose()
                cmd = New OdbcCommand(sqlInsert, InformixWriteConnectionODBC)
                cmd.Parameters.AddWithValue("id", personCatMaxID + 1)
                cmd.Parameters.AddWithValue("description", DivisionName)
                cmd.Parameters.AddWithValue("person_id", PPPersonID)
                cmd.Parameters.AddWithValue("slot_number", 2)
                cmd.Parameters.AddWithValue("facility", -1)
                cmd.Parameters.AddWithValue("modify_date", DateTime.UtcNow.ToString("yyyyMMdd"))
                cmd.Parameters.AddWithValue("modify_time", DateTime.UtcNow.ToString("HHmmss"))
                TraceLog(1, "Division Updated")
            End If
            nRows = cmd.ExecuteNonQuery()
            cmd.Dispose()
            If (nRows = 0) Then
                TraceLog(1, String.Format("Error Inserting Division Name user data ", DivisionName))
            End If

            Return 1

        Catch ex As Exception
            TraceLog(1, "Error updating company and division data " & ex.ToString())
        End Try



    End Function

    Private Function PaddStringWithDelimeter(ByVal originalString As String) As String

        Return "'" + originalString + "' :  Length = " + originalString.Length.ToString()

    End Function


    Function InsertPersonRecord(ByVal oPersonDivision As personDivision, ByVal oPerson As Person) As Integer
        Dim dept_id As Integer = 0
        Dim nRows As Integer = 0


        Dim informixCmd As Odbc.OdbcCommand

        If Not IsNothing(oPersonDivision.DivisionID) Then
            'Map from oPerson.DivisionID to Division.PPDivision
            Dim oDivision As Division = LoadDivisionObject(0, oPersonDivision.DivisionID)

            TraceLog(1, "Divsion Loaded")


            'Ensure that the department exists in PicturePerfect
            Dim sql As String = "SELECT id from department where division=?;"
            informixCmd = New Odbc.OdbcCommand(sql, InformixReadConnectionODBC)
            informixCmd.Parameters.AddWithValue("division", oDivision.PPDivision)
            Integer.TryParse(informixCmd.ExecuteScalar, dept_id)

            TraceLog(1, "Department id = " + dept_id.ToString())


            If dept_id = 0 Then
                TraceLog(1, String.Format("PP Department does not exist for PP Division {0} using BOAA DivisionID {1}. Inserting PP Department.", oDivision.PPDivision, oPersonDivision.DivisionID))
                nRows = InsertDivision(oDivision)
            End If 'dept_id = 0

            'Ensure that the Person/Department does not already exist in PP
            sql = "SELECT id from " & PP_Schema & ".person where employee=? and department=?;"

            TraceLog(1, "SQL: = " + sql)


            informixCmd = New Odbc.OdbcCommand(sql, InformixReadConnectionODBC)
            informixCmd.Parameters.AddWithValue("employee", oPerson.EmployeeID)
            informixCmd.Parameters.AddWithValue("department", dept_id)

            TraceLog(1, "employee: = " + oPerson.EmployeeID)

            TraceLog(1, "department: = " + dept_id.ToString())



            Dim iExistsCnt As Integer = 0
            Try

                Integer.TryParse(informixCmd.ExecuteScalar, iExistsCnt)

            Catch ex As Exception

                TraceLog(1, ex.ToString())
                iExistsCnt = 0

            End Try

            TraceLog(1, "PersonID = " & iExistsCnt.ToString())



            If iExistsCnt = 0 Then
                Dim sqlInsert As String = "INSERT INTO " & PP_Schema & ".person (" + _
                   "pin, status, type, person_kp_resp, person_trace, person_trace_alarm, " + _
                   "employee, department, first_name,last_name, initials, title, address1, address2, address3, address4,address5, " + _
                   "phone, phone2, 	reissue_cnt, apb, reader, access_date,access_time, access_tz, " + _
                   "active_date, active_time, active_context, deactive_date, deactive_time, deactive_context, force_download, " + _
                    "facility, modify_date, modify_time) " & _
                    "values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);"

                TraceLog(1, sqlInsert)


                informixCmd = New Odbc.OdbcCommand(sqlInsert, InformixWriteConnectionODBC)

                TraceLog(1, "pin")

                informixCmd.Parameters.AddWithValue("pin", oPerson.Pin)

                TraceLog(1, "status")

                informixCmd.Parameters.AddWithValue("status", 0)

                TraceLog(1, "type")

                informixCmd.Parameters.AddWithValue("type", 1)

                TraceLog(1, "person_kp_resp")

                informixCmd.Parameters.AddWithValue("person_kp_resp", DBNull.Value)

                TraceLog(1, "person_trace")

                informixCmd.Parameters.AddWithValue("person_trace", DBNull.Value)

                TraceLog(1, "person_trace_alarm")

                informixCmd.Parameters.AddWithValue("person_trace_alarm", DBNull.Value)

                TraceLog(1, "employee")

                informixCmd.Parameters.AddWithValue("employee", oPerson.EmployeeID)

                TraceLog(1, "department")

                informixCmd.Parameters.AddWithValue("department", IIf(dept_id = 0, DBNull.Value, dept_id)) 'THIS SHOULD NEVER OCCUR

                TraceLog(1, "first_name")

                informixCmd.Parameters.AddWithValue("first_name", oPerson.FirstName)

                TraceLog(1, "last_name")

                informixCmd.Parameters.AddWithValue("last_name", oPerson.LastName)

                TraceLog(1, "initials")

                If IsNothing(oPerson.MiddleName) Or oPerson.MiddleName = "" Then
                    oPerson.MiddleName = " "
                End If

                informixCmd.Parameters.AddWithValue("initials", oPerson.MiddleName.Substring(0, 1))

                TraceLog(1, "title")

                informixCmd.Parameters.AddWithValue("title", DBNull.Value)

                TraceLog(1, "address1")

                informixCmd.Parameters.AddWithValue("address1", oPerson.Address)

                TraceLog(1, "address2")

                informixCmd.Parameters.AddWithValue("address2", oPerson.ApartmentNumber)

                TraceLog(1, "address3")

                informixCmd.Parameters.AddWithValue("address3", oPerson.City)

                TraceLog(1, "address4")

                informixCmd.Parameters.AddWithValue("address4", oPerson.CountrySubdivisionCode)

                TraceLog(1, "address5")

                informixCmd.Parameters.AddWithValue("address5", oPerson.PostalCode & " " & oPerson.CountryCode)

                TraceLog(1, "phone")

                informixCmd.Parameters.AddWithValue("phone", oPerson.WorkPhoneNumber)

                TraceLog(1, "phone2")

                informixCmd.Parameters.AddWithValue("phone2", DBNull.Value)

                TraceLog(1, "reissue_cnt")

                informixCmd.Parameters.AddWithValue("reissue_cnt", DBNull.Value)

                TraceLog(1, "apb")

                informixCmd.Parameters.AddWithValue("apb", 0)

                TraceLog(1, "reader")

                informixCmd.Parameters.AddWithValue("reader", DBNull.Value)

                TraceLog(1, "access_date")

                informixCmd.Parameters.AddWithValue("access_date", DBNull.Value)

                TraceLog(1, "access_time")

                informixCmd.Parameters.AddWithValue("access_time", DBNull.Value)

                TraceLog(1, "access_tz")

                informixCmd.Parameters.AddWithValue("access_tz", DBNull.Value)

                TraceLog(1, "active_date")

                informixCmd.Parameters.AddWithValue("active_date", 19710101)

                TraceLog(1, "active_time")

                informixCmd.Parameters.AddWithValue("active_time", 235959)

                TraceLog(1, "active_context")

                informixCmd.Parameters.AddWithValue("active_context", 1)

                TraceLog(1, "deactive_date")

                informixCmd.Parameters.AddWithValue("deactive_date", 20201231)

                TraceLog(1, "deactive_time")

                informixCmd.Parameters.AddWithValue("deactive_time", 235959)

                TraceLog(1, "deactive_context")

                informixCmd.Parameters.AddWithValue("deactive_context", 1)

                TraceLog(1, "force_download")

                informixCmd.Parameters.AddWithValue("force_download", 0)

                TraceLog(1, "facility")

                informixCmd.Parameters.AddWithValue("facility", -1)

                TraceLog(1, "modify_date")

                informixCmd.Parameters.AddWithValue("modify_date", DateTime.UtcNow.ToString("yyyyMMdd"))

                TraceLog(1, "modify_time")

                informixCmd.Parameters.AddWithValue("modify_time", DateTime.UtcNow.ToString("HHmmss"))







                For Each param As OdbcParameter In informixCmd.Parameters

                    Try
                        TraceLog(1, param.ParameterName + ": " + PaddStringWithDelimeter(param.Value.ToString()))
                    Catch ex As Exception
                        TraceLog(1, "Param Failed: " + param.ParameterName.ToString())
                    End Try



                Next

                TraceLog(1, "Params added to sql insert")


                Try

                    Integer.TryParse(informixCmd.ExecuteNonQuery(), iExistsCnt)

                    sql = "SELECT id from " & PP_Schema & ".person where employee=? and department=?;"
                    informixCmd = New Odbc.OdbcCommand(sql, InformixReadConnectionODBC)
                    informixCmd.Parameters.AddWithValue("employee", oPerson.EmployeeID)
                    informixCmd.Parameters.AddWithValue("department", dept_id)
                    Try
                        Integer.TryParse(informixCmd.ExecuteScalar, iExistsCnt)
                    Catch ex As Exception
                        TraceLog(1, "TryParse Failed Again")
                    End Try


                    TraceLog(1, "PersonID = " & iExistsCnt.ToString())

                    If (iExistsCnt = 0) Then

                        TraceLog(1, "0 Rows Inserted for New Person. EmployeeID = " & oDivision.PPDivision + " -" + oPerson.EmployeeID)


                    Else



                        TraceLog(3, "New Person created. EmployeeID = " & oDivision.PPDivision + " - " + oPerson.EmployeeID)

                        Dim sqlUpdatePerson = "Update " & PP_Schema & ".person set facility = -1, apb=0,active_date=19710101, active_context=1, deactive_context=1, active_time = 235959, deactive_date=20201231, deactive_time=235959  where employee='" & oPerson.EmployeeID & "' and department='" & dept_id & "'"

                        informixCmd = New Odbc.OdbcCommand(sqlUpdatePerson, InformixWriteConnectionODBC)

                        nRows = informixCmd.ExecuteNonQuery()

                        If (nRows = 0) Then
                            TraceLog(1, "Error updating person record. EmployeeID = " & oDivision.PPDivision + " -" + oPerson.EmployeeID)
                        End If

                        nRows = InsertPersonCompanyAndDivisionUserField(oPerson.PersonID, oPersonDivision.DivisionID, iExistsCnt)

                        If (nRows = 0) Then
                            TraceLog(1, "Error updating person company and division record. EmployeeID = " & oDivision.PPDivision + " -" + oPerson.EmployeeID)
                        End If


                    End If
                Catch ex As Exception
                    nRows = 0
                    TraceLog(0, "Exception in inserting Person.  = " & oDivision.PPDivision + " - " + oPerson.EmployeeID & ": " & ex.ToString)
                Finally
                    informixCmd.Dispose()
                End Try

                If nRows > 0 Then
                    ' Create person_user records for data items known from person information
                    InsertOrUpdateUserData(personUserDataMap, oPerson, Nothing)
                End If

            Else

                UpdatePersonRecords(oPerson)
            End If 'iExistsCnt = 0



        End If ' Not IsNothing(oPersonDivision.DivisionID) 


    End Function

    Sub TransferPersonDiv(ByVal transactionID As Integer)
        ' Read record from [Data].[AccessControl.TransferPersonDivisions] table with matching transfer-id. Supplement with Bio data
        TraceLog(1, "Loading person division record")
        Dim oPersonDivision As personDivision = LoadPersonDivisionObject(transactionID)
        TraceLog(1, "Person Division Loaded, Loading Person")
        Dim oPerson As Person = LoadPersonObject(0, 0, oPersonDivision.PersonID, oPersonDivision.DivisionID)
        TraceLog(1, "Person Loaded")


        If Not IsNothing(oPersonDivision.PersonID) Then

            TraceLog(1, "Inserting person record")
            ' Insert the PP Person records
            InsertPersonRecord(oPersonDivision, oPerson)

            TraceLog(1, "Person Insert succeeded")


            Dim sSqlUpdTrans As String = "UPDATE [Data].[AccessControl.TransferPersonDivisions] Set [WhenTransmitted]=getDate() WHERE [TransferID] = @TransferID"
            Dim refCmd = New SqlCommand(sSqlUpdTrans, CS_Connection)
            refCmd.Parameters.AddWithValue("TransferID", transactionID)
            If refCmd.ExecuteNonQuery() <= 0 Then TraceLog(0, "Failed to update TransferPersonDivisions.WhenTransmitted date for transactionID " & transactionID)

            'Log confirms that the record was really added
            Dim iDivision As Integer = CInt(oPersonDivision.DivisionID)
            Dim oDivision As Division = LoadDivisionObject(0, iDivision)
            Dim sql = "Select p.id, p.employee, p.pin, p.first_name, p.last_name, p.initials, p.status , p.department, D.Division " & _
                            ", p.modify_date ,p.modify_time" & _
                            " from " & PP_Schema & ".person p " & _
                            " left outer join department D on D.id = P.department " & _
                            " where p.employee = '" & oPerson.EmployeeID & "' and D.division = '" & oDivision.PPDivision & "';"
            Dim informixCmd1 As Odbc.OdbcCommand
            informixCmd1 = New Odbc.OdbcCommand(sql, InformixReadConnectionODBC)
            Try
                Dim informixReader As Odbc.OdbcDataReader
                informixReader = informixCmd1.ExecuteReader
                If informixReader.HasRows Then
                    informixReader.Read()
                    Dim logData As String
                    logData = "INSERT id:" & informixReader.Item(0).ToString & _
                              " employee:" & informixReader.Item(1).ToString & _
                              " pin:" & informixReader.Item(2).ToString & _
                              " first_name:" & informixReader.Item(3).ToString & _
                              " last_name:" & informixReader.Item(4).ToString & _
                              " initials:" & informixReader.Item(5).ToString & _
                              " status:" & informixReader.Item(6).ToString & _
                              " department:" & informixReader.Item(7).ToString & _
                              " division:" & informixReader.Item(8).ToString
                    TraceLog(0, logData)
                End If
                informixReader.Close()
                informixCmd1.Dispose()
            Catch ex As Exception
                TraceLog(0, "Exception in obtaining person record for Employee " & oPerson.EmployeeID & ":" & ex.ToString)
            Finally
                informixCmd1.Dispose()
            End Try


            oPerson = Nothing
        End If

        TraceLog(1, "Transfering badges for this person")
        Dim transferBadgesToNewPerson As String = "EXEC [Utility].[TransferBadgeinPP] @TransferID"
        Dim UpdaterefCmd = New SqlCommand(transferBadgesToNewPerson, CS_Connection)
        UpdaterefCmd.Parameters.AddWithValue("TransferID", transactionID)
        UpdaterefCmd.ExecuteNonQuery()
        TraceLog(1, "Transfer badge sproc executed")

    End Sub

    Sub TransferPersonUpdates(ByVal transactionID As Integer)
        ' Read record from [Data].[AccessControl.TransferPersons] table etc with matching transfer-id
        'NOTE: THIS BLOCK NOW ONLY UPDATES THE PICTURE PERFECT RECORD. THE TransferPersonDivisions Sub inserts new PP Person records

        Dim oPerson As Person = LoadPersonObject(transactionID, 0, 0, 0)

        If Not IsNothing(oPerson.PersonID) Then
            ' Update Person based on employee id alone. (note that this may update multiple records)
            Dim NRows As Integer = UpdatePersonRecords(oPerson)
            If (NRows > 0) Then ' Some records were updated. So this person already exists
                TraceLog(3, "Employee ID =" & oPerson.EmployeeID & ". " & NRows & " Records Updated")
            End If

            Dim sSqlUpdTrans As String = "UPDATE [Data].[AccessControl.TransferPersons] Set [WhenTransmitted]=getDate() WHERE [TransferID] = @TransferID"
            Dim refCmd = New SqlCommand(sSqlUpdTrans, CS_Connection)
            refCmd.Parameters.AddWithValue("TransferID", transactionID)
            If refCmd.ExecuteNonQuery() <= 0 Then TraceLog(0, "Failed to update TransferPersons.WhenTransmitted date for transactionID " & transactionID)


            'log confirms that the data was really updated to informix!
            'use this for testing
            Dim sql = "Select p.id, p.employee, p.pin, p.first_name, p.last_name, p.initials, p.status , p.department, D.Division " & _
                            ", p.modify_date ,p.modify_time" & _
                            " from " & PP_Schema & ".person p " & _
                            " left outer join department D on D.id = P.department " & _
                            " where p.employee = '" & oPerson.EmployeeID & "';"
            Dim informixCmd1 As Odbc.OdbcCommand
            informixCmd1 = New Odbc.OdbcCommand(sql, InformixReadConnectionODBC)
            Try
                Dim informixReader As Odbc.OdbcDataReader
                informixReader = informixCmd1.ExecuteReader
                If informixReader.HasRows Then
                    informixReader.Read()
                    Dim logData As String
                    logData = "UPDATE id:" & informixReader.Item(0).ToString & _
                              " employee:" & informixReader.Item(1).ToString & _
                              " pin:" & informixReader.Item(2).ToString & _
                              " first_name:" & informixReader.Item(3).ToString & _
                              " last_name:" & informixReader.Item(4).ToString & _
                              " initials:" & informixReader.Item(5).ToString & _
                              " status:" & informixReader.Item(6).ToString & _
                              " department:" & informixReader.Item(7).ToString & _
                              " division:" & informixReader.Item(8).ToString
                    TraceLog(0, logData)
                End If
                informixReader.Close()
                informixCmd1.Dispose()
            Catch ex As Exception
                TraceLog(0, "Exception in obtaining person record for Employee " & oPerson.EmployeeID & ":" & ex.ToString)
            Finally
                informixCmd1.Dispose()
            End Try


            oPerson = Nothing
        End If

    End Sub

    Sub InsertOrUpdateUserData(ByVal userDataMap As Hashtable, ByVal oPerson As Person, ByVal oBadge As Badge)
        Dim cmd As OdbcCommand
        'Dim CS_UpdCmd As SqlCommand
        'Dim CS_InsCmd As SqlCommand
        Dim employee As String = oPerson.EmployeeID
        Dim person_id As Integer = 0

        ' first readback person_id
        Dim sql As String = "Select id from person where employee=?"

        cmd = New OdbcCommand(sql, InformixReadConnectionODBC) ' will find only one record
        cmd.Parameters.AddWithValue("employee", employee)
        Integer.TryParse(cmd.ExecuteScalar(), person_id)
        If person_id = 0 Then
            TraceLog(1, "Failed to retrieve Inserted Person . EmployeeID " & employee)
            Return
        End If
        cmd.Dispose()

        For Each item As DictionaryEntry In userDataMap
            Dim slot_number As Integer = item.Value

            Dim user_data As String = ""
            If Not IsNothing(oPerson) Then
                For Each prop As PropertyInfo In oPerson.GetType().GetProperties()
                    If prop.Name = item.Key Then
                        user_data = prop.GetValue(oPerson, Nothing)
                        Exit For
                    End If
                Next
            End If
            If Not IsNothing(oBadge) Then
                For Each prop As PropertyInfo In oBadge.GetType().GetProperties()
                    If prop.Name = item.Key Then
                        user_data = prop.GetValue(oBadge, Nothing)
                        If item.Key = "LAWFlag" Then
                            TraceLog(1, "Law flag set in insert")
                        End If
                        Exit For
                    End If
                Next
            End If

            If user_data <> "" Then
                Dim sqlUpdate = "Update person_user set description=?, modify_date=?, modify_time=? WHERE person_id=? AND slot_number=?;"

                Dim sqlInsert = "Insert Into person_user (id, description, person_id, slot_number, facility, modify_date, modify_time) VALUES (?,?,?,?,?,?,?);"

                cmd = New OdbcCommand(sqlUpdate, InformixWriteConnectionODBC)
                Try
                    TraceLog(1, String.Format("setting user value EmployeeId={0}, slot={1}, value={2} ", employee, slot_number, user_data))

                    ' try to update first. if update does not change any records then insert
                    cmd.Parameters.AddWithValue("description", user_data)
                    cmd.Parameters.AddWithValue("modify_date", DateTime.UtcNow.ToString("yyyyMMdd"))
                    cmd.Parameters.AddWithValue("modify_time", DateTime.UtcNow.ToString("HHmmss"))
                    cmd.Parameters.AddWithValue("person_id", person_id)
                    cmd.Parameters.AddWithValue("slot_number", item.Value)
                    If cmd.ExecuteNonQuery() <= 0 Then ' no rows were updated. Insert this slot
                        cmd.Dispose()

                        Dim personCatMaxID As Integer = 0

                        If personCatMaxID = 0 Then  ' lazy initialization of max ID
                            Dim informixCmd = New OdbcCommand("SELECT MAX(ID) MaxID from person_user", InformixReadConnectionODBC)
                            Integer.TryParse(informixCmd.ExecuteScalar().ToString, personCatMaxID)
                            informixCmd.Dispose()
                        End If

                        cmd = New OdbcCommand(sqlInsert, InformixWriteConnectionODBC)
                        cmd.Parameters.AddWithValue("id", personCatMaxID + 1)
                        cmd.Parameters.AddWithValue("description", user_data)
                        cmd.Parameters.AddWithValue("person_id", person_id)
                        cmd.Parameters.AddWithValue("slot_number", item.Value)
                        cmd.Parameters.AddWithValue("facility", -1)
                        cmd.Parameters.AddWithValue("modify_date", DateTime.UtcNow.ToString("yyyyMMdd"))
                        cmd.Parameters.AddWithValue("modify_time", DateTime.UtcNow.ToString("HHmmss"))
                        cmd.ExecuteNonQuery()

                    End If
                    cmd.Dispose()
                Catch ex As Exception
                    TraceLog(1, String.Format("Exception in setting user value EmployeeId={0}, slot={1}, value={2}:{3} ", employee, slot_number, user_data, ex.Message))
                Finally

                End Try

            End If 'useEnd If  <> ""
        Next

    End Sub


    Sub InsertOrUpdateUserDataBadge(ByVal userDataMap As Hashtable, ByVal oBadge As Badge, ByVal person_id As Integer)
        Dim cmd As OdbcCommand
        'Dim CS_UpdCmd As SqlCommand
        'Dim CS_InsCmd As SqlCommand




        For Each item As DictionaryEntry In userDataMap
            Dim slot_number As Integer = item.Value

            Dim user_data As String = ""

            If Not IsNothing(oBadge) Then
                For Each prop As PropertyInfo In oBadge.GetType().GetProperties()
                    If prop.Name = item.Key Then
                        TraceLog(1, "Getting value for " + prop.Name)
                        user_data = prop.GetValue(oBadge, Nothing)
                        Exit For
                    End If
                Next
            End If

            If user_data <> "" Then
                Dim sqlUpdate = "Update person_user set description=?, modify_date=?, modify_time=? WHERE person_id=? AND slot_number=?;"

                TraceLog(1, sqlUpdate)

                Dim sqlInsert = "Insert Into person_user (id, description, person_id, slot_number, facility, modify_date, modify_time) VALUES (?,?,?,?,?,?,?);"

                TraceLog(1, sqlInsert)

                cmd = New OdbcCommand(sqlUpdate, InformixWriteConnectionODBC)
                Try
                    ' try to update first. if update does not change any records then insert
                    TraceLog(1, String.Format("setting user value  slot={0}, value={1}", slot_number, user_data))


                    cmd.Parameters.AddWithValue("description", user_data)
                    cmd.Parameters.AddWithValue("modify_date", DateTime.UtcNow.ToString("yyyyMMdd"))
                    cmd.Parameters.AddWithValue("modify_time", DateTime.UtcNow.ToString("HHmmss"))
                    cmd.Parameters.AddWithValue("person_id", person_id)
                    cmd.Parameters.AddWithValue("slot_number", item.Value)

                    If cmd.ExecuteNonQuery() <= 0 Then ' no rows were updated. Insert this slot
                        cmd.Dispose()

                        Dim personCatMaxID As Integer = 0

                        If personCatMaxID = 0 Then  ' lazy initialization of max ID
                            Dim informixCmd = New OdbcCommand("SELECT MAX(ID) MaxID from person_user", InformixReadConnectionODBC)
                            Integer.TryParse(informixCmd.ExecuteScalar().ToString, personCatMaxID)
                            informixCmd.Dispose()
                        End If

                        cmd = New OdbcCommand(sqlInsert, InformixWriteConnectionODBC)
                        cmd.Parameters.AddWithValue("id", personCatMaxID + 1)
                        cmd.Parameters.AddWithValue("description", user_data)
                        cmd.Parameters.AddWithValue("person_id", person_id)
                        cmd.Parameters.AddWithValue("slot_number", item.Value)
                        cmd.Parameters.AddWithValue("facility", -1)
                        cmd.Parameters.AddWithValue("modify_date", DateTime.UtcNow.ToString("yyyyMMdd"))
                        cmd.Parameters.AddWithValue("modify_time", DateTime.UtcNow.ToString("HHmmss"))
                        cmd.ExecuteNonQuery()


                    End If

                    cmd.Dispose()

                Catch ex As Exception

                    TraceLog(1, String.Format("Exception in setting user value EmployeeId={0}, slot={1}, value={2}:{3} ", slot_number, user_data, ex.Message))


                End Try

            End If 'useEnd If  <> ""
        Next

    End Sub



    Function UpdateBadgeRecord(ByVal bid As String, ByVal oBadge As Badge) As Integer
        Dim dept As String = "9" + oBadge.CompanyCode + oBadge.DivisionCode 'FIX THIS: lpad companycode 4

        Dim person_id As Integer = ObtainPPpersonID(oBadge.EmployeeID, dept, oBadge.DivisionID)
        Dim desc As String = oBadge.BadgeColorName

        Dim sqlText As String = "update " & PP_Schema & ".badge set description=?, person_id=?, return_date= ?, return_time= ?,return_tz= ?" + _
                                ",status=?, modify_date= ?, modify_time= ? where bid = ?"
        Dim NRows As Integer = 0

        Dim StatusVal As Integer = IIf(DBNull.Value.Equals(oBadge.STAEmployeeStatusID), 0, Me.statusMapTable(oBadge.STAEmployeeStatusID))

        Dim informixCmd As New Odbc.OdbcCommand(sqlText, InformixWriteConnectionODBC)
        informixCmd.Parameters.AddWithValue("description", desc)
        informixCmd.Parameters.AddWithValue("person_id", person_id)
        informixCmd.Parameters.AddWithValue("return_date", MakeIntDate(oBadge.WhenExpires))
        informixCmd.Parameters.AddWithValue("return_time", MakeIntTime(oBadge.WhenExpires))
        informixCmd.Parameters.AddWithValue("return_tz", IIf(DBNull.Value.Equals(oBadge.WhenExpires), DBNull.Value, 342))
        informixCmd.Parameters.AddWithValue("status", StatusVal)
        informixCmd.Parameters.AddWithValue("modify_date", DateTime.UtcNow.ToString("yyyyMMdd"))
        informixCmd.Parameters.AddWithValue("modify_time", DateTime.UtcNow.ToString("HHmmss"))
        informixCmd.Parameters.AddWithValue("bid", bid)

        Try
            NRows = informixCmd.ExecuteNonQuery()
            If (NRows = 0) Then
                TraceLog(1, "Failed to Update badge number= " & bid & ", Status=" & oBadge.STAEmployeeStatusID)
            Else
                TraceLog(3, "Updated badge number= " & bid & ", Status=" & oBadge.STAEmployeeStatusID)
            End If
        Catch ex As Exception
            TraceLog(0, "Exception updating badge number=" & bid & ":" & ex.Message)
        Finally
            informixCmd.Dispose()
        End Try

        If NRows > 0 Then
            InsertOrUpdateUserDataBadge(badgeUserDataMap, oBadge, person_id)
        End If
        Return NRows
    End Function

    Function InsertBadgeRecord(ByVal bid As String, ByVal oBadge As Badge) As Integer
        Dim sqlText As String = ""
        ' Not an existing badge. Create new badge
        Dim dept As String = "9" + oBadge.CompanyCode + oBadge.DivisionCode
        Dim person_id As Integer = ObtainPPpersonID(oBadge.EmployeeID, dept, oBadge.DivisionID)
        Dim desc As String = oBadge.BadgeColorID

        Dim cmdText_OLD As String = "INSERT INTO " & PP_Schema & ".badge (description, bid, status, badge_tour, badge_temp, " + _
           "person_id, reader, access_date, access_time, access_tz, issue_date, issue_time,issue_context, " + _
           "expired_date, expired_time,expired_context, return_date, return_time,return_tz, usage_count," + _
           "usage_exhausted, tour_badge, bid_format_id, reissue_cnt,reprint_cnt, unique_id, badge_design, " + _
           "facility, modify_date, modify_time) " + _
            "values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"

        Dim cmdText As String = "INSERT INTO " & PP_Schema & ".badge (description, bid, status, " + _
           "person_id, issue_date, issue_time, issue_context, " + _
           "expired_date, expired_time, expired_context, return_date, return_time, return_tz, " + _
           "bid_format_id, reissue_cnt, reprint_cnt, unique_id, " + _
           "facility, modify_date, modify_time) " + _
            "values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"

        Dim NRows As Integer = 0
        Dim Pacific_time As Integer = 342  ' the code for pacific time in ????????
        Dim StatusVal As Integer = IIf(DBNull.Value.Equals(oBadge.STAEmployeeStatusID), 0, Me.statusMapTable(oBadge.STAEmployeeStatusID))

        Dim informixCmd As New Odbc.OdbcCommand(cmdText, InformixWriteConnectionODBC)
        informixCmd.Parameters.AddWithValue("description", desc)
        informixCmd.Parameters.AddWithValue("bid", bid)
        informixCmd.Parameters.AddWithValue("status", StatusVal)
        'informixCmd.Parameters.AddWithValue("badge_tour", DBNull.Value)
        'informixCmd.Parameters.AddWithValue("badge_temp", DBNull.Value)
        informixCmd.Parameters.AddWithValue("person_id", person_id)
        'informixCmd.Parameters.AddWithValue("reader", DBNull.Value)
        'informixCmd.Parameters.AddWithValue("access_date", DBNull.Value)
        'informixCmd.Parameters.AddWithValue("access_time", DBNull.Value)
        'informixCmd.Parameters.AddWithValue("access_tz", DBNull.Value)
        informixCmd.Parameters.AddWithValue("issue_date", MakeIntDate(oBadge.WhenBecomesActive))
        informixCmd.Parameters.AddWithValue("issue_time", MakeIntTime(oBadge.WhenBecomesActive))
        informixCmd.Parameters.AddWithValue("issue_context", 0) ' 1)
        informixCmd.Parameters.AddWithValue("expired_date", MakeIntDate(oBadge.WhenExpires))
        informixCmd.Parameters.AddWithValue("expired_time", 235959) 'MakeIntTime(BadgeReader("expired_time")))
        informixCmd.Parameters.AddWithValue("expired_context", 0) '1)
        informixCmd.Parameters.AddWithValue("return_date", MakeIntDate(oBadge.WhenExpires))
        informixCmd.Parameters.AddWithValue("return_time", MakeIntTime(oBadge.WhenExpires))
        informixCmd.Parameters.AddWithValue("return_tz", IIf(DBNull.Value.Equals(oBadge.WhenExpires), DBNull.Value, Pacific_time))
        'informixCmd.Parameters.AddWithValue("usage_count", -1)
        'informixCmd.Parameters.AddWithValue("usage_exhausted", DBNull.Value)
        'informixCmd.Parameters.AddWithValue("tour_badge", DBNull.Value)
        informixCmd.Parameters.AddWithValue("bid_format_id", IIf(bid.StartsWith("00101"), 15, 19))
        informixCmd.Parameters.AddWithValue("reissue_cnt", "00")
        informixCmd.Parameters.AddWithValue("reprint_cnt", "00")
        informixCmd.Parameters.AddWithValue("unique_id", oBadge.BadgeNumber)
        'informixCmd.Parameters.AddWithValue("badge_design", DBNull.Value)
        informixCmd.Parameters.AddWithValue("facility", -1)
        informixCmd.Parameters.AddWithValue("modify_date", DateTime.UtcNow.ToString("yyyyMMdd"))
        informixCmd.Parameters.AddWithValue("modify_time", DateTime.UtcNow.ToString("HHmmss"))

        Try
            NRows = informixCmd.ExecuteNonQuery()
            If (NRows = 0) Then
                TraceLog(1, "Failed to create new badge " & bid)
            Else
                TraceLog(3, "Created new badge " & bid)
            End If

        Catch ex As Exception
            TraceLog(0, "Exception in inserting badge " & bid & ":" & ex.ToString)
        Finally
            informixCmd.Dispose()
        End Try

        'RGuidi: Person is already created in ObtainPPpersonID, so no need to call this here.. I think .....
        'If NRows > 0 Then
        'InsertOrUpdateUserData(badgeUserDataMap, oPerson)
        'End If
        Return NRows
    End Function

    Function UpdateModifyDateTimeForPerson(ByVal TransactionID As Integer) As Integer
        TraceLog(1, "Begin update of modify date/modify time for Transaction ID " & TransactionID)
        Dim cmd As New SqlCommand("[Utility].[PP_Person_ModifyDateTimeFromBadgeTransfer]", CS_Connection)        
        cmd.CommandType = CommandType.StoredProcedure
        cmd.Parameters.AddWithValue("@TransferID", TransactionID)
        Dim ds As New DataSet
        Dim da As New SqlDataAdapter(cmd)
        Try
            da.Fill(ds)
            Dim dr As DataRow = Nothing
            If ds.Tables.Count = 0 OrElse ds.Tables(0).Rows.Count = 0 Then
                Throw New Exception("No data returned from modify date/time stored procedure!")
            Else
                dr = ds.Tables(0).Rows(0)
            End If

            TraceLog(1, "BadgeID: " & dr("BadgeID"))
            TraceLog(1, "BadgeNumber: " & dr("BadgeNumber"))
            TraceLog(1, "ProxNumber: " & dr("ProxNumber"))
            TraceLog(1, "CardNumber: " & dr("CardNumber"))
            TraceLog(1, "EmployeeID: " & dr("EmployeeID"))
            TraceLog(1, "PP Person ID: " & dr("PP_PersonID_CSV"))
            TraceLog(1, "PP Select Query: " & dr("PP_Query_Select"))
            TraceLog(1, "PP Update Query: " & dr("PP_Query_Update"))
            TraceLog(1, "Person Rows Updated: " & dr("PersonCount"))

            If dr("PersonCount") = 0 Then
                Throw New Exception("No person was found in ACAMS for this badge!")
            End If

            Return Convert.ToInt32(dr("PersonCount"))
        Catch ex As Exception
            TraceLog(0, "Exception when attempting update of modify date/modify time in ACAMS: " & ex.ToString)
            Throw 'throwing exception so that this will be re-run next go round.
        Finally
            cmd.Dispose()
        End Try
        TraceLog(1, "End update of modify date/modify time for Transaction ID " & TransactionID)
    End Function

    Sub TransferBadge(ByVal transactionID As Integer)
        ' Read record from Transfer_badge table with matching transfer_id



        Dim sSQL As String = "SELECT top(1) pb.[EmployeeID],pb.[PersonID], x.[STAEmployeeStatusID], " & _
                             " d.[DivisionID], d.[DivisionCode], d.[DivisionName], c.[CompanyID], c.[CompanyCode], c.[CorporationName], " & _
                             " b.[BadgeID], b.[BadgeNumber], b.[BadgeColorID], b.[CardNumber], b.[WhenBecomesActive], b.WhenExpires , bc.BadgeColor" & _
                             " FROM [Data].[AccessControl.TransferBadges] tb " & _
                             " INNER JOIN [Data].[Person.Badges] b on b.[BadgeID] = tb.[BadgeID] " & _
                             " INNER JOIN [Data].[Person.PersonDivisionXref] x on b.[PersonDivisionXrefID] = x.[PersonDivisionXrefID] " & _
                             " INNER JOIN [Data].[Person.PersonBiographics] pb on pb.[PersonID] = x.[PersonID] " & _
                             " INNER JOIN [Data].[Division.Divisions] d on d.[DivisionID] = x.[DivisionID] " & _
                             " INNER JOIN [Data].[Company.Companies] c on c.[CompanyID] = d.[CompanyID] " & _
                             " INNER JOIN [Data].[Facility.BadgeColors] bc on bc.BadgeColorID = b.BadgeColorID" & _
                             " WHERE tb.TransferID = " & transactionID '@TransferID"

        TraceLog(1, sSQL)


        Dim refCmd = New SqlCommand(sSQL, CS_Connection)
        'refCmd.Parameters.AddWithValue("TransferID", transactionID)
        Dim CS_BadgeReader As SqlDataReader = refCmd.ExecuteReader

        Dim oBadge As Badge = New Badge()
        While CS_BadgeReader.Read
            oBadge.EmployeeID = CS_BadgeReader("EmployeeID").ToString.Trim
            oBadge.PersonID = CS_BadgeReader("PersonID").ToString.Trim
            oBadge.STAEmployeeStatusID = CS_BadgeReader("STAEmployeeStatusID").ToString.Trim
            oBadge.DivisionID = CS_BadgeReader("DivisionId").ToString.Trim
            oBadge.DivisionCode = CS_BadgeReader("DivisionCode").ToString.Trim
            oBadge.DivisionName = CS_BadgeReader("DivisionName").ToString.Trim
            oBadge.CompanyID = CS_BadgeReader("CompanyID").ToString.Trim
            oBadge.CompanyCode = CS_BadgeReader("CompanyCode").ToString.Trim
            oBadge.CorporationName = CS_BadgeReader("CorporationName").ToString.Trim
            oBadge.BadgeID = CS_BadgeReader("BadgeID").ToString.Trim
            oBadge.BadgeNumber = CS_BadgeReader("BadgeNumber").ToString.Trim
            oBadge.BadgeColorID = CS_BadgeReader("BadgeColorID").ToString.Trim
            oBadge.CardNumber = CS_BadgeReader("CardNumber").ToString.Trim
            oBadge.WhenBecomesActive = CS_BadgeReader("WhenBecomesActive").ToString.Trim
            oBadge.WhenExpires = CS_BadgeReader("WhenExpires").ToString.Trim
            oBadge.BadgeColorName = CS_BadgeReader("BadgeColor").ToString.Trim
        End While
        CS_BadgeReader.Close()
        CS_BadgeReader = Nothing
        refCmd.Dispose()

        TraceLog(1, "Badge Fetched")

        Dim sSQLIcons As String = "SELECT IconAbbreviation from  [Data].[AccessControl.TransferBadges] tb INNER JOIN [Data].[Person.Badges] b on b.[BadgeID] = tb.[BadgeID] Inner JOIN [Data].[Person.BadgeIconPeriods] bip on bip.BadgeID = b.BadgeID INNER JOIN [Data].[Icon.Icons] ic on ic.IconID = bip.IconID " & _
                             " WHERE tb.TransferID = " & transactionID & "and IconAbbreviation = "



        TraceLog(1, sSQL)


        Dim IconAbb As String = "'ATC'"
        Dim iconCommand As New SqlCommand(sSQLIcons + IconAbb, CS_Connection)
        Dim iconDataReader As SqlDataReader = iconCommand.ExecuteReader()
        Dim iconExists = iconDataReader.Read

        If iconExists Then

            oBadge.ATCT = "Y"

        Else

            oBadge.ATCT = "N"

        End If
        iconDataReader.Close()

        IconAbb = "'APDP'"
        iconCommand = New SqlCommand(sSQLIcons + IconAbb, CS_Connection)
        iconDataReader = iconCommand.ExecuteReader()
        iconExists = iconDataReader.Read

        If iconExists Then

            oBadge.GatesFlag = "Y"

        Else

            oBadge.GatesFlag = "N"

        End If
        iconDataReader.Close()

        IconAbb = "'LEO-WS'"
        iconCommand = New SqlCommand(sSQLIcons + IconAbb, CS_Connection)
        iconDataReader = iconCommand.ExecuteReader()
        iconExists = iconDataReader.Read

        If iconExists Then

            oBadge.LAWFlag = "Y"

        Else

            oBadge.LAWFlag = "N"

        End If
        iconDataReader.Close()


        IconAbb = "'CBP-RED'"
        iconCommand = New SqlCommand(sSQLIcons + IconAbb, CS_Connection)
        iconDataReader = iconCommand.ExecuteReader()
        iconExists = iconDataReader.Read

        If iconExists Then

            oBadge.CustomsFlag = "RED"

        Else
            iconDataReader.Close()
            IconAbb = "'CBP-BLK'"
            iconCommand = New SqlCommand(sSQLIcons + IconAbb, CS_Connection)
            iconDataReader = iconCommand.ExecuteReader()
            iconExists = iconDataReader.Read

            If iconExists Then

                oBadge.CustomsFlag = "BLACK"
            Else

                oBadge.CustomsFlag = "NONE"

            End If
        End If
        iconDataReader.Close()

        IconAbb = "'DRVR-GRN'"
        iconCommand = New SqlCommand(sSQLIcons + IconAbb, CS_Connection)
        iconDataReader = iconCommand.ExecuteReader()
        iconExists = iconDataReader.Read

        If iconExists Then

            oBadge.DriverFlag = "Y"
        Else

            oBadge.DriverFlag = "N"

        End If


        iconDataReader.Close()
        TraceLog(1, "Badge icons loaded")

        Dim informixCmd As Odbc.OdbcCommand



        Dim sql As String = "SELECT id from department where division=?;"
        TraceLog(1, sql)

        informixCmd = New Odbc.OdbcCommand(sql, InformixReadConnectionODBC)
        informixCmd.Parameters.AddWithValue("division", "9" & oBadge.CompanyCode & oBadge.DivisionCode)
        Dim dept_id As Integer

        Integer.TryParse(informixCmd.ExecuteScalar, dept_id)

        If dept_id = 0 Then
            TraceLog(1, "Person Division does not exist while trying to update badge user data")
        End If 'dept_id = 0

        'Ensure that the Person/Department does not already exist in PP
        sql = "SELECT id from " & PP_Schema & ".person where employee=? and department=?;"
        informixCmd = New Odbc.OdbcCommand(sql, InformixReadConnectionODBC)
        informixCmd.Parameters.AddWithValue("employee", oBadge.EmployeeID)
        informixCmd.Parameters.AddWithValue("department", dept_id)
        TraceLog(1, sql)

        Dim ppPersonID As Integer = 0
        Integer.TryParse(informixCmd.ExecuteScalar, ppPersonID)
        informixCmd.Dispose()


        'Dim sql2 As String = "select id from " & PP_Schema & ".person where division = ? "

        'Dim recordExists As Boolean = False
        'Dim bidStr As String = ""

        'Dim bid As String = oBadge.BadgeNumber


        'informixCmd = New Odbc.OdbcCommand(sql2, InformixReadConnectionODBC)
        ''1. select all lines where employee= given employee and department= given department
        'informixCmd.Parameters.AddWithValue("division", "9" & oBadge.CompanyID + oBadge.DivisionID)
        'Dim informixReader As Odbc.OdbcDataReader
        'informixReader = informixCmd.ExecuteReader
        'recordExists = informixReader.Read
        'informixReader.Close()
        'informixCmd.Dispose()

        If ppPersonID > 0 Then
            TraceLog(1, "Badge exists,  updating badge attribute data")
            InsertOrUpdateUserDataBadge(badgeUserDataMap, oBadge, ppPersonID)
        End If




        Dim sSqlUpdTrans As String = "UPDATE [Data].[AccessControl.TransferBadges] Set [WhenTransmitted]=getDate() WHERE [TransferID] = @TransferID"
        Dim refCommandUpdate As SqlCommand
        refCommandUpdate = New SqlCommand(sSqlUpdTrans, CS_Connection)
        refCommandUpdate.Parameters.AddWithValue("TransferID", transactionID)
        If refCommandUpdate.ExecuteNonQuery() <= 0 Then TraceLog(0, "Failed to update TransferBadges.WhenTransmitted date for Badges update transactionID " & transactionID)



        oBadge = Nothing
    End Sub

    Function GetPPpersonID(ByVal employee As String, ByVal division As String) As Integer

        Dim sqlText As String = "SELECT p.id id FROM Person p Inner Join Department d on p.department=d.id Where p.Employee=? And d.division=?"
        Dim person_id As Integer = 0

        Dim informixCmd As New Odbc.OdbcCommand(sqlText, InformixReadConnectionODBC)
        informixCmd.Parameters.AddWithValue("Employee", employee)
        informixCmd.Parameters.AddWithValue("Division", division)
        person_id = informixCmd.ExecuteScalar
        informixCmd.Dispose()

        If Not IsNothing(person_id) Then If person_id > 0 Then Return person_id ' person already exists with given emp,dept
        Return 0
    End Function

    Function ObtainPPpersonID(ByVal employee As String, ByVal co_div As String, ByVal divisionid As Integer) As Integer ' creates person if not exists for Badge
        ' Get PP person id if person already exists for given employee,dept
        ' Otherwise: creates person and return id

        'rguidi: if department does not exist in pp, create it
        Dim oDivision As Division = LoadDivisionObject(0, divisionid)
        If Not IsNothing(oDivision.DivisionID) Then
            Dim i As Integer = InsertDivision(oDivision)
        End If

        Dim personID As Integer = GetPPpersonID(employee, co_div)
        If personID > 0 Then Return personID

        ' if person does not exist in pp, create the record
        ' load oPerson!
        Dim oPerson As Person = LoadPersonObject(0, CType(employee, Integer), 0, divisionid)

        If IsNothing(oPerson.PersonID) Then
            TraceLog(1, "No PersonBiographics record for EmployeeID = " & employee)
            Return 0
        Else
            'FIX THIS: this is the old call InsertPersonRecord(oPerson, co_div)
        End If
        oPerson = Nothing

        personID = GetPPpersonID(employee, co_div)
        Return personID
    End Function

    Private Sub TraceLog(ByVal level As Integer, ByVal msg As String)
        If (GlobalErrorlevel >= level) Then
            Dim fileName As String = "ACAMSTransfer" + DateTime.Now.ToString("yyyy-MM-dd") + ".log"
            My.Computer.FileSystem.WriteAllText(logDir + fileName, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") & " L" & level & ": " & msg & vbCrLf, True)
        End If
    End Sub

    Function MakeIntTime(ByVal t As Object) As Object
        If DBNull.Value.Equals(t) Then Return DBNull.Value
        Dim dt As DateTime
        If Not DateTime.TryParse(t.ToString, dt) Then Return Nothing
        Return Integer.Parse(dt.ToString("HHmmss"))
    End Function

    Function MakeIntDate(ByVal t As Object) As Object
        If DBNull.Value.Equals(t) Then Return DBNull.Value
        Dim dt As DateTime
        If Not DateTime.TryParse(t.ToString, dt) Then Return Nothing
        Return Integer.Parse(dt.ToString("yyyyMMdd"))
    End Function


    '20110628 - Added to be used to prevent overloading ACAMS when doing BULK TRANSFERS
    Function countPending(ByVal tID As Integer) As Integer
        Dim numPending As Integer = 99999

        'This function counts the total number of transfers pending for a transferID
        Dim qry As String

        qry = "SELECT SUM(cnt) as totRecords from (" & _
              " SELECT COUNT(*) as cnt from [Data].[AccessControl.TransferPersonDivisions] " & _
              " WHERE [WhenTransmitted] Is null And TransferId = " & tID & _
              " UNION " & _
              " SELECT COUNT(*) as cnt from [Data].[AccessControl.TransferPersons] " & _
              " WHERE [WhenTransmitted] Is null And TransferId = " & tID & _
              " UNION " & _
              " SELECT COUNT(*) as cnt from [Data].[AccessControl.TransferBadges] " & _
              " WHERE [WhenTransmitted] Is null And TransferId = " & tID & _
              " UNION " & _
              " SELECT count(*) as cnt from [Data].[AccessControl.TransferDivisions] " & _
              " WHERE [WhenTransmitted] Is null And TransferId = " & tID & _
              ") a"

        Dim myCmd As SqlCommand
        myCmd = New SqlCommand(qry, CS_Connection)
        Dim CS_ControlTableReader = myCmd.ExecuteReader()

        Try
            CS_ControlTableReader.Read()
            numPending = CS_ControlTableReader("totRecords")
            TraceLog(1, "number of records pending: " & numPending)
        Catch ex As Exception
            TraceLog(0, "Unable to CS_ControlTableReader.Read()" & ex.ToString)
        Finally
            CS_ControlTableReader.Close()
        End Try
        Return numPending
    End Function

    Function ckACAMSqueue() As Integer
        Dim queue As Integer = 0

        ' specify program to use
        Dim prog As String = "C:\plink\plink.exe" 'Dts.Variables("Telnet_Client_Path").Value 'eg "C:\plink\plink.exe"

        ' add arguments to program
        'Dim args As String = "-ssh ppadmin@10.64.194.10 -pw LAXPP45PPADMIN01 ""ipcs -q | awk '{ SUM += $6} END {print SUM}'"" "
        Dim conn As String = "ppadmin@10.64.194.10 -pw LAXPP45PPADMIN01" 'Dts.Variables("Telnet_Connection").Value 'eg "ppadmin@10.64.194.10 -pw LAXPP45PPADMIN01"
        'Dim args As String = "-ssh " & conn & " ""ipcs -q | awk '{ SUM += $6} END {print SUM}'"" "
        'for testing purposes, modifying code above to code below
        Dim args As String = "-ssh ppadmin@192.9.200.6 -pw ppadmin ""cat /cas/ipcs.txt | awk '{ SUM += $6} END {print SUM}'"" "

        ' set program & arguments
        Dim psi As ProcessStartInfo = New ProcessStartInfo(prog, args)

        ' states that system shell will not be used to control the process instead program will handle the process
        psi.UseShellExecute = False
        psi.ErrorDialog = False

        ' Do not show command prompt window separately
        psi.CreateNoWindow = True
        psi.WindowStyle = ProcessWindowStyle.Hidden
        'redirect all standard inout to program
        psi.RedirectStandardError = True
        psi.RedirectStandardInput = True
        psi.RedirectStandardOutput = True
        'create the process with above infor and start it
        Dim plinkProcess As Process = New Process()
        plinkProcess.StartInfo = psi
        plinkProcess.Start()
        'link the streams to standard inout of process
        Dim inputWriter As IO.StreamWriter = plinkProcess.StandardInput
        Dim outputReader As IO.StreamReader = plinkProcess.StandardOutput
        Dim errorReader As IO.StreamReader = plinkProcess.StandardError

        'send command to cmd prompt and wait for command to execute with thread sleep
        inputWriter.WriteLine()
        Thread.Sleep(1000)

        ' flush the input stream before sending exit command to end process for any unwanted characters
        inputWriter.Flush()

        ' read till end the stream into string
        queue = outputReader.ReadToEnd()

        Return queue

    End Function

    Function SendMail(ByVal inSubject As String, ByVal inBody As String) As String

        'set the variables
        Dim fromAddress As String = Dts.Variables("User::EmailFromAddress").Value
        Dim toAddress As String = Dts.Variables("User::EmailToAddress").Value
        Dim smptClient As String = Dts.Variables("User::SmtpClient").Value

        'create the mail message
        Dim mail As New MailMessage()

        'set the addresses
        mail.From = New MailAddress(fromAddress)
        mail.[To].Add(toAddress)

        'set the content
        mail.Subject = inSubject
        mail.Body = inBody

        'set the server
        Dim smtp As New SmtpClient(smptClient)

        'send the message
        Try
            smtp.Send(mail)
            SendMail = "Email sent to " & toAddress
        Catch exc As Exception
            SendMail = "Email failed!, " & toAddress & ": " & exc.ToString()
        End Try
    End Function

End Class]]></ProjectItem><ProjectItem Name="\my project\resources.designer.vb">
<![CDATA['------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace My.Resources
    
    '''<summary>
    '''   A strongly-typed resource class, for looking up localized strings, etc.
    '''</summary>
    'This class was auto-generated by the Strongly Typed Resource Builder
    'class via a tool like ResGen or Visual Studio.NET.
    'To add or remove a member, edit your .ResX file then rerun ResGen
    'with the /str option, or rebuild your VS project.
    Class MyResources
        
        Private Shared _resMgr As System.Resources.ResourceManager
        
        Private Shared _resCulture As System.Globalization.CultureInfo
        
        Friend Sub New()
            MyBase.New
        End Sub
        
        '''<summary>
        '''   Returns the cached ResourceManager instance used by this class.
        '''</summary>
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Shared ReadOnly Property ResourceManager() As System.Resources.ResourceManager
            Get
                If (_resMgr Is Nothing) Then
                    Dim temp As System.Resources.ResourceManager = New System.Resources.ResourceManager("My.Resources.MyResources", GetType(MyResources).Assembly)
                    _resMgr = temp
                End If
                Return _resMgr
            End Get
        End Property
        
        '''<summary>
        '''   Overrides the current thread's CurrentUICulture property for all
        '''   resource lookups using this strongly typed resource class.
        '''</summary>
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Shared Property Culture() As System.Globalization.CultureInfo
            Get
                Return _resCulture
            End Get
            Set
                _resCulture = value
            End Set
        End Property
    End Class
End Namespace]]></ProjectItem><ProjectItem Name="\my project\resources.resx">
<![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem><ProjectItem Name="\division.vb">
<![CDATA[
Public Class Division

    'Properties
    Private mDivisionID As String
    Private mPPDivision As String
    Private mDivisionCode As String
    Private mDivisionName As String
    Private mCompanyID As String
    Private mCompanyCode As String
    Private mCorporationName As String

    Public Property DivisionID() As String
        Get
            Return mDivisionID
        End Get
        Set(ByVal Value As String)
            mDivisionID = Value
        End Set
    End Property

    Public Property PPDivision() As String
        Get
            Return mPPDivision
        End Get
        Set(ByVal value As String)
            mPPDivision = value
        End Set
    End Property

    Public Property DivisionCode() As String
        Get
            Return mDivisionCode
        End Get
        Set(ByVal Value As String)
            mDivisionCode = Value
        End Set
    End Property

    Public Property DivisionName() As String
        Get
            Return mDivisionName
        End Get
        Set(ByVal Value As String)
            mDivisionName = Value
        End Set
    End Property

    Public Property CompanyID() As String
        Get
            Return mCompanyID
        End Get
        Set(ByVal Value As String)
            mCompanyID = Value
        End Set
    End Property

    Public Property CompanyCode() As String
        Get
            Return mCompanyCode
        End Get
        Set(ByVal Value As String)
            mCompanyCode = Value
        End Set
    End Property

    Public Property CorporationName() As String
        Get
            Return mCorporationName
        End Get
        Set(ByVal Value As String)
            mCorporationName = Value
        End Set
    End Property

    'Methods
    Public Sub New()

    End Sub

    '  Public Sub New(
    '      ByVal DivisionID As String,
    '      ByVal PPDivision as String,
    '      ByVal DivisionName As String,
    '      ByVal CompanyID As String,
    '      ByVal CorporationName As String
    '      )
    '
    '        MyClass.DivisionID = DivisionID
    '        MyClass.PPDivision = PPDivision
    '        MyClass.DivisionName = DivisionName
    '        MyClass.CompanyID = CompanyID
    '        MyClass.CorporationName = CorporationName
    '    End Sub
End Class]]></ProjectItem><ProjectItem Name="\person.vb">
<![CDATA[Public Class Person

    'Properties
    Private mPersonID As String
    Private mPin As String
    Private mFirstName As String
    Private mMiddleName As String
    Private mLastName As String
    Private mAddress As String
    Private mApartmentNumber As String
    Private mCity As String
    Private mCountrySubdivisionCode As String
    Private mCountryCode As String
    Private mPostalCode As String
    Private mWorkPhoneNumber As String
    Private mEmployeeID As String
    Private mDateOfBirth As String
    Private mSocialSecurityNumber As String
    Private mHeightInInches As String
    Private mWeightInPounds As String
    Private mSexCode As String
    Private mEyeColorCode As String
    Private mHairColorCode As String
    Private mRaceCode As String
    Private mCalculatedHeightInInches As Integer
    Private mCalculatedHeightInFeet As Integer
    Private mCompanyName As String
    Private mDivisionName As String
    Private mDLNumber As String
    Private mDLSig As String
    Private mDLExpireDate As String
    Private mRaceDesc As String
    Private mHairDesc As String
    Private mEyeDesc As String
    Private mJobRole As String



    Public Property PersonID() As String
        Get
            Return mPersonID
        End Get
        Set(ByVal Value As String)
            mPersonID = Value
        End Set
    End Property

    Public Property Pin() As String
        Get
            Return mPin
        End Get
        Set(ByVal Value As String)
            mPin = Value
        End Set
    End Property

    Public Property FirstName() As String
        Get
            Return mFirstName
        End Get
        Set(ByVal Value As String)
            mFirstName = Value
        End Set
    End Property

    Public Property MiddleName() As String
        Get
            Return mMiddleName
        End Get
        Set(ByVal Value As String)
            mMiddleName = Value
        End Set
    End Property

    Public Property LastName() As String
        Get
            Return mLastName
        End Get
        Set(ByVal Value As String)
            mLastName = Value
        End Set
    End Property

    Public Property Address() As String
        Get
            Return mAddress
        End Get
        Set(ByVal Value As String)
            mAddress = Value
        End Set
    End Property

    Public Property ApartmentNumber() As String
        Get
            Return mApartmentNumber
        End Get
        Set(ByVal Value As String)
            mApartmentNumber = Value
        End Set
    End Property

    Public Property City() As String
        Get
            Return mCity
        End Get
        Set(ByVal Value As String)
            mCity = Value
        End Set
    End Property

    Public Property CountrySubdivisionCode() As String
        Get
            Return mCountrySubdivisionCode
        End Get
        Set(ByVal Value As String)
            mCountrySubdivisionCode = Value
        End Set
    End Property

    Public Property CountryCode() As String
        Get
            Return mCountryCode
        End Get
        Set(ByVal Value As String)
            mCountryCode = Value
        End Set
    End Property

    Public Property PostalCode() As String
        Get
            Return mPostalCode
        End Get
        Set(ByVal Value As String)
            mPostalCode = Value
        End Set
    End Property

    Public Property WorkPhoneNumber() As String
        Get
            Return mWorkPhoneNumber
        End Get
        Set(ByVal Value As String)
            mWorkPhoneNumber = Value
        End Set
    End Property

    Public Property EmployeeID() As String
        Get
            Return mEmployeeID
        End Get
        Set(ByVal Value As String)
            mEmployeeID = Value
        End Set
    End Property

    Public Property DateOfBirth() As String
        Get
            Return mDateOfBirth
        End Get
        Set(ByVal Value As String)
            mDateOfBirth = Value
        End Set
    End Property

    Public Property SocialSecurityNumber() As String
        Get
            Return mSocialSecurityNumber
        End Get
        Set(ByVal Value As String)
            mSocialSecurityNumber = Value
        End Set
    End Property

    Public Property HeightInInches() As String
        Get
            Return mHeightInInches
        End Get
        Set(ByVal Value As String)
            mHeightInInches = Value
        End Set
    End Property

    Public Property WeightInPounds() As String
        Get
            Return mWeightInPounds
        End Get
        Set(ByVal Value As String)
            mWeightInPounds = Value
        End Set
    End Property

    Public Property SexCode() As String
        Get
            Return mSexCode
        End Get
        Set(ByVal Value As String)
            mSexCode = Value
        End Set
    End Property

    Public Property EyeColorCode() As String
        Get
            Return mEyeColorCode
        End Get
        Set(ByVal Value As String)
            mEyeColorCode = Value
        End Set
    End Property

    Public Property HairColorCode() As String
        Get
            Return mHairColorCode
        End Get
        Set(ByVal Value As String)
            mHairColorCode = Value
        End Set
    End Property

    Public Property RaceCode() As String
        Get
            Return mRaceCode
        End Get
        Set(ByVal Value As String)
            mRaceCode = Value
        End Set
    End Property

    Public Property CalculatedHeightInInches() As Integer
        Get
            Return mCalculatedHeightInInches
        End Get
        Set(ByVal Value As Integer)
            mCalculatedHeightInInches = Value
        End Set
    End Property


    Public Property CalculatedHeightInFeet() As Integer
        Get
            Return mCalculatedHeightInFeet
        End Get
        Set(ByVal Value As Integer)
            mCalculatedHeightInFeet = Value
        End Set
    End Property

    Public Property CompanyName() As String
        Get
            Return mCompanyName
        End Get
        Set(ByVal Value As String)
            mCompanyName = Value
        End Set
    End Property

    Public Property DivisionName() As String
        Get
            Return mDivisionName
        End Get
        Set(ByVal Value As String)
            mDivisionName = Value
        End Set
    End Property

    Public Property DriverLicenseExpire() As String
        Get
            Return mDLExpireDate
        End Get
        Set(ByVal Value As String)
            mDLExpireDate = Value
        End Set
    End Property

    Public Property DriverLicenseState() As String
        Get
            Return mDLSig
        End Get
        Set(ByVal Value As String)
            mDLSig = Value
        End Set
    End Property

    Public Property DriverLicenseNumber() As String
        Get
            Return mDLNumber
        End Get
        Set(ByVal Value As String)
            mDLNumber = Value
        End Set
    End Property

    Public Property HairDesc() As String
        Get
            Return mHairDesc
        End Get
        Set(ByVal Value As String)
            mHairDesc = Value
        End Set
    End Property

    Public Property EyeDesc() As String
        Get
            Return mEyeDesc
        End Get
        Set(ByVal Value As String)
            mEyeDesc = Value
        End Set
    End Property

    Public Property RaceDesc() As String
        Get
            Return mRaceDesc
        End Get
        Set(ByVal Value As String)
            mRaceDesc = Value
        End Set
    End Property


    Public Property JobRole() As String
        Get
            Return mJobRole
        End Get
        Set(ByVal Value As String)
            mJobRole = Value
        End Set
    End Property


    'Methods
    Public Sub New()

    End Sub

    ' Public Sub New(
    '     ByVal PersonID As String,
    '     ByVal Pin As String,
    '     ByVal FirstName As String,
    '     ByVal MiddleName As String,
    '     ByVal LastName As String,
    '     ByVal Address As String,
    '     ByVal ApartmentNumber As String,
    '     ByVal City As String,
    '     ByVal CountrySubdivisionCode As String,
    '     ByVal CountryCode As String,
    '     ByVal PostalCode As String,
    '     ByVal WorkPhoneNumber As String,
    '     ByVal EmployeeID As String,
    '     ByVal DateOfBirth As String,
    '     ByVal SocialSecurityNumber As String,
    '     ByVal HeightInInches As String,
    '     ByVal WeightInPounds As String,
    '     ByVal SexCode As String,
    '     ByVal EyeColorCode As String,
    '     ByVal HairColorCode As String,
    '     ByVal RaceCode As String)
    '
    '        MyClass.mPersonID = PersonID
    '        MyClass.mPin = Pin
    '        MyClass.FirstName = FirstName
    '        MyClass.MiddleName = MiddleName
    '        MyClass.LastName = LastName
    '        MyClass.Address = Address
    '        MyClass.ApartmentNumber = ApartmentNumber
    '        MyClass.City = City
    '        MyClass.CountrySubdivisionCode = CountrySubdivisionCode
    '        MyClass.CountryCode = CountryCode
    '        MyClass.PostalCode = PostalCode
    '        MyClass.WorkPhoneNumber = WorkPhoneNumber
    '        MyClass.EmployeeID = EmployeeID
    '        MyClass.DateOfBirth = DateOfBirth
    '        MyClass.SocialSecurityNumber = SocialSecurityNumber
    '        MyClass.HeightInInches = HeightInInches
    '        MyClass.WeightInPounds = WeightInPounds
    '        MyClass.SexCode = SexCode
    '        MyClass.EyeColorCode = EyeColorCode
    '        MyClass.HairColorCode = HairColorCode
    '        MyClass.RaceCode = RaceCode
    '    End Sub
End Class]]></ProjectItem><ProjectItem Name="\persondivision.vb">
<![CDATA[Public Class personDivision

    'Properties
    Private mPersonID As String
    Private mDivisionID As String


    Public Property PersonID() As String
        Get
            Return mPersonID
        End Get
        Set(ByVal Value As String)
            mPersonID = Value
        End Set
    End Property

    Public Property DivisionID() As String
        Get
            Return mDivisionID
        End Get
        Set(ByVal Value As String)
            mDivisionID = Value
        End Set
    End Property

    'Methods
    Public Sub New()

    End Sub

    ' Public Sub New(
    '     ByVal PersonID As String,
    '     ByVal DivisionID as String)
    '
    '        MyClass.mPersonID = PersonID
    '        MyClass.mDivisionID = DivisionID
    '    End Sub
End Class]]></ProjectItem><BinaryItem Name="\bin\st_28621249e4bc462887f30e8b24c811e2.vbproj.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAHhROlUAAAAAAAAAAOAAAiELAQgAADwBAAAMAAAAAAAATlsB
AAAgAAAAYAEAAABAAAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACgAQAAAgAAAAAAAAIAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAABbAQBLAAAAAGABAFgJAAAAAAAAAAAAAAAAAAAA
AAAAAIABAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAVDsBAAAgAAAAPAEAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAFgJAAAAYAEAAAoAAAA+AQAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIABAAACAAAASAEAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAw
WwEAAAAAAEgAAAACAAUAtIEAAEzZAAABAAAAAAAAAFAgAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5S
ZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249Mi4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFs
LCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGlt
ZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAAAeAigBAAAKKh4CKAQAAAoqpnMGAAAK
gAEAAARzBwAACoACAAAEcwgAAAqAAwAABHMJAAAKgAQAAAQqAAATMAEACwAAAAEAABF+AQAABG8K
AAAKKgATMAEACwAAAAIAABF+AgAABG8LAAAKKgATMAEACwAAAAMAABF+AwAABG8MAAAKKgATMAEA
CwAAAAQAABF+BAAABG8NAAAKKgATMAIADQAAAAUAABECAygRAAAKKBIAAAoqAAAAEzABAAcAAAAG
AAARAigTAAAKKgATMAEACwAAAAcAABHQBQAAAigUAAAKKgATMAEABwAAAAgAABECKBUAAAoqABMw
AQAQAAAACQAAEQKMAQAAGy0GKAEAACsqAioTMAIAEAAAAAoAABEDEgD+FQIAABsGgQIAABsqHgIo
FwAACioTMAIAKAAAAAsAABECexkAAApvGgAACgsHjAMAABstEigCAAArCwJ7GQAACgdvGwAACgcq
SgIoFwAACgJzHAAACn0ZAAAKKgATMAEABwAAAAwAABECewYAAAQqACICA30GAAAEKgAAABMwAQAH
AAAADQAAEQJ7BwAABCoAIgIDfQcAAAQqAAAAEzABAAcAAAAOAAARAnsIAAAEKgAiAgN9CAAABCoA
AAATMAEABwAAAA8AABECewkAAAQqACICA30JAAAEKgAAABMwAQAHAAAAEAAAEQJ7CgAABCoAIgID
fQoAAAQqAAAAEzABAAcAAAARAAARAnsLAAAEKgAiAgN9CwAABCoAAAATMAEABwAAABIAABECewwA
AAQqACICA30MAAAEKgAAABMwAQAHAAAAEwAAEQJ7DQAABCoAIgIDfQ0AAAQqAAAAEzABAAcAAAAU
AAARAnsOAAAEKgAiAgN9DgAABCoAAAATMAEABwAAABUAABECew8AAAQqACICA30PAAAEKgAAABMw
AQAHAAAAFgAAEQJ7EAAABCoAIgIDfRAAAAQqAAAAEzABAAcAAAAXAAARAnsRAAAEKgAiAgN9EQAA
BCoAAAATMAEABwAAABgAABECexIAAAQqACICA30SAAAEKgAAABMwAQAHAAAAGQAAEQJ7EwAABCoA
IgIDfRMAAAQqAAAAEzABAAcAAAAaAAARAnsUAAAEKgAiAgN9FAAABCoAAAATMAEABwAAABsAABEC
exUAAAQqACYCexUAAAQQASoAABMwAQAHAAAAHAAAEQJ7FgAABCoAIgIDfRYAAAQqAAAAEzABAAcA
AAAdAAARAnsXAAAEKgAiAgN9FwAABCoAAAATMAEABwAAAB4AABECexgAAAQqACICA30YAAAEKgAA
ABMwAQAHAAAAHwAAEQJ7GQAABCoAIgIDfRkAAAQqAAAAEzABAAcAAAAgAAARAnsaAAAEKgAiAgN9
GgAABCoAAAAeAigXAAAKKhMwAQAHAAAAIQAAEQJ7GwAABCoAIgIDfRsAAAQqAAAAEzABAAcAAAAi
AAARAnscAAAEKgAiAgN9HAAABCoAAAATMAEABwAAACMAABECex0AAAQqACICA30dAAAEKgAAABMw
AQAHAAAAJAAAEQJ7HgAABCoAIgIDfR4AAAQqAAAAEzABAAcAAAAlAAARAnsfAAAEKgAiAgN9HwAA
BCoAAAATMAEABwAAACYAABECeyAAAAQqACICA30gAAAEKgAAABMwAQAHAAAAJwAAEQJ7IQAABCoA
IgIDfSEAAAQqAAAAHgIoFwAACioeAigXAAAKKhMwAgAtAAAAKAAAEX4iAAAELSByAQAAcNAJAAAC
KBQAAApvHgAACnMfAAAKCweAIgAABH4iAAAEKgAAABMwAQAGAAAAKQAAEX4jAAAEKgAAHgKAIwAA
BCpCcxcAAAooEQAACoAlAAAEKgAAAB4CKCAAAAoqGzABAD8AAAAqAAARfiQAAAQtMn4lAAAEKBEA
AAooIQAACn4kAAAELRxzUAAABoAkAAAE3hB+JQAABCgRAAAKKCIAAArcfiQAAAQqAAEMAAACAB0A
DCkAEAAAAAETMAEABwAAACsAABECeyYAAAQqACICA30mAAAEKgAAABMwAQAHAAAALAAAEQJ7JwAA
BCoAIgIDfScAAAQqAAAAEzABAAcAAAAtAAARAnsoAAAEKgAiAgN9KAAABCoAAAATMAEABwAAAC4A
ABECeykAAAQqACICA30pAAAEKgAAABMwAQAHAAAALwAAEQJ7KgAABCoAIgIDfSoAAAQqAAAAEzAB
AAcAAAAwAAARAnsrAAAEKgAiAgN9KwAABCoAAAATMAEABwAAADEAABECeywAAAQqACICA30sAAAE
KgAAABMwAQAHAAAAMgAAEQJ7LQAABCoAIgIDfS0AAAQqAAAAEzABAAcAAAAzAAARAnsuAAAEKgAi
AgN9LgAABCoAAAATMAEABwAAADQAABECey8AAAQqACICA30vAAAEKgAAABMwAQAHAAAANQAAEQJ7
MAAABCoAIgIDfTAAAAQqAAAAEzABAAcAAAA2AAARAnsxAAAEKgAiAgN9MQAABCoAAAATMAEABwAA
ADcAABECezIAAAQqACICA30yAAAEKgAAABMwAQAHAAAAOAAAEQJ7MwAABCoAIgIDfTMAAAQqAAAA
EzABAAcAAAA5AAARAns0AAAEKgAiAgN9NAAABCoAAAATMAEABwAAADoAABECezUAAAQqACICA301
AAAEKgAAABMwAQAHAAAAOwAAEQJ7NgAABCoAIgIDfTYAAAQqAAAAEzABAAcAAAA8AAARAns3AAAE
KgAiAgN9NwAABCoAAAATMAEABwAAAD0AABECezgAAAQqACICA304AAAEKgAAABMwAQAHAAAAPgAA
EQJ7OQAABCoAIgIDfTkAAAQqAAAAEzABAAcAAAA/AAARAns6AAAEKgAiAgN9OgAABCoAAAATMAEA
BwAAAEAAABECezsAAAQqACICA307AAAEKgAAABMwAQAHAAAAQQAAEQJ7PAAABCoAIgIDfTwAAAQq
AAAAEzABAAcAAABCAAARAns9AAAEKgAiAgN9PQAABCoAAAATMAEABwAAAEMAABECez4AAAQqACIC
A30+AAAEKgAAABMwAQAHAAAARAAAEQJ7QQAABCoAIgIDfUEAAAQqAAAAEzABAAcAAABFAAARAntA
AAAEKgAiAgN9QAAABCoAAAATMAEABwAAAEYAABECez8AAAQqACICA30/AAAEKgAAABMwAQAHAAAA
RwAAEQJ7QwAABCoAIgIDfUMAAAQqAAAAEzABAAcAAABIAAARAntEAAAEKgAiAgN9RAAABCoAAAAT
MAEABwAAAEkAABECe0IAAAQqACICA31CAAAEKgAAABMwAQAHAAAASgAAEQJ7RQAABCoAIgIDfUUA
AAQqAAAAHgIoFwAACioTMAEABwAAAEsAABECe0YAAAQqACICA31GAAAEKgAAABMwAQAHAAAATAAA
EQJ7RwAABCoAIgIDfUcAAAQqAAAAHgIoFwAACioTMAIAmwAAAAAAAAACKCQAAAoCIPQBAAB9SAAA
BAJyMwAAcH1JAAAEAiAPJwAAfUoAAAQCcyUAAAp9TAAABAJzJQAACn1NAAAEAhl9TgAABAJyJgEA
cH1PAAAEAnImAQBwfVIAAAQCFn1XAAAEAhZ9WAAABAIWfVkAAAQCFn1aAAAEAhZ9WwAABAIWfVwA
AAQCciYBAHB9XQAABAJyJgEAcH1eAAAEKgAbMAYALAcAAE0AABECAm8mAAAKbycAAApyKAEAcG8o
AAAKbykAAAooKgAACn1dAAAEAntdAAAEciYBAHAWKCsAAAoW/gECe10AAARyQgEAcBYoKwAAChb+
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
ACoAAEEYAAAAAAAAAAAAAJ0CAACdAgAANAAAACEAAAEbMAQAKgQAAFAAABFy6Q4AcAMoQgAACnJA
EQBwKEwAAAoTDBEMAntRAAAEczkAAAoTCgIXEQxvsgAABhEKbzwAAAoTBBYoQgAAChMFczsAAAYT
CCtmEQRykBEAcG8+AAAKbxUAAApvTQAACgoRBHJhBABwbz4AAApvFQAACm9NAAAKCxEEcqARAHBv
PgAACm8VAAAKb00AAAoMcsARAHARBHLMEQBwbz4AAApvFQAACm9NAAAKKEMAAAoNEQRvPQAACi2R
EQRvQQAAChQTBBEKb0AAAAoCF3KYFQBwCChDAAAKb7IAAAYHFhdvTgAACihPAAAKLRAHFwdvUAAA
Chfab04AAAoLctwVAHATCQgTERERcuAVAHAWKCsAAAoWMwxy6hUAcBMJOOgAAAAREXLuFQBwFigr
AAAKFjMMcuoVAHATCTjMAAAAERFy+hUAcBYoKwAAChYzDHIEFgBwEwk4sAAAABERcggWAHAWKCsA
AAoWMwxyBBYAcBMJOJQAAAAREXISFgBwFigrAAAKFjMJcgQWAHATCSt7ERFyHhYAcBYoKwAAChYz
CXIEFgBwEwkrYhERcioWAHAWKCsAAAoWMwlyBBYAcBMJK0kREXI2FgBwFigrAAAKFjMJctwVAHAT
CSswERFyQBYAcBYoKwAAChYzCXLcFQBwEwkrFxERckoWAHAWKCsAAAoWMwdyVBYAcBMJCHJKFgBw
FigrAAAKFjvQAAAAHw2NKQAAARMSERIWcgYSAHCiERIXAnteAAAEohESGHJYFgBwohESGREJohES
GnKCFgBwohESGyhRAAAKjDQAAAFykhIAcChSAAAKohESHHKkEgBwohESHShRAAAKjDQAAAFyyBIA
cChSAAAKohESHnKgFgBwohESHwkRBaIREh8KcsQWAHCiERIfCweiERIfDHIcEwBwohESKFMAAAoT
DhEOAntUAAAEc1QAAAoTBgIXciATAHARDihDAAAKb7IAAAYRBm9VAAAKEwc4ugAAAB8LjSkAAAET
EhESFnIGEgBwohESFwJ7XgAABKIREhhyWBYAcKIREhkRCaIREhpyghYAcKIREhsoUQAACow0AAAB
cpISAHAoUgAACqIREhxypBIAcKIREh0oUQAACow0AAABcsgSAHAoUgAACqIREh5yjhMAcKIREh8J
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
DAAAAHYyLjAuNTA3MjcAAAAABQBsAAAADB8AACN+AAB4HwAASCEAACNTdHJpbmdzAAAAAMBAAADo
jwAAI1VTAKjQAAAQAAAAI0dVSUQAAAC40AAAlAgAACNCbG9iAAAAAAAAAAIAAAFXHaIJCQ8AAAD6
ATMAFgAAAQAAAGMAAAAOAAAAYgAAALcAAAB0AAAAwgAAAAIAAAA1AAAAawAAAAgAAABGAAAAhQAA
AAkAAAABAAAABwAAAAEAAAADAAAAAwAAAAIAAAAAABchAQAAAAAACgCFAVsBCgC5AZsBBgDJAcIB
CgAhAlsBBgCfAsIBCgAhA/cCBgA5CCgIBgBmCFEIDgDHCLIIEgAwEAcQBgCcEIkQFgA8ERwRGgB7
EWURGgC8EasRBgBoE4kQBgDiFcIBDgAVFv8VDgAuFv8VDgBbFkMWBgCFFnIWCgDEFp0WCgDcFhMA
DgARF/QWBgBGFyYXBgBkF8IBBgCIF8IBCgChFxMABgDlF8YXBgALGPkXBgAyGCEYBgBFGHIWGgBi
GGURBgBtGMIBGgB3GGUREgCFGAcQFgCfGBwRFgC3GBwRCgDJGJ0WCgDVGJ0WBgDtGMIBBgDyGMIB
BgADGcIBFgAJGRwRCgBMGZ0WBgCGGSEYGgCTGWURGgC5GWURDgDwGf8VCgBCGhMAGgBnGqsRCgCC
Gp0WBgChGsIBCgCyGhMABgDHGsIBGgDjGqsRGgD7GqsRGgAmG6sRBgA1G4kQBgDXG8IBBgDpG8IB
CgDwGxMABgAeHIkQBgAuHPkXBgA7HIkQBgBfHPkXGgCiHGURGgCxHFkRGgC5HFkRGgDBHFkRGgDw
HN0cGgADHVkRGgAiHVkRGgBHHVkRGgBRHVkRBgBsHcIBCgB8HZsBCgCsHYsdBgDiHdgdBgDvHdgd
DgD8HXIWDgAEHnIWDgBMHnIWBgAJH9gdDgA+Hy4fDgBKHy4fDgBVHy4fDgBqHy4fBgChH8IBHgDE
H7cfBgASICYXBgAyICYXBgBQIPkXBgBtIMYXBgB7IPkXBgCWIPkXBgCxIPkXBgDKIPkXBgDjIPkX
BgAAIfkXAAAAAAEAAAAAAAEAAQAAAAAAKQA3AAUAAQABAAAAAABlADcACQABAAIAAAEQAHAANwAN
AAEAAwAFAQAAegAAAA0ABQAIAAUBAACIAAAADQAFAA8AAQAAAKMAqQANAAYAEQABAAAA1ACpAA0A
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
AQD1EgAAAQD1EgAAAgD5BgAAAwAEBwAABAAhBwAAAQD1EgAAAgAhBwAAAQD1EgAAAQD1EgAAAQCJ
EwAAAgCREwAAAwCYEwAABAD1EgAAAQD1EgAAAQDJEwAAAQDgEwAAAQAEBwAAAgAhBwAAAwASFAAA
AQA1FAAAAQBXFAAAAgDJEwAAAQD1EgAAAQD1EgAAAQCmFAAAAgDJEwAAAwCyFAAAAQCmFAAAAgCy
FAAAAwDVFAAAAQDxFAAAAgCyFAAAAQDxFAAAAgCyFAAAAQAlFQAAAQD1EgAAAQBPFQAAAgBYFQAA
AQBPFQAAAgCYEwAAAwByFQAAAQCGFQAAAgCMFQAAAQCcFQAAAQCcFQAAAQC3FQAAAQDRFQAAAgDb
FQkAlQETAIkAlQGLAZkAlQGaAREAlQETAKEAlQETACQAlQETACwAlQETADQAlQETADwAlQETACQA
5wKLACwA5wKLADQA5wKLADwA5wKLAKkAlQETALEAlQETALkAlQGgAMEAVRcuAhkAigJjABkAkwJo
ACkAdhc7AhkArAJxANEAkhdLAhkAlQETANkAlQFbAkQAMAOQAEwA9AiLAEwAvBfYAkwAlQETAOEA
lQHlAikAFBjwAjkAlQH1AkkAlQETAPEAOhgRA/EAQBgRA/kAlQETAFEAlQETAFkAlQETAFEAlxgb
AxkBqRghAyEBwBgnAykB9AguAzEBrAIyAzkB3xg3A0kB+Rg+A1kA/xhFAxkBFRlLA1kB/xhRA2EA
JRmgAGEAOhlyAWEBWBlXAwkBrAJxAEkBaBleA2EBbxkXAHEAlQGgAHEAgRkTAGkBjRlmAwEBlQFr
AwEBqhlyA3EBxhl4AwEB0xmAAxEB4RmGAxEBwBiKAzEB5hmPA4EB+hkTABEBAhoTADEBrAKUA0kB
aBmZAwEBCBpoAEkBGBqfAwkBIxpxAAkBLxqkA4kBThqqA2kAAhoTAHEAAhoTABkBWBrfAEkBaBnl
A0kBcxpxAEkBeBrsA5kBjBqqA0kBlhpoAKEBqhryA6kBuhr4A0kBaBn+A5EBlQEEBJEBCBpoAFEB
wRpNBLEBzBpSBDEB0hpXBEkB2xpuBJEBqhmMBLkBxhmSBKEBCRvyA6EBrAIzATkBFBuaBJEB0xmy
BMkBwBiKA8kBQRu4BMkBTBu9BDkBVRvCBHkAchtjAEkBuhrJBFkAextjAMkB4RmGA8kBAhoTAHkA
hxvQBNEBlRsuA1EBrAJxAFkAoRtjAJEBrxsuA1EBvRvWBEkBuhrdBHkAxhvkBEkBuhrpBNEBzhuG
A9kB+hkTAHkAlQETAHkA4xsTAEkBigKfA3kA/xjkBOEBbwQjBZEBlQETAAEBlQETAEkBuhptBTEB
5hlNBOkB/BuXBbkBhxvQBMEBABxxAMEB9AguA0kBrAJxAMkBEhyGA8kBwBjEBVkAhxv/BfEB9Agu
AxkApAJsACkAURwFBgkCahxxAPEBcxwuAzkBexzCBPkBmRwMBlkAwBhyAQEBzRyTBhkClQETABEC
lQGaBjEC/hyhBhkCFx2oBkECPR1oADkCwBiuBkkCYx21BlECPR1oAAkBlQGgAFECwBi7BiECwBiK
A1kCdB2PA2ECvB0HB2kCyx0NB6EBvRsdB4kClQGaAYkCFR7lAokCKR7lAokCOR7lAokCXx4+B4kC
bx7lAokCiR7lAokCox7lAoEClQETAIECvh5FB4ECzB6GA4EC0h5MB4EC5B5SB4EC9x5SB5kCFB8T
AHkCHh8TAHECJB9xAKEClQETALEClQGgAKECYR9vB6ECgB92B7kC/xigAKEChx+gAKECkx+gAKkC
lQGgAKkCnB98B8EClQHlAskClQGgANEClQHfANkClQETAOEClQGgAOkClQGgAPEClQGgAPkClQGg
AAEDlQGgAAkDlQGgABEDlQGgABkDlQGgAAgAhAGBAQgAiAGGASkAgwDoAS4A+wVSCC4A8wUyCC4A
CwbqAi4AEwZSCC4A6wXqAi4AAwaCCC4AywXNBy4A0wXWBy4A2wX1By4A4wUCCC4A6wDqAi4AuwUs
CEAAKwCGAUAAEwCRAUMAEwCRAUMAGwCgAUkAgwAGAmMAEwCRAWMAGwCgAWkAgwD5AYAAKwCGAYMA
GwCgAYMAewCGAYMAcwCGAYkAgwAaAqAAKwCGAaMAEwCRAaMAwwBjAsAAKwCGAcMA6wDqAsMAEwCR
AeAAKwCGAQABEwCRAQABKwCGASABEwCRASABKwCGAUABKwCGAUABEwCRAWABEwCRAWABKwCGAYAB
KwCGAaABKwCGAaMBwwWTB6MBuwXqAsABKwCGAcABEwCRAeABKwCGAQACKwCGAQACEwCRAUkEEwAI
A2kEEwAIA4kEGwGGAdQB2QHeAeMBMwI3AkICRwJWAlYC3gJHAkcCRwJHAkcCRwJHAkcCRwJHAkcC
RwJHAkcCRwJHAkcCRwJHAkcCRwJHAkcCRwJHAkcCRwJHAvwCAwMWA0cCRwJHAkcCRwJHAkcCRwJH
AkcCRwJHAkcCRwJHAkcCRwJHAkcCRwJHAjcCNwJHAkcCRwJHAkcCRwJHAkcCRwJHAkcCrwPXAwsE
KwRcBHQEggSgBPEEFQUoBUEFcwWSBZ4FyQXoBRMGRQZqBn0GwgbVBvQG/QYUByYHJgctB1gHgwcE
AAEABgAFAAcABgAIABsACQAiAAoAJAALACUADABFAAAAuQFPAAAAcgJUAAAAIQJZAAAAfgJeAAAA
OgOYAAAA+QalAAAABAelAAAADQelAAAAIQelAAAALAelAAAAOQelAAAARgelAAAAUAelAAAAXAel
AAAAbAelAAAAdAelAAAAgAelAAAAjQelAAAAmAelAAAAqgelAAAAtgelAAAAvgelAAAAzQelAAAA
2AelAAAA4gelAAAA7gelAAAAIQelAAAAHQilAAAALAelAAAAOQelAAAARgelAAAAUAelAAAAXAel
AAAAOQjBAAAAqgjGAAAAbwTXAAAABAelAAAAZw6lAAAAaw6lAAAAdQ6lAAAAgA6lAAAAiQ6lAAAA
kQ6lAAAAoQ6lAAAApg6lAAAAvQ6lAAAAyQ6lAAAA1A6lAAAA+QalAAAA5A6lAAAA8A6lAAAABQ+l
AAAAFA+lAAAAIw+lAAAAKw+lAAAAOA+lAAAARg+lAAAATw/kAAAAaA/kAAAAfw+lAAAAOQelAAAA
iw+lAAAAnw+lAAAAsg+lAAAAxg+lAAAAzw+lAAAA1w+lAAAA4A+lAAAABAelAAAAIQelAAIABAAD
AAIABQAFAAIABgAHAAIABwAJAAIADwALAAIAEQANAAEAEgANAAIAEwAPAAEAFAAPAAIAFQARAAEA
FgARAAIAFwATAAEAGAATAAIAGQAVAAEAGgAVAAIAGwAXAAEAHAAXAAIAHQAZAAEAHgAZAAIAHwAb
AAEAIAAbAAIAIQAdAAEAIgAdAAIAIwAfAAEAJAAfAAIAJQAhAAEAJgAhAAIAJwAjAAEAKAAjAAIA
KQAlAAEAKgAlAAEALAAnAAIAKwAnAAIALQApAAEALgApAAIALwArAAEAMAArAAIAMQAtAAEAMgAt
AAIAMwAvAAEANAAvAAIANQAxAAEANgAxAAIANwAzAAEAOAAzAAIAOQA1AAEAOgA1AAEAPQA3AAIA
PAA3AAIAPgA5AAEAPwA5AAIAQAA7AAEAQQA7AAIAQgA9AAEAQwA9AAEARQA/AAIARAA/AAIARgBB
AAEARwBBAAEASQBDAAIASABDAAIATABFAAIATQBHAAEATgBHAAIAUQBJAAEAUwBLAAIAUgBLAAIA
VABNAAEAVQBNAAIAVgBPAAEAVwBPAAIAWABRAAEAWQBRAAIAWgBTAAEAWwBTAAIAXABVAAEAXQBV
AAIAXgBXAAEAXwBXAAIAYABZAAEAYQBZAAEAYwBbAAIAYgBbAAIAZABdAAEAZQBdAAIAZgBfAAEA
ZwBfAAIAaABhAAEAaQBhAAEAawBjAAIAagBjAAIAbABlAAEAbQBlAAEAbwBnAAIAbgBnAAEAcQBp
AAIAcABpAAIAcgBrAAEAcwBrAAIAdABtAAEAdQBtAAIAdgBvAAEAdwBvAAIAeABxAAEAeQBxAAIA
egBzAAEAewBzAAIAfAB1AAEAfQB1AAIAfgB3AAEAfwB3AAIAgAB5AAEAgQB5AAIAggB7AAEAgwB7
AAEAhQB9AAIAhAB9AAIAhgB/AAEAhwB/AAIAiACBAAEAiQCBAAIAigCDAAEAiwCDAAEAjQCFAAIA
jACFAAIAjgCHAAEAjwCHAAEAkQCJAAIAkACJAAEAlACLAAIAkwCLAAIAlQCNAAEAlgCNAHUAdQCI
ALgBvwHGAc0BxQLMAgSAAAABAAAAAAAAAAAAAAAAAKkAAAACAAAAAAAAAAAAAAABAAoAAAAAAAgA
AAAAAAAAAAAAAAoAEwAAAAAAAgAAAAAAAAAAAAAAAQDCAQAAAAAKAAAAAAAAAAAAAADoAOgPAAAA
AAoAAAAAAAAAAAAAAOgA/RAAAAAAAgAAAAAAAAAAAAAAAQBZEQAAAAADAAUAAAAAAAAAAAABALcf
AAAAAAAAAAABAAAA0x8AAAUABAAGAAQADgANAAAAEAAMAMgCAAAQABkAyAIAAAAAGwDIAi0AUQIt
ANMCAAAAAAA8TW9kdWxlPgBtc2NvcmxpYgBNaWNyb3NvZnQuVmlzdWFsQmFzaWMATXlBcHBsaWNh
dGlvbgBTVF8yODYyMTI0OWU0YmM0NjI4ODdmMzBlOGIyNGM4MTFlMi52YnByb2ouTXkATXlDb21w
dXRlcgBNeVByb2plY3QATXlXZWJTZXJ2aWNlcwBUaHJlYWRTYWZlT2JqZWN0UHJvdmlkZXJgMQBC
YWRnZQBTVF8yODYyMTI0OWU0YmM0NjI4ODdmMzBlOGIyNGM4MTFlMi52YnByb2oARGl2aXNpb24A
TXlSZXNvdXJjZXMAU1RfMjg2MjEyNDllNGJjNDYyODg3ZjMwZThiMjRjODExZTIudmJwcm9qLk15
LlJlc291cmNlcwBNeVNldHRpbmdzAFBlcnNvbgBwZXJzb25EaXZpc2lvbgBTY3JpcHRNYWluAFNj
cmlwdFJlc3VsdHMATWljcm9zb2Z0LlZpc3VhbEJhc2ljLkFwcGxpY2F0aW9uU2VydmljZXMAQXBw
bGljYXRpb25CYXNlAC5jdG9yAE1pY3Jvc29mdC5WaXN1YWxCYXNpYy5EZXZpY2VzAENvbXB1dGVy
AFN5c3RlbQBPYmplY3QALmNjdG9yAGdldF9Db21wdXRlcgBtX0NvbXB1dGVyT2JqZWN0UHJvdmlk
ZXIAZ2V0X0FwcGxpY2F0aW9uAG1fQXBwT2JqZWN0UHJvdmlkZXIAVXNlcgBnZXRfVXNlcgBtX1Vz
ZXJPYmplY3RQcm92aWRlcgBnZXRfV2ViU2VydmljZXMAbV9NeVdlYlNlcnZpY2VzT2JqZWN0UHJv
dmlkZXIAQXBwbGljYXRpb24AV2ViU2VydmljZXMARXF1YWxzAG8AR2V0SGFzaENvZGUAVHlwZQBH
ZXRUeXBlAFRvU3RyaW5nAENyZWF0ZV9fSW5zdGFuY2VfXwBUAGluc3RhbmNlAERpc3Bvc2VfX0lu
c3RhbmNlX18AZ2V0X0dldEluc3RhbmNlAE1pY3Jvc29mdC5WaXN1YWxCYXNpYy5NeVNlcnZpY2Vz
LkludGVybmFsAENvbnRleHRWYWx1ZWAxAG1fQ29udGV4dABHZXRJbnN0YW5jZQBtRW1wbG95ZWVJ
RABtUGVyc29uSUQAbVNUQUVtcGxveWVlU3RhdHVzSUQAbURpdmlzaW9uSUQAbURpdmlzaW9uQ29k
ZQBtRGl2aXNpb25OYW1lAG1Db21wYW55SUQAbUNvbXBhbnlDb2RlAG1Db3Jwb3JhdGlvbk5hbWUA
bUJhZGdlSUQAbUJhZGdlTnVtYmVyAG1CYWRnZUNvbG9ySUQAbUNhcmROdW1iZXIAbVdoZW5CZWNv
bWVzQWN0aXZlAG1XaGVuRXhwaXJlcwBtTEFXAG1CYWRnZUNPbG9yTmFtZQBtRHJpdmVyRmxhZwBt
R2F0ZXNGbGFnAG1DdXN0b21zRmxhZwBtQXRjdABnZXRfRW1wbG95ZWVJRABzZXRfRW1wbG95ZWVJ
RABWYWx1ZQBnZXRfUGVyc29uSUQAc2V0X1BlcnNvbklEAGdldF9TVEFFbXBsb3llZVN0YXR1c0lE
AHNldF9TVEFFbXBsb3llZVN0YXR1c0lEAGdldF9EaXZpc2lvbklEAHNldF9EaXZpc2lvbklEAGdl
dF9EaXZpc2lvbkNvZGUAc2V0X0RpdmlzaW9uQ29kZQBnZXRfRGl2aXNpb25OYW1lAHNldF9EaXZp
c2lvbk5hbWUAZ2V0X0NvbXBhbnlJRABzZXRfQ29tcGFueUlEAGdldF9Db21wYW55Q29kZQBzZXRf
Q29tcGFueUNvZGUAZ2V0X0NvcnBvcmF0aW9uTmFtZQBzZXRfQ29ycG9yYXRpb25OYW1lAGdldF9C
YWRnZUlEAHNldF9CYWRnZUlEAGdldF9CYWRnZU51bWJlcgBzZXRfQmFkZ2VOdW1iZXIAZ2V0X0Jh
ZGdlQ29sb3JJRABzZXRfQmFkZ2VDb2xvcklEAGdldF9DYXJkTnVtYmVyAHNldF9DYXJkTnVtYmVy
AGdldF9XaGVuQmVjb21lc0FjdGl2ZQBzZXRfV2hlbkJlY29tZXNBY3RpdmUAZ2V0X1doZW5FeHBp
cmVzAHNldF9XaGVuRXhwaXJlcwBnZXRfTEFXRmxhZwBzZXRfTEFXRmxhZwB2YWx1ZQBnZXRfQmFk
Z2VDb2xvck5hbWUAc2V0X0JhZGdlQ29sb3JOYW1lAGdldF9Ecml2ZXJGbGFnAHNldF9Ecml2ZXJG
bGFnAGdldF9HYXRlc0ZsYWcAc2V0X0dhdGVzRmxhZwBnZXRfQ3VzdG9tc0ZsYWcAc2V0X0N1c3Rv
bXNGbGFnAGdldF9BVENUAHNldF9BVENUAEVtcGxveWVlSUQAUGVyc29uSUQAU1RBRW1wbG95ZWVT
dGF0dXNJRABEaXZpc2lvbklEAERpdmlzaW9uQ29kZQBEaXZpc2lvbk5hbWUAQ29tcGFueUlEAENv
bXBhbnlDb2RlAENvcnBvcmF0aW9uTmFtZQBCYWRnZUlEAEJhZGdlTnVtYmVyAEJhZGdlQ29sb3JJ
RABDYXJkTnVtYmVyAFdoZW5CZWNvbWVzQWN0aXZlAFdoZW5FeHBpcmVzAExBV0ZsYWcAQmFkZ2VD
b2xvck5hbWUARHJpdmVyRmxhZwBHYXRlc0ZsYWcAQ3VzdG9tc0ZsYWcAQVRDVABtUFBEaXZpc2lv
bgBnZXRfUFBEaXZpc2lvbgBzZXRfUFBEaXZpc2lvbgBQUERpdmlzaW9uAFN5c3RlbS5SZXNvdXJj
ZXMAUmVzb3VyY2VNYW5hZ2VyAF9yZXNNZ3IAU3lzdGVtLkdsb2JhbGl6YXRpb24AQ3VsdHVyZUlu
Zm8AX3Jlc0N1bHR1cmUAZ2V0X1Jlc291cmNlTWFuYWdlcgBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVy
ZQBDdWx0dXJlAFN5c3RlbS5Db25maWd1cmF0aW9uAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAG1f
VmFsdWUAbV9TeW5jT2JqZWN0AGdldF9WYWx1ZQBtUGluAG1GaXJzdE5hbWUAbU1pZGRsZU5hbWUA
bUxhc3ROYW1lAG1BZGRyZXNzAG1BcGFydG1lbnROdW1iZXIAbUNpdHkAbUNvdW50cnlTdWJkaXZp
c2lvbkNvZGUAbUNvdW50cnlDb2RlAG1Qb3N0YWxDb2RlAG1Xb3JrUGhvbmVOdW1iZXIAbURhdGVP
ZkJpcnRoAG1Tb2NpYWxTZWN1cml0eU51bWJlcgBtSGVpZ2h0SW5JbmNoZXMAbVdlaWdodEluUG91
bmRzAG1TZXhDb2RlAG1FeWVDb2xvckNvZGUAbUhhaXJDb2xvckNvZGUAbVJhY2VDb2RlAG1DYWxj
dWxhdGVkSGVpZ2h0SW5JbmNoZXMAbUNhbGN1bGF0ZWRIZWlnaHRJbkZlZXQAbUNvbXBhbnlOYW1l
AG1ETE51bWJlcgBtRExTaWcAbURMRXhwaXJlRGF0ZQBtUmFjZURlc2MAbUhhaXJEZXNjAG1FeWVE
ZXNjAG1Kb2JSb2xlAGdldF9QaW4Ac2V0X1BpbgBnZXRfRmlyc3ROYW1lAHNldF9GaXJzdE5hbWUA
Z2V0X01pZGRsZU5hbWUAc2V0X01pZGRsZU5hbWUAZ2V0X0xhc3ROYW1lAHNldF9MYXN0TmFtZQBn
ZXRfQWRkcmVzcwBzZXRfQWRkcmVzcwBnZXRfQXBhcnRtZW50TnVtYmVyAHNldF9BcGFydG1lbnRO
dW1iZXIAZ2V0X0NpdHkAc2V0X0NpdHkAZ2V0X0NvdW50cnlTdWJkaXZpc2lvbkNvZGUAc2V0X0Nv
dW50cnlTdWJkaXZpc2lvbkNvZGUAZ2V0X0NvdW50cnlDb2RlAHNldF9Db3VudHJ5Q29kZQBnZXRf
UG9zdGFsQ29kZQBzZXRfUG9zdGFsQ29kZQBnZXRfV29ya1Bob25lTnVtYmVyAHNldF9Xb3JrUGhv
bmVOdW1iZXIAZ2V0X0RhdGVPZkJpcnRoAHNldF9EYXRlT2ZCaXJ0aABnZXRfU29jaWFsU2VjdXJp
dHlOdW1iZXIAc2V0X1NvY2lhbFNlY3VyaXR5TnVtYmVyAGdldF9IZWlnaHRJbkluY2hlcwBzZXRf
SGVpZ2h0SW5JbmNoZXMAZ2V0X1dlaWdodEluUG91bmRzAHNldF9XZWlnaHRJblBvdW5kcwBnZXRf
U2V4Q29kZQBzZXRfU2V4Q29kZQBnZXRfRXllQ29sb3JDb2RlAHNldF9FeWVDb2xvckNvZGUAZ2V0
X0hhaXJDb2xvckNvZGUAc2V0X0hhaXJDb2xvckNvZGUAZ2V0X1JhY2VDb2RlAHNldF9SYWNlQ29k
ZQBnZXRfQ2FsY3VsYXRlZEhlaWdodEluSW5jaGVzAHNldF9DYWxjdWxhdGVkSGVpZ2h0SW5JbmNo
ZXMAZ2V0X0NhbGN1bGF0ZWRIZWlnaHRJbkZlZXQAc2V0X0NhbGN1bGF0ZWRIZWlnaHRJbkZlZXQA
Z2V0X0NvbXBhbnlOYW1lAHNldF9Db21wYW55TmFtZQBnZXRfRHJpdmVyTGljZW5zZUV4cGlyZQBz
ZXRfRHJpdmVyTGljZW5zZUV4cGlyZQBnZXRfRHJpdmVyTGljZW5zZVN0YXRlAHNldF9Ecml2ZXJM
aWNlbnNlU3RhdGUAZ2V0X0RyaXZlckxpY2Vuc2VOdW1iZXIAc2V0X0RyaXZlckxpY2Vuc2VOdW1i
ZXIAZ2V0X0hhaXJEZXNjAHNldF9IYWlyRGVzYwBnZXRfRXllRGVzYwBzZXRfRXllRGVzYwBnZXRf
UmFjZURlc2MAc2V0X1JhY2VEZXNjAGdldF9Kb2JSb2xlAHNldF9Kb2JSb2xlAFBpbgBGaXJzdE5h
bWUATWlkZGxlTmFtZQBMYXN0TmFtZQBBZGRyZXNzAEFwYXJ0bWVudE51bWJlcgBDaXR5AENvdW50
cnlTdWJkaXZpc2lvbkNvZGUAQ291bnRyeUNvZGUAUG9zdGFsQ29kZQBXb3JrUGhvbmVOdW1iZXIA
RGF0ZU9mQmlydGgAU29jaWFsU2VjdXJpdHlOdW1iZXIASGVpZ2h0SW5JbmNoZXMAV2VpZ2h0SW5Q
b3VuZHMAU2V4Q29kZQBFeWVDb2xvckNvZGUASGFpckNvbG9yQ29kZQBSYWNlQ29kZQBDYWxjdWxh
dGVkSGVpZ2h0SW5JbmNoZXMAQ2FsY3VsYXRlZEhlaWdodEluRmVldABDb21wYW55TmFtZQBEcml2
ZXJMaWNlbnNlRXhwaXJlAERyaXZlckxpY2Vuc2VTdGF0ZQBEcml2ZXJMaWNlbnNlTnVtYmVyAEhh
aXJEZXNjAEV5ZURlc2MAUmFjZURlc2MASm9iUm9sZQBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlw
dFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBWU1RBUlRTY3Jp
cHRPYmplY3RNb2RlbEJhc2UAbWF4QUNBTVNNZXNzYWdlUXVldWUAc3RhdHVzTWFwU3RyAHNwZWNp
YWxDYXRlZ29yaWVzU3RhcnRTbG90AFN5c3RlbS5Db2xsZWN0aW9ucwBIYXNodGFibGUAc3RhdHVz
TWFwVGFibGUAcGVyc29uVXNlckRhdGFNYXAAYmFkZ2VVc2VyRGF0YU1hcABHbG9iYWxFcnJvcmxl
dmVsAENTX0Nvbm5lY3Rpb25TdHJpbmcATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAE1p
Y3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAQ29ubmVjdGlvbk1hbmFnZXIAQ1NfTWFuYWdl
cgBTeXN0ZW0uRGF0YQBTeXN0ZW0uRGF0YS5TcWxDbGllbnQAU3FsQ29ubmVjdGlvbgBDU19Db25u
ZWN0aW9uAFBQX0Nvbm5lY3Rpb25TdHJpbmcAU3lzdGVtLkRhdGEuT2RiYwBPZGJjQ29ubmVjdGlv
bgBJbmZvcm1peFJlYWRDb25uZWN0aW9uT0RCQwBJbmZvcm1peFdyaXRlQ29ubmVjdGlvbk9EQkMA
SW5mb3JtaXhSZWFkQ29ubmVjdGlvblNRTABJbmZvcm1peFdyaXRlQ29ubmVjdGlvblNRTABOdW1i
ZXJPZkRlcGFydG1lbnRzQWRkZWQAbnVtYmVyT2ZQZXJzb25zQWRkZWQAbnVtYmVyT2ZCYWRnZXNB
ZGRlZABOdW1iZXJPZlBpY3R1cmVzQWRkZWQATnVtYmVyT2ZQZXJzb25fVXNlckFkZGVkAE51bWJl
ck9mUGVyc29uX0NhdGVnb3J5AGxvZ0RpcgBQUF9TY2hlbWEAbXRlc3QATWFpbgBMb2FkUGVyc29u
RGl2aXNpb25PYmplY3QAdHJhbnNhY3Rpb25JRABSZXByaW50QmFkZ2UAVXBkYXRlQmFkZ2VTdGF0
dXMATG9hZFBlcnNvbk9iamVjdABMb2FkRGl2aXNpb25PYmplY3QAVHJhbnNmZXJEaXZpc2lvbgBU
cmFuc2ZlckNhdGVnb3J5AEFycmF5TGlzdABVcGRhdGVJbnNlcnRDYXRlZ29yaWVzAGxheENhdHMA
ZW1wX2lkAGNvX2RpdgBUcmFuc2ZlckJhZGdlQ2F0ZWdvcnkAVXBkYXRlUGVyc29uUmVjb3JkcwBv
UGVyc29uAEluc2VydERpdmlzaW9uAG9EaXZpc2lvbgBJbnNlcnRQZXJzb25Db21wYW55QW5kRGl2
aXNpb25Vc2VyRmllbGQAUFBQZXJzb25JRABQYWRkU3RyaW5nV2l0aERlbGltZXRlcgBvcmlnaW5h
bFN0cmluZwBJbnNlcnRQZXJzb25SZWNvcmQAb1BlcnNvbkRpdmlzaW9uAFRyYW5zZmVyUGVyc29u
RGl2AFRyYW5zZmVyUGVyc29uVXBkYXRlcwBJbnNlcnRPclVwZGF0ZVVzZXJEYXRhAHVzZXJEYXRh
TWFwAG9CYWRnZQBJbnNlcnRPclVwZGF0ZVVzZXJEYXRhQmFkZ2UAcGVyc29uX2lkAFVwZGF0ZUJh
ZGdlUmVjb3JkAGJpZABJbnNlcnRCYWRnZVJlY29yZABVcGRhdGVNb2RpZnlEYXRlVGltZUZvclBl
cnNvbgBUcmFuc2FjdGlvbklEAFRyYW5zZmVyQmFkZ2UAR2V0UFBwZXJzb25JRABlbXBsb3llZQBk
aXZpc2lvbgBPYnRhaW5QUHBlcnNvbklEAGRpdmlzaW9uaWQAVHJhY2VMb2cAbGV2ZWwAbXNnAE1h
a2VJbnRUaW1lAHQATWFrZUludERhdGUAY291bnRQZW5kaW5nAHRJRABja0FDQU1TcXVldWUAU2Vu
ZE1haWwAaW5TdWJqZWN0AGluQm9keQBFbnVtAHZhbHVlX18AU3VjY2VzcwBGYWlsdXJlAFN5c3Rl
bS5Db21wb25lbnRNb2RlbABFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxl
U3RhdGUAU3lzdGVtLkNvZGVEb20uQ29tcGlsZXIAR2VuZXJhdGVkQ29kZUF0dHJpYnV0ZQBTeXN0
ZW0uRGlhZ25vc3RpY3MARGVidWdnZXJIaWRkZW5BdHRyaWJ1dGUATWljcm9zb2Z0LlZpc3VhbEJh
c2ljLkNvbXBpbGVyU2VydmljZXMAU3RhbmRhcmRNb2R1bGVBdHRyaWJ1dGUASGlkZU1vZHVsZU5h
bWVBdHRyaWJ1dGUAU3lzdGVtLkNvbXBvbmVudE1vZGVsLkRlc2lnbgBIZWxwS2V5d29yZEF0dHJp
YnV0ZQBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFJ1bnRpbWVIZWxwZXJzAEdldE9i
amVjdFZhbHVlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAEFjdGl2YXRvcgBD
cmVhdGVJbnN0YW5jZQBNeUdyb3VwQ29sbGVjdGlvbkF0dHJpYnV0ZQBzZXRfVmFsdWUAU3lzdGVt
LlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzAENvbVZpc2libGVBdHRyaWJ1dGUAU3lzdGVtLlJlZmxl
Y3Rpb24AQXNzZW1ibHkAZ2V0X0Fzc2VtYmx5AFN5c3RlbS5UaHJlYWRpbmcATW9uaXRvcgBFbnRl
cgBFeGl0AERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUAU3FsQ29tbWFuZABFeGNlcHRpb24A
U3FsRGF0YVJlYWRlcgBTY3JpcHRPYmplY3RNb2RlbABnZXRfRHRzAFZhcmlhYmxlcwBnZXRfVmFy
aWFibGVzAFZhcmlhYmxlAGdldF9JdGVtAENvbnZlcnNpb25zAE9wZXJhdG9ycwBDb21wYXJlU3Ry
aW5nAENoYXIAU3RyaW5nAFNwbGl0AEFkZABJbnQzMgBDb25uZWN0aW9ucwBnZXRfQ29ubmVjdGlv
bnMAc2V0X0Nvbm5lY3Rpb25TdHJpbmcAQWNxdWlyZUNvbm5lY3Rpb24AUHJvamVjdERhdGEAU2V0
UHJvamVjdEVycm9yAENvbmNhdABDbGVhclByb2plY3RFcnJvcgBPcGVuAFRocmVhZABTbGVlcABT
cWxQYXJhbWV0ZXJDb2xsZWN0aW9uAGdldF9QYXJhbWV0ZXJzAFNxbFBhcmFtZXRlcgBBZGRXaXRo
VmFsdWUARXhlY3V0ZVJlYWRlcgBSZWFkAFRvSW50ZWdlcgBDb21wb25lbnQARGlzcG9zZQBDbG9z
ZQBFeGVjdXRlTm9uUXVlcnkAU3RhcnRzV2l0aABnZXRfTWVzc2FnZQBnZXRfSW5uZXJFeGNlcHRp
b24ASW5mb3JtYXRpb24ASXNOb3RoaW5nAHNldF9UYXNrUmVzdWx0AE9kYmNDb21tYW5kAFRyaW0A
U3Vic3RyaW5nAFZlcnNpb25lZABJc051bWVyaWMAZ2V0X0xlbmd0aABEYXRlVGltZQBnZXRfTm93
AFN0cmluZ3MARm9ybWF0AFBhcnNlAE1hdGgAUm91bmQAVG9Eb3VibGUAUGFkTGVmdABPZGJjUGFy
YW1ldGVyQ29sbGVjdGlvbgBPZGJjUGFyYW1ldGVyAGdldF9VdGNOb3cAQ29uY2F0ZW5hdGVPYmpl
Y3QAT2RiY0RhdGFSZWFkZXIASUVudW1lcmF0b3IAR2V0T3JkaW5hbABJc0RCTnVsbABDb25kaXRp
b25hbENvbXBhcmVPYmplY3RMZXNzAENvbnRhaW5zAENvbnRhaW5zS2V5AEdldEVudW1lcmF0b3IA
Z2V0X0N1cnJlbnQAQ29udGFpbnNWYWx1ZQBFeGVjdXRlU2NhbGFyAFRyeVBhcnNlAEluZGV4T2YA
TW92ZU5leHQASURpc3Bvc2FibGUAQ2xlYXIAREJOdWxsAEludGVyYWN0aW9uAElJZgBnZXRfUGFy
YW1ldGVyTmFtZQBnZXRfSGFzUm93cwBEaWN0aW9uYXJ5RW50cnkAUHJvcGVydHlJbmZvAElEaWN0
aW9uYXJ5RW51bWVyYXRvcgBHZXRQcm9wZXJ0aWVzAE1lbWJlckluZm8AZ2V0X05hbWUAZ2V0X0tl
eQBDb25kaXRpb25hbENvbXBhcmVPYmplY3RFcXVhbABHZXRWYWx1ZQBTcWxEYXRhQWRhcHRlcgBE
YXRhU2V0AERhdGFSb3cAQ29tbWFuZFR5cGUAc2V0X0NvbW1hbmRUeXBlAFN5c3RlbS5EYXRhLkNv
bW1vbgBEYkRhdGFBZGFwdGVyAEZpbGwARGF0YVRhYmxlQ29sbGVjdGlvbgBnZXRfVGFibGVzAElu
dGVybmFsRGF0YUNvbGxlY3Rpb25CYXNlAGdldF9Db3VudABEYXRhVGFibGUARGF0YVJvd0NvbGxl
Y3Rpb24AZ2V0X1Jvd3MAQ29udmVydABUb0ludDMyAFNlcnZlckNvbXB1dGVyAE1pY3Jvc29mdC5W
aXN1YWxCYXNpYy5NeVNlcnZpY2VzAEZpbGVTeXN0ZW1Qcm94eQBnZXRfRmlsZVN5c3RlbQBXcml0
ZUFsbFRleHQAU3lzdGVtLklPAFN0cmVhbVJlYWRlcgBTdHJlYW1Xcml0ZXIAUHJvY2VzcwBQcm9j
ZXNzU3RhcnRJbmZvAHNldF9Vc2VTaGVsbEV4ZWN1dGUAc2V0X0Vycm9yRGlhbG9nAHNldF9DcmVh
dGVOb1dpbmRvdwBQcm9jZXNzV2luZG93U3R5bGUAc2V0X1dpbmRvd1N0eWxlAHNldF9SZWRpcmVj
dFN0YW5kYXJkRXJyb3IAc2V0X1JlZGlyZWN0U3RhbmRhcmRJbnB1dABzZXRfUmVkaXJlY3RTdGFu
ZGFyZE91dHB1dABzZXRfU3RhcnRJbmZvAFN0YXJ0AGdldF9TdGFuZGFyZElucHV0AGdldF9TdGFu
ZGFyZE91dHB1dABnZXRfU3RhbmRhcmRFcnJvcgBUZXh0V3JpdGVyAFdyaXRlTGluZQBGbHVzaABS
ZWFkVG9FbmQAU3lzdGVtLk5ldC5NYWlsAE1haWxNZXNzYWdlAFNtdHBDbGllbnQATWFpbEFkZHJl
c3MAc2V0X0Zyb20ATWFpbEFkZHJlc3NDb2xsZWN0aW9uAGdldF9UbwBzZXRfU3ViamVjdABzZXRf
Qm9keQBTZW5kAENMU0NvbXBsaWFudEF0dHJpYnV0ZQBTeXN0ZW0uQWRkSW4AQWRkSW5BdHRyaWJ1
dGUAU1RfMjg2MjEyNDllNGJjNDYyODg3ZjMwZThiMjRjODExZTIudmJwcm9qLlJlc291cmNlcy5y
ZXNvdXJjZXMAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJp
bGl0eUF0dHJpYnV0ZQBBc3NlbWJseUZpbGVWZXJzaW9uQXR0cmlidXRlAEd1aWRBdHRyaWJ1dGUA
QXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAQXNz
ZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBBc3NlbWJseURl
c2NyaXB0aW9uQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAU1RfMjg2MjEyNDllNGJj
NDYyODg3ZjMwZThiMjRjODExZTIudmJwcm9qLmRsbAAAAAAxTQB5AC4AUgBlAHMAbwB1AHIAYwBl
AHMALgBNAHkAUgBlAHMAbwB1AHIAYwBlAHMAAIDxQQBDAFQASQBWAEUAPQAwACwAQwBPAE4ARgBJ
AFMAQwBBAFQARQBEAD0ANQAsAEUAWABQAEkAUgBFAEQAPQA1ACwASQBOAFYAQQBMAEkARAA9ADUA
LABMAE8AUwBUAD0ANAAsAFIARQBDAEEATABMAD0ANQAsAFIARQBUAFUAUgBOAEUARAA9ADYALABV
AE4AQwBMAEEASQBNAEUARAA9ADUALABDAEEATgBDAEUATABMAEUARAA9ADYALABTAFQATwBMAEUA
TgA9ADQALAA5AC0AMwAwAC0AMAAyACAAIABuAG8AbgAgAEYAUAA9ADUAAQEAGVUAcwBlAHIAOgA6
AGwAbwBnAEQAaQByAAAtRABlAHYAZQBsAG8AcABtAGUAbgB0ACAAdABpAG0AZQAgAFYAYQBsAHUA
ZQAAJ0MAOgBcAEEAQwBBAE0AUwBfAFMAUwBJAFMAXABMAG8AZwBzAFwAACdVAHMAZQByADoAOgBD
AFMAXwBDAG8AbgBuAGUAYwB0AGkAbwBuAACBcUQAYQB0AGEAIABTAG8AdQByAGMAZQA9ADEAOQAy
AC4AMQA2ADgALgA2ADUALgAzADsASQBuAGkAdABpAGEAbAAgAEMAYQB0AGEAbABvAGcAPQBDAFMA
XwBCAE8AUwBEACAALQAtACAARABlAHYAOwBJAG4AdABlAGcAcgBhAHQAZQBkACAAUwBlAGMAdQBy
AGkAdAB5AD0AVAByAHUAZQA7AEEAcABwAGwAaQBjAGEAdABpAG8AbgAgAE4AYQBtAGUAPQBTAFMA
SQBTAC0AQQBDAEEATQBQAGEAYwBrAGEAZwBlAFAAUAA0AC0AewA3ADAANQA1ADkAMwA3ADgALQA5
ADkANgAwAC0ANABEAEEAMwAtADgAOAA2ADIALQBEAEUANQAwAEMANAAwADgAMwBDAEMAQQB9ADEA
OQAyAC4AMQA2ADgALgA2ADUALgAzAC4AQwBTAF8AQgBPAFMARAAgAC0ALQAgAEQAZQB2ADsAASdV
AHMAZQByADoAOgBQAFAAXwBDAG8AbgBuAGUAYwB0AGkAbwBuAABpdQBpAGQAPQBpAG4AZgBvAHIA
bQBpAHgAOwBEAHMAbgA9AFAAaQBjAHQAdQByAGUAUABlAHIAZgBlAGMAdABJAG4AZgBvAHIAbQBp
AHgAOwBwAHcAPQBpAG4AZgBvAHIAbQBpAHgAOwAAEWkAbgBmAG8AcgBtAGkAeAAAHUIAYQBkAGcA
ZQBDAG8AbABvAHIATgBhAG0AZQAAF0MAdQBzAHQAbwBtAHMARgBsAGEAZwAAD0oAbwBiAFIAbwBs
AGUAABVEAHIAaQB2AGUAcgBGAGwAYQBnAAAPTABBAFcARgBsAGEAZwAAE0cAYQB0AGUAcwBGAGwA
YQBnAAAJQQBUAEMAVAAAF0IAYQBkAGcAZQBOAHUAbQBiAGUAcgAALUMAYQBsAGMAdQBsAGEAdABl
AGQASABlAGkAZwBoAHQASQBuAEYAZQBlAHQAACdEAHIAaQB2AGUAcgBMAGkAYwBlAG4AcwBlAE4A
dQBtAGIAZQByAAAlRAByAGkAdgBlAHIATABpAGMAZQBuAHMAZQBTAHQAYQB0AGUAACdEAHIAaQB2
AGUAcgBMAGkAYwBlAG4AcwBlAEUAeABwAGkAcgBlAAAXRABhAHQAZQBPAGYAQgBpAHIAdABoAAAp
UwBvAGMAaQBhAGwAUwBlAGMAdQByAGkAdAB5AE4AdQBtAGIAZQByAAAxQwBhAGwAYwB1AGwAYQB0
AGUAZABIAGUAaQBnAGgAdABJAG4ASQBuAGMAaABlAHMAAB1XAGUAaQBnAGgAdABJAG4AUABvAHUA
bgBkAHMAAA9TAGUAeABDAG8AZABlAAAPRQB5AGUARABlAHMAYwAAEUgAYQBpAHIARABlAHMAYwAA
EVIAYQBjAGUARABlAHMAYwAAAyAAAA9BAEQATwAuAE4ARQBUAAA9QQBjAHEAdQBpAHIAZQBkACAA
YwBvAG4AbgBlAGMAdABpAG8AbgAgAHQAbwAgAEMAUwBfAEIATwBTAEQAAFVFAHgAYwBlAHAAdABp
AG8AbgAgAGkAbgAgAGMAbwBuAG4AZQBjAHQAaQBuAGcAIAB0AG8AIAB0AGgAZQAgAEMAUwAgAGQA
YQB0AGEAYgBhAHMAZQAAV0UAeABjAGUAcAB0AGkAbwBuACAAaQBuACAAYwBvAG4AbgBlAGMAdABp
AG4AZwAgAHQAbwAgAHQAaABlACAAQwBTACAAZABhAHQAYQBiAGEAcwBlACAAAAU6ACAAAD9BAGMA
cQB1AGkAcgBlAGQAIABjAG8AbgBuAGUAYwB0AGkAbwBuACAAdABvACAAaQBuAGYAbwByAG0AaQB4
AABhRQB4AGMAZQBwAHQAaQBvAG4AIABpAG4AIABjAG8AbgBuAGUAYwB0AGkAbgBnACAAdABvACAA
dABoAGUAIABJAG4AZgBvAHIAbQBpAHgAIABkAGEAdABhAGIAYQBzAGUAAGNFAHgAYwBlAHAAdABp
AG8AbgAgAGkAbgAgAGMAbwBuAG4AZQBjAHQAaQBuAGcAIAB0AG8AIAB0AGgAZQAgAEkAbgBmAG8A
cgBtAGkAeAAgAGQAYQB0AGEAYgBhAHMAZQAgAACBF1MAZQBsAGUAYwB0ACAAVABPAFAAIAAxACAA
KgAgAGYAcgBvAG0AIABbAEQAYQB0AGEAXQAuAFsAQQBjAGMAZQBzAHMAQwBvAG4AdAByAG8AbAAu
AFQAcgBhAG4AcwBmAGUAcgBzAF0AIAB3AGgAZQByAGUAIABbAFQAcgBhAG4AcwBtAGkAdABFAG4A
ZABdACAAaQBzACAAbgB1AGwAbAAgAGEAbgBkACAAWwBUAHIAYQBuAHMAZgBlAHIASQBEAF0AIAA+
ACAAQABQAHIAaQBvAHIAVAByAGEAbgBzAGYAZQByAEkARAAgAE8AUgBEAEUAUgAgAEIAWQAgAFsA
VAByAGEAbgBzAGYAZQByAEkARABdACAAAIDNVQBQAEQAQQBUAEUAIABbAEQAYQB0AGEAXQAuAFsA
QQBjAGMAZQBzAHMAQwBvAG4AdAByAG8AbAAuAFQAcgBhAG4AcwBmAGUAcgBzAF0AIABTAGUAdAAg
AFsAVAByAGEAbgBzAG0AaQB0AFMAdABhAHIAdABdAD0AZwBlAHQARABhAHQAZQAoACkAIABXAEgA
RQBSAEUAIABbAFQAcgBhAG4AcwBmAGUAcgBJAEQAXQAgAD0AIABAAFQAcgBhAG4AcwBmAGUAcgBJ
AEQAAIDJVQBQAEQAQQBUAEUAIABbAEQAYQB0AGEAXQAuAFsAQQBjAGMAZQBzAHMAQwBvAG4AdABy
AG8AbAAuAFQAcgBhAG4AcwBmAGUAcgBzAF0AIABTAGUAdAAgAFsAVAByAGEAbgBzAG0AaQB0AEUA
bgBkAF0APQBnAGUAdABEAGEAdABlACgAKQAgAFcASABFAFIARQAgAFsAVAByAGEAbgBzAGYAZQBy
AEkARABdACAAPQAgAEAAVAByAGEAbgBzAGYAZQByAEkARAAAH1AAcgBpAG8AcgBUAHIAYQBuAHMA
ZgBlAHIASQBEAAAVVAByAGEAbgBzAGYAZQByAEkARAAAEUQAYQB0AGEAVAB5AHAAZQAAez0APQA9
AD0APQA9AD0APQA9AD0APQA9AD0APQA9AD0APQA9AD0APQA9AD0APQA9AD0APQA9AD0AUAByAG8A
YwBlAHMAcwBpAG4AZwAgAHIAbwB3ACAAdwBpAHQAaAAgAFQAcgBhAG4AcwBmAGUAcgBJAEQAIAA9
ACAAAG9GAGEAaQBsAGUAZAAgAHQAbwAgAHUAcABkAGEAdABlACAAcwB0AGEAcgB0AF8AdAByAGEA
bgBzAG0AaQB0ACAAZABhAHQAZQAgAGYAbwByACAAdAByAGEAbgBzAGEAYwB0AGkAbwBuAEkARAAg
AAATUABlAHIAcwBvAG4ARABpAHYAAA1QAGUAcgBzAG8AbgAAC0IAYQBkAGcAZQAAE0IAYQBkAGcA
ZQBTAHQAYQB0AAAVQgBhAGQAZwBlAFIAcAByAG4AdAAAEUQAaQB2AGkAcwBpAG8AbgAAa0YAYQBp
AGwAZQBkACAAdABvACAAdQBwAGQAYQB0AGUAIABFAG4AZABfAHQAcgBhAG4AcwBtAGkAdAAgAGQA
YQB0AGUAIABmAG8AcgAgAHQAcgBhAG4AcwBhAGMAdABpAG8AbgBJAEQAIAAAPUUAcgByAG8AcgAg
AHAAcgBvAGMAZQBzAHMAaQBuAGcAIAB0AHIAYQBuAHMAYwBhAHQAaQBvAG4AOgAgAACBxVMAZQBs
AGUAYwB0ACAAdABvAHAAKAAxACkAIAAgACAAeAAuAFAAZQByAHMAbwBuAEkARAAsACAAeAAuAFsA
RABpAHYAaQBzAGkAbwBuAEkARABdACAAIABGAFIATwBNACAAWwBEAGEAdABhAF0ALgBbAEEAYwBj
AGUAcwBzAEMAbwBuAHQAcgBvAGwALgBUAHIAYQBuAHMAZgBlAHIAUABlAHIAcwBvAG4ARABpAHYA
aQBzAGkAbwBuAHMAXQAgAHQAcABkACAAIABJAE4ATgBFAFIAIABKAE8ASQBOACAAWwBEAGEAdABh
AF0ALgBbAFAAZQByAHMAbwBuAC4AUABlAHIAcwBvAG4ARABpAHYAaQBzAGkAbwBuAFgAcgBlAGYA
XQAgAHgAIABvAG4AIAB4AC4AWwBQAGUAcgBzAG8AbgBEAGkAdgBpAHMAaQBvAG4AWAByAGUAZgBJ
AEQAXQAgAD0AIAB0AHAAZAAuAFsAUABlAHIAcwBvAG4ARABpAHYAaQBzAGkAbwBuAFgAcgBlAGYA
SQBEAF0AIAAgAHcAaABlAHIAZQAgAFQAcgBhAG4AcwBmAGUAcgBJAEQAIAA9ACAAABFQAGUAcgBz
AG8AbgBJAEQAABVEAGkAdgBpAHMAaQBvAG4ASQBEAACCVVMARQBMAEUAQwBUACAAdABvAHAAKAAx
ACkAIABiAC4AWwBCAGEAZABnAGUASQBEAF0ALAAgAGIALgBbAEIAYQBkAGcAZQBOAHUAbQBiAGUA
cgBdACwAIABiAHAALgBbAEIAYQBkAGcAZQBTAHQAYQB0AHUAcwBDAG8AZABlAF0ALAAgAGIALgBb
AEMAYQByAGQATgB1AG0AYgBlAHIAXQAgACAARgBSAE8ATQAgAFsARABhAHQAYQBdAC4AWwBBAGMA
YwBlAHMAcwBDAG8AbgB0AHIAbwBsAC4AVAByAGEAbgBzAGYAZQByAEIAYQBkAGcAZQBzAF0AIAB0
AGIAIAAgAEkATgBOAEUAUgAgAEoATwBJAE4AIABbAEQAYQB0AGEAXQAuAFsAUABlAHIAcwBvAG4A
LgBCAGEAZABnAGUAcwBdACAAYgAgAG8AbgAgAGIALgBbAEIAYQBkAGcAZQBJAEQAXQAgAD0AIAB0
AGIALgBbAEIAYQBkAGcAZQBJAEQAXQAgACAASQBOAE4ARQBSACAASgBPAEkATgAgAFsARABhAHQA
YQBdAC4AWwBQAGUAcgBzAG8AbgAuAEIAYQBkAGcAZQBTAHQAYQB0AHUAcwBQAGUAcgBpAG8AZABz
AF0AIABiAHAAIABvAG4AIABiAHAALgBbAEIAYQBkAGcAZQBJAEQAXQAgAD0AIABiAC4AWwBCAGEA
ZABnAGUASQBEAF0AIAAgAFcASABFAFIARQAgAHQAYgAuAFQAcgBhAG4AcwBmAGUAcgBJAEQAIAA9
ACAAAE8gAG8AcgBkAGUAcgAgAGIAeQAgAGIAcAAuAFsAXwBEAGEAdABhAEMAaABhAG4AZwBlAHMA
XwBSAG8AdwBJAEQAXQAgAGQAZQBzAGMAIAAAD0IAYQBkAGcAZQBJAEQAAB9CAGEAZABnAGUAUwB0
AGEAdAB1AHMAQwBvAGQAZQAACzAAMAA1ADIAMAAAFUMAYQByAGQATgB1AG0AYgBlAHIAACNCAGEA
ZABnAGUAIABSAGUAcAByAGkAbgB0ACAAOgAgACAAAENzAGUAdAAgAGwAbwBjAGsAIABtAG8AZABl
ACAAdABvACAAdwBhAGkAdAAgADEAMAA7ACAAVQBwAGQAYQB0AGUAIAAARy4AYgBhAGQAZwBlACAA
cwBlAHQAIABzAHQAYQB0AHUAcwAgAD0AIAA2ACwAIABtAG8AZABpAGYAeQBfAGQAYQB0AGUAPQAA
EXkAeQB5AHkATQBNAGQAZAAAIyAALAAgAG0AbwBkAGkAZgB5AF8AdABpAG0AZQAgAD0AIAAADUgA
SABNAE0AcwBzAABFIAAgAHcAaABlAHIAZQAgAHMAdABhAHQAdQBzACAAPQAgADAAIABhAG4AZAAg
AHUAbgBpAHEAdQBlAF8AaQBkAD0AJwABAycAASNFAHgAZQBjAHUAdABpAG4AZwAgAFEAdQBlAHIA
eQA6ACAAAEkuAGIAYQBkAGcAZQAgAHMAZQB0ACAAcwB0AGEAdAB1AHMAIAA9ACAAMAAgACwAIABt
AG8AZABpAGYAeQBfAGQAYQB0AGUAPQAAHyAAIAB3AGgAZQByAGUAIABiAGkAZAAgAD0AIAAnAAGA
21UAUABEAEEAVABFACAAWwBEAGEAdABhAF0ALgBbAEEAYwBjAGUAcwBzAEMAbwBuAHQAcgBvAGwA
LgBUAHIAYQBuAHMAZgBlAHIAQgBhAGQAZwBlAHMAXQAgAFMAZQB0ACAAWwBXAGgAZQBuAFQAcgBh
AG4AcwBtAGkAdAB0AGUAZABdAD0AZwBlAHQARABhAHQAZQAoACkAIABXAEgARQBSAEUAIABbAFQA
cgBhAG4AcwBmAGUAcgBJAEQAXQAgAD0AIABAAFQAcgBhAG4AcwBmAGUAcgBJAEQAAH1GAGEAaQBs
AGUAZAAgAHQAbwAgAHUAcABkAGEAdABlACAAYgBhAGQAZwBlACAAcwB0AGEAdAB1AHMAIABmAG8A
cgAgAEIAYQBkAGcAZQBzACAAdQBwAGQAYQB0AGUAIAB0AHIAYQBuAHMAYQBjAHQAaQBvAG4ASQBE
ACAAAICNRgBhAGkAbABlAGQAIAB0AG8AIAB1AHAAZABhAHQAZQAgAHIAZQBwAHIAaQBuAHQAIABi
AGEAZABnAGUAIABzAHQAYQB0AHUAcwAgAGYAbwByACAAQgBhAGQAZwBlAHMAIAB1AHAAZABhAHQA
ZQAgAHQAcgBhAG4AcwBhAGMAdABpAG8AbgBJAEQAIAAAQ0MAdQByAHIAZQBuAHQAIABCAGEAZABn
AGUAIABTAHQAYQB0AHUAcwAgAGkAbgAgAEMAUwAgAGkAcwAgADoAIAAgAAADNgAACUwATwBTAFQA
AAM0AAALTABTAFQATABOAAAJQwBGAFMAQwAAAzUAAAlFAFgAUABSAAALSQBOAFYATABEAAALUgBF
AEMAQQBMAAALVQBOAEMATABNAAAJUgBUAFIATgAACUMAQQBOAEMAAAlBAEMAVABWAAADMAAAKS4A
YgBhAGQAZwBlACAAcwBlAHQAIABzAHQAYQB0AHUAcwAgAD0AIAAAHSwAIABtAG8AZABpAGYAeQBf
AGQAYQB0AGUAPQAAIyAAIAB3AGgAZQByAGUAIABzAHQAYQB0AHUAcwAgAD0AIAAAISAAYQBuAGQA
IAB1AG4AaQBxAHUAZQBfAGkAZAA9ACcAAS9GAGUAdABjAGgAaQBuAGcAIABQAGUAcgBzAG8AbgAg
AGYAcgBvAG0AIABDAFMAAIYPUwBlAGwAZQBjAHQAIAB0AG8AcAAoADEAKQAgACAAIAB0AHAALgBQ
AGUAcgBzAG8AbgBJAEQALAAgAHAAaQBuACwAIABGAGkAcgBzAHQATgBhAG0AZQAsACAATQBpAGQA
ZABsAGUATgBhAG0AZQAsACAATABhAHMAdABOAGEAbQBlACwAIABBAGQAZAByAGUAcwBzACwAIABB
AHAAYQByAHQAbQBlAG4AdABOAHUAbQBiAGUAcgAsACAAQwBpAHQAeQAsACAAQwBvAHUAbgB0AHIA
eQBTAHUAYgBkAGkAdgBpAHMAaQBvAG4AQwBvAGQAZQAsACAAQwBvAHUAbgB0AHIAeQBDAG8AZABl
ACwAIABQAG8AcwB0AGEAbABDAG8AZABlACwAIAAgACAAVwBvAHIAawBQAGgAbwBuAGUATgB1AG0A
YgBlAHIALAAgAEUAbQBwAGwAbwB5AGUAZQBJAEQALAAgAEQAYQB0AGUATwBmAEIAaQByAHQAaAAs
ACAAUwBvAGMAaQBhAGwAUwBlAGMAdQByAGkAdAB5AE4AdQBtAGIAZQByACwAIABIAGUAaQBnAGgA
dABJAG4ASQBuAGMAaABlAHMALAAgAFcAZQBpAGcAaAB0AEkAbgBQAG8AdQBuAGQAcwAsACAAUwBl
AHgAQwBvAGQAZQAsACAAcABiAC4ARQB5AGUAQwBvAGwAbwByAEMAbwBkAGUALAAgAHAAYgAuAEgA
YQBpAHIAQwBvAGwAbwByAEMAbwBkAGUALAAgAHAAYgAuAFIAYQBjAGUAQwBvAGQAZQAgACwAIABl
AGMALgBlAHkAZQBjAG8AbABvAHIAZABlAHMAYwByAGkAcAB0AGkAbwBuACwAIABoAGMALgBIAGEA
aQByAEMAbwBsAG8AcgBEAGUAcwBjAHIAaQBwAHQAaQBvAG4ALAAgAHIAYQBjAGUALgBSAGEAYwBl
AEQAZQBzAGMAcgBpAHAAdABpAG8AbgAgACAAIABGAFIATwBNACAAWwBEAGEAdABhAF0ALgBbAEEA
YwBjAGUAcwBzAEMAbwBuAHQAcgBvAGwALgBUAHIAYQBuAHMAZgBlAHIAUABlAHIAcwBvAG4AcwBd
ACAAdABwACAAIAAgAEkATgBOAEUAUgAgAEoATwBJAE4AIABbAEQAYQB0AGEAXQAuAFsAUABlAHIA
cwBvAG4ALgBQAGUAcgBzAG8AbgBCAGkAbwBnAHIAYQBwAGgAaQBjAHMAXQAgAHAAYgAgAG8AbgAg
AHAAYgAuAFAAZQByAHMAbwBuAEkARAAgAD0AIAB0AHAALgBQAGUAcgBzAG8AbgBJAEQAIAAgAEwA
RQBGAFQAIABqAG8AaQBuACAAWwBEAGEAdABhAF0ALgBbAE0AaQBzAGMAZQBsAGwAYQBuAGUAbwB1
AHMALgBFAHkAZQBDAG8AbABvAHIAcwBdACAAYQBzACAAZQBjACAAbwBuACAAZQBjAC4ARQB5AGUA
QwBvAGwAbwByAEMAbwBkAGUAIAA9ACAAcABiAC4ARQB5AGUAQwBvAGwAbwByAEMAbwBkAGUAIABM
AEUARgBUACAAagBvAGkAbgAgAFsAZABhAHQAYQBdAC4AWwBNAGkAcwBjAGUAbABsAGEAbgBlAG8A
dQBzAC4ASABhAGkAcgBDAG8AbABvAHIAcwBdACAAYQBzACAAaABjACAAbwBuACAAaABjAC4ASABh
AGkAcgBDAG8AbABvAHIAQwBvAGQAZQAgAD0AIABwAGIALgBIAGEAaQByAEMAbwBsAG8AcgBDAG8A
ZABlACAATABFAEYAVAAgAGoAbwBpAG4AIABbAGQAYQB0AGEAXQAuAFsATQBpAHMAYwBlAGwAbABh
AG4AZQBvAHUAcwAuAFIAYQBjAGUAcwBdACAAYQBzACAAcgBhAGMAZQAgAG8AbgAgAHIAYQBjAGUA
LgBSAGEAYwBlAEMAbwBkAGUAIAA9ACAAcABiAC4AUgBhAGMAZQBDAG8AZABlACAAdwBoAGUAcgBl
ACAAVAByAGEAbgBzAGYAZQByAEkARAAgAD0AIAAAgIdTAGUAbABlAGMAdAAgACoAIABmAHIAbwBt
ACAAWwBEAGEAdABhAF0ALgBbAFAAZQByAHMAbwBuAC4AUABlAHIAcwBvAG4AQgBpAG8AZwByAGEA
cABoAGkAYwBzAF0AIAB3AGgAZQByAGUAIABFAG0AcABsAG8AeQBlAGUASQBEACAAPQAgAACH81MA
ZQBsAGUAYwB0ACAAdABvAHAAKAAxACkAIAAgACAAcABiAC4AcABlAHIAcwBvAG4AaQBkACwAcABp
AG4ALAAgAEYAaQByAHMAdABOAGEAbQBlACwAIABNAGkAZABkAGwAZQBOAGEAbQBlACwAIABMAGEA
cwB0AE4AYQBtAGUALAAgAEEAZABkAHIAZQBzAHMALAAgAEEAcABhAHIAdABtAGUAbgB0AE4AdQBt
AGIAZQByACwAIABDAGkAdAB5ACwAIABDAG8AdQBuAHQAcgB5AFMAdQBiAGQAaQB2AGkAcwBpAG8A
bgBDAG8AZABlACwAIABDAG8AdQBuAHQAcgB5AEMAbwBkAGUALAAgAFAAbwBzAHQAYQBsAEMAbwBk
AGUALAAgACAAIABXAG8AcgBrAFAAaABvAG4AZQBOAHUAbQBiAGUAcgAsACAARQBtAHAAbABvAHkA
ZQBlAEkARAAsACAARABhAHQAZQBPAGYAQgBpAHIAdABoACwAIABTAG8AYwBpAGEAbABTAGUAYwB1
AHIAaQB0AHkATgB1AG0AYgBlAHIALAAgAEgAZQBpAGcAaAB0AEkAbgBJAG4AYwBoAGUAcwAsACAA
VwBlAGkAZwBoAHQASQBuAFAAbwB1AG4AZABzACwAIABTAGUAeABDAG8AZABlACwAIABwAGIALgBF
AHkAZQBDAG8AbABvAHIAQwBvAGQAZQAsACAAcABiAC4ASABhAGkAcgBDAG8AbABvAHIAQwBvAGQA
ZQAsACAAcABiAC4AUgBhAGMAZQBDAG8AZABlACAALAAgAGUAYwAuAGUAeQBlAGMAbwBsAG8AcgBk
AGUAcwBjAHIAaQBwAHQAaQBvAG4ALAAgAGgAYwAuAEgAYQBpAHIAQwBvAGwAbwByAEQAZQBzAGMA
cgBpAHAAdABpAG8AbgAsACAAcgBhAGMAZQAuAFIAYQBjAGUARABlAHMAYwByAGkAcAB0AGkAbwBu
ACwAIABKAG8AYgBSAG8AbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAgACAAIABGAFIATwBNACAA
WwBEAGEAdABhAF0ALgBbAFAAZQByAHMAbwBuAC4AUABlAHIAcwBvAG4AQgBpAG8AZwByAGEAcABo
AGkAYwBzAF0AIABwAGIAIAAgAEwARQBGAFQAIABqAG8AaQBuACAAWwBEAGEAdABhAF0ALgBbAE0A
aQBzAGMAZQBsAGwAYQBuAGUAbwB1AHMALgBFAHkAZQBDAG8AbABvAHIAcwBdACAAYQBzACAAZQBj
ACAAbwBuACAAZQBjAC4ARQB5AGUAQwBvAGwAbwByAEMAbwBkAGUAIAA9ACAAcABiAC4ARQB5AGUA
QwBvAGwAbwByAEMAbwBkAGUAIABMAEUARgBUACAAagBvAGkAbgAgAFsAZABhAHQAYQBdAC4AWwBN
AGkAcwBjAGUAbABsAGEAbgBlAG8AdQBzAC4ASABhAGkAcgBDAG8AbABvAHIAcwBdACAAYQBzACAA
aABjACAAbwBuACAAaABjAC4ASABhAGkAcgBDAG8AbABvAHIAQwBvAGQAZQAgAD0AIABwAGIALgBI
AGEAaQByAEMAbwBsAG8AcgBDAG8AZABlACAATABFAEYAVAAgAGoAbwBpAG4AIABbAGQAYQB0AGEA
XQAuAFsATQBpAHMAYwBlAGwAbABhAG4AZQBvAHUAcwAuAFIAYQBjAGUAcwBdACAAYQBzACAAcgBh
AGMAZQAgAG8AbgAgAHIAYQBjAGUALgBSAGEAYwBlAEMAbwBkAGUAIAA9ACAAcABiAC4AUgBhAGMA
ZQBDAG8AZABlACAASQBOAE4ARQBSACAASgBvAGkAbgAgACAAIAAgACAAIAAgACAAIAAgACAAIABE
AGEAdABhAC4AWwBQAGUAcgBzAG8AbgAuAFAAZQByAHMAbwBuAEQAaQB2AGkAcwBpAG8AbgBYAHIA
ZQBmAF0AIABBAFMAIABQAFAARABYACAAIAAgACAAIAAgACAAIAAgACAAIABPAE4AIABwAGIALgBQ
AGUAcgBzAG8AbgBJAEQAIAA9ACAAUABQAEQAWAAuAFAAZQByAHMAbwBuAEkARAAgACAATABlAGYA
dAAgAEoATwBJAE4AIABbAEQAYQB0AGEAXQAuAFsAUABlAHIAcwBvAG4ALgBQAGUAcgBzAG8AbgBE
AGkAdgBpAHMAaQBvAG4ASgBvAGIAUgBvAGwAZQBYAHIAZQBmAF0AIABhAHMAIABwAGQAagAgAG8A
bgAgAHAAZABqAC4AUABlAHIAcwBvAG4ARABpAHYAaQBzAGkAbwBuAHgAUgBlAGYASQBEACAAPQAg
AFAAUABEAFgALgBQAGUAcgBzAG8AbgBEAGkAdgBpAHMAaQBvAG4AWABSAGUAZgBJAEQAIAAgAGwA
ZQBmAHQAIABqAG8AaQBuACAAWwBEAGEAdABhAF0ALgBbAFAAZQByAHMAbwBuAC4ASgBvAGIAUgBv
AGwAZQBzAF0AIABhAHMAIABwAGoAcgAgAG8AbgAgAHAAagByAC4AagBvAGIAcgBvAGwAZQBpAGQA
IAA9ACAAcABkAGoALgBKAG8AYgBSAG8AbABlAEkARAAgAFcASABFAFIARQAgACAAIAAgACAAIAAg
ACAAIABQAFAARABYAC4AUABlAHIAcwBvAG4ASQBEACAAPQAgAAAvIABhAG4AZAAgAFAAUABEAFgA
LgBEAGkAdgBpAHMAaQBvAG4ASQBEACAAPQAgAACAg1MAZQBsAGUAYwB0ACAAKgAgAGYAcgBvAG0A
IABbAEQAYQB0AGEAXQAuAFsAUABlAHIAcwBvAG4ALgBQAGUAcgBzAG8AbgBCAGkAbwBnAHIAYQBw
AGgAaQBjAHMAXQAgAHcAaABlAHIAZQAgAFAAZQByAHMAbwBuAEkARAAgAD0AIAAAB3AAaQBuAAAT
RgBpAHIAcwB0AE4AYQBtAGUAABVNAGkAZABkAGwAZQBOAGEAbQBlAAARTABhAHMAdABOAGEAbQBl
AAAPQQBkAGQAcgBlAHMAcwAAH0EAcABhAHIAdABtAGUAbgB0AE4AdQBtAGIAZQByAAAJQwBpAHQA
eQAALUMAbwB1AG4AdAByAHkAUwB1AGIAZABpAHYAaQBzAGkAbwBuAEMAbwBkAGUAABdDAG8AdQBu
AHQAcgB5AEMAbwBkAGUAABVQAG8AcwB0AGEAbABDAG8AZABlAAAfVwBvAHIAawBQAGgAbwBuAGUA
TgB1AG0AYgBlAHIAABVFAG0AcABsAG8AeQBlAGUASQBEAAAdSABlAGkAZwBoAHQASQBuAEkAbgBj
AGgAZQBzAAAZRQB5AGUAQwBvAGwAbwByAEMAbwBkAGUAABtIAGEAaQByAEMAbwBsAG8AcgBDAG8A
ZABlAAARUgBhAGMAZQBDAG8AZABlAAAnRQB5AGUAQwBvAGwAbwByAEQAZQBzAGMAcgBpAHAAdABp
AG8AbgAAKUgAYQBpAHIAQwBvAGwAbwByAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAH1IAYQBjAGUA
RABlAHMAYwByAGkAcAB0AGkAbwBuAAAlSgBvAGIAUgBvAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBv
AG4AAIklUwBFAEwARQBDAFQAIABDAFIARAAuAEQAbwBjAHUAbQBlAG4AdABJAEQALAAgACAAIAAg
AEMAUgBEAFQALgBEAG8AYwB1AG0AZQBuAHQAVAB5AHAAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4A
LAAgACAAIAAgAEMAUgBEAC4ASQBzAHMAdQBpAG4AZwBBAHUAdABoAG8AcgBpAHQAeQBfAEMAbwB1
AG4AdAByAHkAQwBvAGQAZQAsACAAIAAgACAAQwBSAEQALgBJAHMAcwB1AGkAbgBnAEEAdQB0AGgA
bwByAGkAdAB5AF8AQwBvAHUAbgB0AHIAeQBTAHUAYgBkAGkAdgBpAHMAaQBvAG4AQwBvAGQAZQAs
ACAAIAAgACAAQwBSAEQALgBJAGQAZQBuAHQAaQBmAGkAYwBhAHQAaQBvAG4ATgB1AG0AYgBlAHIA
LAAgACAAIAAgAEMAUgBEAC4ARQB4AHAAaQByAGEAdABpAG8AbgBEAGEAdABlACwAIAAgACAAIAAg
ACAAIAAgAFAAUABEAFgALgBEAGkAdgBpAHMAaQBvAG4ASQBEACAARgBSAE8ATQAgACAAIAAgACAA
IAAgACAAIABEAGEAdABhAC4AWwBQAGUAcgBzAG8AbgAuAFAAZQByAHMAbwBuAEIAaQBvAGcAcgBh
AHAAaABpAGMAcwBdACAAQQBTACAAUABQAEIAIAAgACAAIAAgACAAIABJAE4ATgBFAFIAIABKAG8A
aQBuACAAIAAgACAAIAAgACAAIAAgACAAIAAgAEQAYQB0AGEALgBbAFAAZQByAHMAbwBuAC4AUABl
AHIAcwBvAG4ARABpAHYAaQBzAGkAbwBuAFgAcgBlAGYAXQAgAEEAUwAgAFAAUABEAFgAIAAgACAA
IAAgACAAIAAgACAAIAAgAE8ATgAgAFAAUABCAC4AUABlAHIAcwBvAG4ASQBEACAAPQAgAFAAUABE
AFgALgBQAGUAcgBzAG8AbgBJAEQAIAAgAEkATgBOAEUAUgAgAEoAbwBpAG4AIAAgACAAIAAgACAA
IAAgACAAIAAgACAARABhAHQAYQAuAFsAQwBvAG0AbQBvAG4ALgBFAG4AdABpAHQAaQBlAHMAXQAg
AEEAUwAgAEMARQAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABPAE4AIABQAFAA
RABYAC4AUABlAHIAcwBvAG4ARABpAHYAaQBzAGkAbwBuAFgAcgBlAGYASQBEACAAPQAgAEMARQAu
AFAAZQByAHMAbwBuAEQAaQB2AGkAcwBpAG8AbgBYAHIAZQBmAEkARAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABBAE4ARAAgAEMARQAuAEUAbgB0AGkAdAB5
AFQAeQBwAGUAQwBvAGQAZQAgAD0AIAAnAFAARQBSAFMAJwAgAEkATgBOAEUAUgAgAEoAbwBpAG4A
IAAgACAAIAAgACAAIAAgACAAIAAgACAARABhAHQAYQAuAFsAQwBvAG0AbQBvAG4ALgBSAGUAcQB1
AGkAcgBlAG0AZQBuAHQALgBEAG8AYwB1AG0AZQBuAHQAcwBdACAAQQBTACAAQwBSAEQAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAATwBOACAAQwBFAC4ARQBuAHQAaQB0AHkASQBE
ACAAPQAgAEMAUgBEAC4ARQBuAHQAaQB0AHkASQBEACAAIAAgACAAIAAgACAAIABJAE4ATgBFAFIA
IABKAG8AaQBuACAARABhAHQAYQAuAFsAQwBvAG0AbQBvAG4ALgBSAGUAcQB1AGkAcgBlAG0AZQBu
AHQALgBEAG8AYwB1AG0AZQBuAHQAVAB5AHAAZQBzAF0AIABBAFMAIABDAFIARABUACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAATwBOACAAQwBSAEQALgBEAG8AYwB1AG0AZQBu
AHQAVAB5AHAAZQBOAHUAbQBiAGUAcgAgAD0AIABDAFIARABUAC4ARABvAGMAdQBtAGUAbgB0AFQA
eQBwAGUATgB1AG0AYgBlAHIAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAQQBOAEQAIABDAFIARABUAC4ARABvAGMAdQBtAGUAbgB0AFQAeQBwAGUARABlAHMA
YwByAGkAcAB0AGkAbwBuACAATABJAEsARQAgACcAQgAxAC4AIAAlACcAIAAgACAAIAAgACAAIAAg
AEkATgBOAEUAUgAgAEoAbwBpAG4AIAAgAEQAYQB0AGEALgBbAEMAbwBtAG0AbwBuAC4AUgBlAHEA
dQBpAHIAZQBtAGUAbgB0AC4ARABvAGMAdQBtAGUAbgB0AHMAUgBlAHEAdQBpAHIAZQBkAF0AIABB
AFMAIABDAFIARABSACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAE8ATgAgAEMA
UgBEAC4AUgBlAHEAdQBpAHIAZQBtAGUAbgB0AEMAbwBkAGUAIAA9ACAAQwBSAEQAUgAuAFIAZQBx
AHUAaQByAGUAbQBlAG4AdABDAG8AZABlACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAQQBOAEQAIABDAFIARABSAC4ARAByAG8AcABkAG8AdwBuAE4AYQBt
AGUAIAA9ACAAJwBQAFIASQBNAEEAUgBZACcAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAQQBOAEQAIABDAFIARAAuAEQAbwBjAHUAbQBlAG4AdABUAHkAcABl
AE4AdQBtAGIAZQByACAAPQAgAEMAUgBEAFIALgBEAG8AYwB1AG0AZQBuAHQAVAB5AHAAZQBOAHUA
bQBiAGUAcgAgAFcASABFAFIARQAgACAAIAAgACAAIAAgAFAAUABEAFgALgBQAGUAcgBzAG8AbgBJ
AEQAIAA9ACAAAR1FAHgAcABpAHIAYQB0AGkAbwBuAEQAYQB0AGUAAClJAGQAZQBuAHQAaQBmAGkA
YwBhAHQAaQBvAG4ATgB1AG0AYgBlAHIAAE9JAHMAcwB1AGkAbgBnAEEAdQB0AGgAbwByAGkAdAB5
AF8AQwBvAHUAbgB0AHIAeQBTAHUAYgBkAGkAdgBpAHMAaQBvAG4AQwBvAGQAZQAAgqVTAEUATABF
AEMAVAAgAHQAbwBwACgAMQApACAAdABkAC4AWwBEAGkAdgBpAHMAaQBvAG4ASQBEAF0ALAAgAGQA
LgBbAEQAaQB2AGkAcwBpAG8AbgBDAG8AZABlAF0ALAAgAGQALgBbAEQAaQB2AGkAcwBpAG8AbgBO
AGEAbQBlAF0ALAAgAGMALgBDAG8AbQBwAGEAbgB5AEkARAAsACAAYwAuAEMAbwBtAHAAYQBuAHkA
QwBvAGQAZQAsACAAYwAuAEMAbwByAHAAbwByAGEAdABpAG8AbgBOAGEAbQBlACAAIABGAFIATwBN
ACAAWwBEAGEAdABhAF0ALgBbAEEAYwBjAGUAcwBzAEMAbwBuAHQAcgBvAGwALgBUAHIAYQBuAHMA
ZgBlAHIARABpAHYAaQBzAGkAbwBuAHMAXQAgAHQAZAAgACAASQBOAE4ARQBSACAASgBPAEkATgAg
AFsARABhAHQAYQBdAC4AWwBEAGkAdgBpAHMAaQBvAG4ALgBEAGkAdgBpAHMAaQBvAG4AcwBdACAA
ZAAgAG8AbgAgAGQALgBbAEQAaQB2AGkAcwBpAG8AbgBJAEQAXQAgAD0AIAB0AGQALgBbAEQAaQB2
AGkAcwBpAG8AbgBJAEQAXQAgACAASQBOAE4ARQBSACAASgBPAEkATgAgAFsARABhAHQAYQBdAC4A
WwBDAG8AbQBwAGEAbgB5AC4AQwBvAG0AcABhAG4AaQBlAHMAXQAgAGMAIABvAG4AIABjAC4AWwBD
AG8AbQBwAGEAbgB5AEkARABdACAAPQAgAGQALgBbAEMAbwBtAHAAYQBuAHkASQBEAF0AIAAgAFcA
SABFAFIARQAgAHQAZAAuAFQAcgBhAG4AcwBmAGUAcgBJAEQAIAA9ACAAAIHtUwBFAEwARQBDAFQA
IAB0AG8AcAAoADEAKQAgAGQALgBbAEQAaQB2AGkAcwBpAG8AbgBJAEQAXQAsACAAZAAuAFsARABp
AHYAaQBzAGkAbwBuAEMAbwBkAGUAXQAsACAAZAAuAFsARABpAHYAaQBzAGkAbwBuAE4AYQBtAGUA
XQAsACAAYwAuAEMAbwBtAHAAYQBuAHkASQBEACwAIABjAC4AQwBvAG0AcABhAG4AeQBDAG8AZABl
ACwAIABjAC4AQwBvAHIAcABvAHIAYQB0AGkAbwBuAE4AYQBtAGUAIAAgAEYAUgBPAE0AIABbAEQA
YQB0AGEAXQAuAFsARABpAHYAaQBzAGkAbwBuAC4ARABpAHYAaQBzAGkAbwBuAHMAXQAgAGQAIAAg
AEkATgBOAEUAUgAgAEoATwBJAE4AIABbAEQAYQB0AGEAXQAuAFsAQwBvAG0AcABhAG4AeQAuAEMA
bwBtAHAAYQBuAGkAZQBzAF0AIABjACAAbwBuACAAYwAuAFsAQwBvAG0AcABhAG4AeQBJAEQAXQAg
AD0AIABkAC4AWwBDAG8AbQBwAGEAbgB5AEkARABdACAAIABXAEgARQBSAEUAIABkAC4AWwBEAGkA
dgBpAHMAaQBvAG4ASQBEAF0AIAA9ACAAABlEAGkAdgBpAHMAaQBvAG4AQwBvAGQAZQAAGUQAaQB2
AGkAcwBpAG8AbgBOAGEAbQBlAAATQwBvAG0AcABhAG4AeQBJAEQAABdDAG8AbQBwAGEAbgB5AEMA
bwBkAGUAAB9DAG8AcgBwAG8AcgBhAHQAaQBvAG4ATgBhAG0AZQAAAzkAAIDhVQBQAEQAQQBUAEUA
IABbAEQAYQB0AGEAXQAuAFsAQQBjAGMAZQBzAHMAQwBvAG4AdAByAG8AbAAuAFQAcgBhAG4AcwBm
AGUAcgBEAGkAdgBpAHMAaQBvAG4AcwBdACAAUwBlAHQAIABbAFcAaABlAG4AVAByAGEAbgBzAG0A
aQB0AHQAZQBkAF0APQBnAGUAdABEAGEAdABlACgAKQAgAFcASABFAFIARQAgAFsAVAByAGEAbgBz
AGYAZQByAEkARABdACAAPQAgAEAAVAByAGEAbgBzAGYAZQByAEkARAAAgJVGAGEAaQBsAGUAZAAg
AHQAbwAgAHUAcABkAGEAdABlACAAVAByAGEAbgBzAGYAZQByAEQAaQB2AGkAcwBpAG8AbgBzAC4A
VwBoAGUAbgBUAHIAYQBuAHMAbQBpAHQAdABlAGQAIABkAGEAdABlACAAZgBvAHIAIAB0AHIAYQBu
AHMAYQBjAHQAaQBvAG4ASQBEACAAAH1TAGUAbABlAGMAdAAgACoAIABmAHIAbwBtACAAVAByAGEA
bgBzAGYAZQByAF8AQwBhAHQAZQBnAG8AcgB5ACAAdwBoAGUAcgBlACAAdAByAGEAbgBzAGYAZQBy
AEkARAAgAD0AIABAAHQAcgBhAG4AcwBmAGUAcgBJAEQAABV0AHIAYQBuAHMAZgBlAHIASQBEAACA
kVUAUABEAEEAVABFACAAQwBhAHQAZQBnAG8AcgB5ACAAUwBFAFQAIABkAGUAcwBjAHIAaQBwAHQA
aQBvAG4APQA/ACwAbQBvAGQAaQBmAHkAXwBkAGEAdABlAD0APwAsAG0AbwBkAGkAZgB5AF8AdABp
AG0AZQA9AD8AIABXAEgARQBSAEUAIABpAGQAPQA/AAAXZABlAHMAYwByAGkAcAB0AGkAbwBuAAAN
ZABlAHMAYwByAHAAABdtAG8AZABpAGYAeQBfAGQAYQB0AGUAABdtAG8AZABpAGYAeQBfAHQAaQBt
AGUAAA1IAEgAbQBtAHMAcwAABWkAZAAAC0MAYQB0AEkARAAAgO9JAE4AUwBFAFIAVAAgAEkATgBU
AE8AIABDAGEAdABlAGcAbwByAHkAIAAoAGkAZAAsAGQAZQBzAGMAcgBpAHAAdABpAG8AbgAsAHAA
ZQByAG0AaQBzAHMAaQBvAG4AXwBnAHIAcAAsAG0AMgBtAHIAXwB0AHkAcABlACwAZgBhAGMAaQBs
AGkAdAB5ACwAbQBvAGQAaQBmAHkAXwBkAGEAdABlACwAbQBvAGQAaQBmAHkAXwB0AGkAbQBlACkA
IABWAEEATABVAEUAUwAgACgAPwAsAD8ALAAtADEALAAwACwAPwAsAD8ALAA/ACkAARFmAGEAYwBp
AGwAaQB0AHkAACtOAGUAdwAgAGMAYQB0AGUAZwBvAHIAeQAgAGMAcgBlAGEAdABlAGQAIAAAC0MA
YQB0AEkAZAAAOUMAYQB0AGUAZwBvAHIAeQAgAHIAZQBjAG8AcgBkACAAdQBwAGQAYQB0AGUAZAAu
ACAAaQBkAD0AAD9FAHgAYwBlAHAAdABpAG8AbgAgAGMAcgBlAGEAdABpAG4AZwAgAEMAYQB0AGUA
ZwBvAHIAeQAgAEkARAA9AAADOgAAgdFTAEUATABFAEMAVAAgAHAAYwAuAGkAZAAgAEkARAAsACAA
cABjAC4AYwBhAHQAZQBnAG8AcgB5AF8AaQBkACwAIABwAGMALgBzAGwAbwB0AF8AbgB1AG0AYgBl
AHIALAAgAHAALgBpAGQAIABwAGUAcgBzAG8AbgBfAGkAZAAgAGYAcgBvAG0AIABwAGUAcgBzAG8A
bgAgAHAAIABpAG4AbgBlAHIAIABqAG8AaQBuACAAZABlAHAAYQByAHQAbQBlAG4AdAAgAGQAIABv
AG4AIABwAC4AZABlAHAAYQByAHQAbQBlAG4AdAA9AGQALgBpAGQAIABsAGUAZgB0ACAAagBvAGkA
bgAgAHAAZQByAHMAbwBuAF8AYwBhAHQAZQBnAG8AcgB5ACAAcABjACAAbwBuACAAcABjAC4AcABl
AHIAcwBvAG4AXwBpAGQAPQBwAC4AaQBkACAAVwBoAGUAcgBlACAAcAAuAGUAbQBwAGwAbwB5AGUA
ZQA9AD8AIABhAG4AZAAgAGQALgBkAGkAdgBpAHMAaQBvAG4APQA/ACAATwByAGQAZQByACAAYgB5
ACAAcABjAC4AYwBhAHQAZQBnAG8AcgB5AF8AaQBkAAARZQBtAHAAbABvAHkAZQBlAAARZABpAHYA
aQBzAGkAbwBuAAATcABlAHIAcwBvAG4AXwBpAGQAABdjAGEAdABlAGcAbwByAHkAXwBpAGQAABdz
AGwAbwB0AF8AbgB1AG0AYgBlAHIAAH9EAEUATABFAFQARQAgAEYAcgBvAG0AIABwAGUAcgBzAG8A
bgBfAGMAYQB0AGUAZwBvAHIAeQAgAHcAaABlAHIAZQAgAHAAZQByAHMAbwBuAF8AaQBkAD0APwAg
AGEAbgBkACAAYwBhAHQAZQBnAG8AcgB5AF8AaQBkAD0APwAAVVAAZQByAHMAbwBuACAAQwBhAHQA
ZQBnAG8AcgB5ACAAewAwAH0AIABEAGUAbABlAHQAZQBkACAAZgBvAHIAIABwAGUAcgBzAG8AbgAg
AHsAMQB9AAADLgAAU1MARQBMAEUAQwBUACAATQBBAFgAKABJAEQAKQAgAE0AYQB4AEkARAAgAGYA
cgBvAG0AIABwAGUAcgBzAG8AbgBfAGMAYQB0AGUAZwBvAHIAeQAAgQFJAE4AUwBFAFIAVAAgAEkA
bgB0AG8AIABwAGUAcgBzAG8AbgBfAGMAYQB0AGUAZwBvAHIAeQAgACgAaQBkACwAIABwAGUAcgBz
AG8AbgBfAGkAZAAsACAAYwBhAHQAZQBnAG8AcgB5AF8AaQBkACwAIABzAGwAbwB0AF8AbgB1AG0A
YgBlAHIALAAgAGYAYQBjAGkAbABpAHQAeQAsACAAbQBvAGQAaQBmAHkAXwBkAGEAdABlACwAIABt
AG8AZABpAGYAeQBfAHQAaQBtAGUAKQAgAFYAQQBMAFUARQBTACAAKAA/ACwAPwAsAD8ALAA/ACwA
PwAsAD8ALAA/ACkAAICfQQBkAGQAaQBuAGcAIABQAGUAcgBzAG8AbgBfAEMAYQB0AGUAZwBvAHIA
eQAgAGkAZAA9AHsAMAB9ACwAIABwAGUAcgBzAG8AbgBfAGkAZAA9AHsAMQB9ACwAIABzAGwAbwB0
AF8AbgB1AG0AYgBlAHIAPQB7ADIAfQAsACAAYwBhAHQAZQBnAG8AcgB5AF8AaQBkAD0AewAzAH0A
IAAAYSoAKgAqACoAKgAgAFAAcgBvAGMAZQBzAHMAaQBuAGcAIABIAGEAdQBsAHQAZQBkACwAIABB
AEMAQQBNAFMAIABtAGUAcwBzAGEAZwBlACAAcQB1AGUAdQBlACAAPQAgAABbRgBhAGkAbABlAGQA
IAB0AG8AIABpAG4AcwBlAHIAdAAgAEMAYQB0AGUAZwBvAHIAeQAgAHsAMAB9ACAAZgBvAHIAIABw
AGUAcgBzAG8AbgAgAHsAMQB9ACAAAE9QAGUAcgBzAG8AbgAgAEMAYQB0AGUAZwBvAHIAeQAgAHsA
MAB9ACAAQQBkAGQAZQBkACAAdABvACAAcABlAHIAcwBvAG4AIAB7ADEAfQAAgRdVAFAARABBAFQA
RQAgAFQAcgBhAG4AcwBmAGUAcgBfAEIAYQBkAGcAZQBDAGEAdABlAGcAbwByAHkAIABTAGUAdAAg
AHQAcgBhAG4AcwBtAGkAcwBzAGkAbwBuAF8AZABhAHQAZQAgAD0AIABnAGUAdABEAGEAdABlACgA
KQAgAHcAaABlAHIAZQAgAHQAcgBhAG4AcwBmAGUAcgBJAEQAIAA9ACAAQAB0AHIAYQBuAHMAZgBl
AHIASQBkACAAQQBOAEQAIABjAGEAdABlAGcAbwByAHkAXwBpAGQAIAA9ACAAQABjAGEAdABJAEQA
IABBAE4ARAAgAGUAbQBwAF8AaQBkACAAPQAgAEAAZQBtAHAASQBkAAAVdAByAGEAbgBzAGYAZQBy
AEkAZAAAC2MAYQB0AEkARAAAC2UAbQBwAEkAZAAAa0UAeABjAGUAcAB0AGkAbwBuACAASQBuAHMA
ZQByAHQAaQBuAGcAIABDAGEAdABlAGcAbwByAHkAIAB7ADAAfQAgAGYAbwByACAAcABlAHIAcwBv
AG4AIAB7ADEAfQA6ACAAewAyAH0AIAAAgVNTAGUAbABlAGMAdAAgAGQAaQBzAHQAaQBuAGMAdAAg
AGUAbQBwAF8AaQBkACwAIABjAG8AXwBkAGkAdgAsACAAYwBhAHQAZQBnAG8AcgB5AF8AaQBkACAA
ZgByAG8AbQAgAFQAcgBhAG4AcwBmAGUAcgBfAEIAYQBkAGcAZQBDAGEAdABlAGcAbwByAHkAIAB3
AGgAZQByAGUAIAB0AHIAYQBuAHMAZgBlAHIASQBEACAAPQAgAEAAdAByAGEAbgBzAGYAZQByAEkA
RAAgAGEAbgBkACAAdAByAGEAbgBzAG0AaQBzAHMAaQBvAG4AXwBkAGEAdABlACAASQBTACAATgBV
AEwATAAgAG8AcgBkAGUAcgAgAGIAeQAgAGUAbQBwAF8AaQBkACwAIABjAG8AXwBkAGkAdgAsACAA
YwBhAHQAZQBnAG8AcgB5AF8AaQBkAAANZQBtAHAAXwBpAGQAAA1jAG8AXwBkAGkAdgAAF0MAYQB0
AGUAZwBvAHIAeQBfAEkARAAAR1MAZQBsAGUAYwB0ACAAYwBvAHUAbgB0ACgAZQBtAHAAbABvAHkA
ZQBlACkAIABhAHMAIABjAG4AdAAgAGYAcgBvAG0AIAAAMy4AcABlAHIAcwBvAG4AIAB3AGgAZQBy
AGUAIABlAG0AcABsAG8AeQBlAGUAIAA9ACAAAAM7AABxRQB4AGMAZQBwAHQAaQBvAG4AIABpAG4A
IABvAGIAdABhAGkAbgBpAG4AZwAgAHAAZQByAHMAbwBuACAAcgBlAGMAbwByAGQAIABjAG8AdQBu
AHQAIABmAG8AcgAgAEUAbQBwAGwAbwB5AGUAZQAgAAAPdQBwAGQAYQB0AGUAIAAAgaEuAHAAZQBy
AHMAbwBuACAAcwBlAHQAIABwAGkAbgA9AD8ALAAgAGYAaQByAHMAdABfAG4AYQBtAGUAPQA/ACwA
IABsAGEAcwB0AF8AbgBhAG0AZQA9AD8ALAAgAGkAbgBpAHQAaQBhAGwAcwA9AD8ALAAgAHQAaQB0
AGwAZQAgAD0APwAsACAAYQBkAGQAcgBlAHMAcwAxAD0APwAsACAAYQBkAGQAcgBlAHMAcwAyAD0A
PwAsACAAYQBkAGQAcgBlAHMAcwAzAD0APwAsACAAYQBkAGQAcgBlAHMAcwA0AD0APwAsACAAYQBk
AGQAcgBlAHMAcwA1AD0APwAsACAAcABoAG8AbgBlAD0APwAgACwAIABtAG8AZABpAGYAeQBfAGQA
YQB0AGUAPQA/ACAALABtAG8AZABpAGYAeQBfAHQAaQBtAGUAPQA/ACAAdwBoAGUAcgBlACAAcABl
AHIAcwBvAG4ALgBzAHQAYQB0AHUAcwAgAD0AIAAwACAAQQBuAGQAIABlAG0AcABsAG8AeQBlAGUA
IAA9ACAAPwA7AAAVZgBpAHIAcwB0AF8AbgBhAG0AZQAAE2wAYQBzAHQAXwBuAGEAbQBlAAARaQBu
AGkAdABpAGEAbABzAAALdABpAHQAbABlAAARYQBkAGQAcgBlAHMAcwAxAAARYQBkAGQAcgBlAHMA
cwAyAAARYQBkAGQAcgBlAHMAcwAzAAARYQBkAGQAcgBlAHMAcwA0AAARYQBkAGQAcgBlAHMAcwA1
AAALcABoAG8AbgBlAABnRQB4AGMAZQBwAHQAaQBvAG4AIABpAG4AIAB1AHAAZABhAHQAaQBuAGcA
IABwAGUAcgBzAG8AbgAgAHIAZQBjAG8AcgBkACAAZgBvAHIAIABFAG0AcABsAG8AeQBlAGUASQBE
ACAAACVJAG4AcwBlAHIAdABpAG4AZwAgAGQAaQB2AGkAcwBpAG8AbgAAH3MAZQBsAGUAYwB0ACAA
aQBkACAAZgByAG8AbQAgAAA9LgBkAGUAcABhAHIAdABtAGUAbgB0ACAAdwBoAGUAcgBlACAAZABp
AHYAaQBzAGkAbwBuACAAPQAgAD8AAA9VAFAARABBAFQARQAgAACBDy4AZABlAHAAYQByAHQAbQBl
AG4AdAAgACAAUwBFAFQAIABkAGUAcwBjAHIAaQBwAHQAaQBvAG4APQA/ACwAbABvAGMAYQB0AGkA
bwBuAD0APwAsAG0AYQBuAGEAZwBlAHIAPQA/ACwAcABoAG8AbgBlAD0APwAsAHUAcwBlAHIAMQA9
AD8ALAB1AHMAZQByADIAPQA/ACwAZgBhAGMAaQBsAGkAdAB5AD0APwAsACAAbQBvAGQAaQBmAHkA
XwBkAGEAdABlAD0APwAsACAAbQBvAGQAaQBmAHkAXwB0AGkAbQBlAD0APwAgACAAVwBIAEUAUgBF
ACAAZABpAHYAaQBzAGkAbwBuAD0APwA7AABbUABQACAARABlAHAAYQByAHQAbQBlAG4AdAAgAGEA
bAByAGUAYQBkAHkAIABlAHgAaQBzAHQAcwAgAGQAZQBwAGEAcgB0AG0AZQBuAHQALgBpAGQAIAA9
ACAAAAUsACAAABFsAG8AYwBhAHQAaQBvAG4AAA9tAGEAbgBhAGcAZQByAAALdQBzAGUAcgAxAAAL
dQBzAGUAcgAyAAB5VwBhAHIAbgBpAG4AZwA6ACAATgBvACAAcgBvAHcAcwAgAHUAcABkAGEAdABl
AGQAIABiAHkAIABVAHAAZABhAHQAZQAgAGQAZQBwAGEAcgB0AG0AZQBuAHQAIAA6ACAAZABlAHMA
YwByAGkAcAB0AGkAbwBuAD0AAENEAGUAcABhAHIAdABtAGUAbgB0ACAAVQBwAGQAYQB0AGUAZAAg
ADoAIABkAGUAcwBjAHIAaQBwAHQAaQBvAG4APQAAgINDAGEAcwBpAF8ARABlAHAAYQByAHQAbQBl
AG4AdAA6ACAARQB4AGMAZQBwAHQAaQBvAG4AIAB1AHAAZABhAHQAaQBuAGcAIABuAGUAdwAgAGQA
ZQBwAGEAcgB0AG0AZQBuAHQAIAA6ACAAZABlAHMAYwByAGkAcAB0AGkAbwBuAD0AAGFDAGEAcwBp
AF8ARABlAHAAYQByAHQAbQBlAG4AdAA6AEUAeABjAGUAcAB0AGkAbwBuACAAaQBuACAAUgBlAGEA
ZABpAG4AZwAgAGQAZQBwAGEAcgB0AG0AZQBuAHQAIAAAGUkATgBTAEUAUgBUACAASQBOAFQATwAg
AACBDS4AZABlAHAAYQByAHQAbQBlAG4AdAAgACgAZABlAHMAYwByAGkAcAB0AGkAbwBuACwAZABp
AHYAaQBzAGkAbwBuACwAbABvAGMAYQB0AGkAbwBuACwAbQBhAG4AYQBnAGUAcgAsAHAAaABvAG4A
ZQAsAHUAcwBlAHIAMQAsAHUAcwBlAHIAMgAsAGYAYQBjAGkAbABpAHQAeQAsACAAbQBvAGQAaQBm
AHkAXwBkAGEAdABlACwAIABtAG8AZABpAGYAeQBfAHQAaQBtAGUAKQAgAFYAQQBMAFUARQBTACAA
KAA/ACwAPwAsAD8ALAA/ACwAPwAsAD8ALAA/ACwAPwAsAD8ALAA/ACkAOwAAZVcAYQByAG4AaQBu
AGcAOgAgAEYAYQBpAGwAZQBkACAAdABvACAAYwByAGUAYQB0AGUAIABkAGUAcABhAHIAdABtAGUA
bgB0ADoAIABkAGUAcwBjAHIAaQBwAHQAaQBvAG4APQAASU4AZQB3ACAAZABlAHAAYQByAHQAbQBl
AG4AdAAgAGMAcgBlAGEAdABlAGQAOgAgAGQAZQBzAGMAcgBpAHAAdABpAG8AbgA9AACAgUMAYQBz
AGkAXwBEAGUAcABhAHIAdABtAGUAbgB0ADoAIABFAHgAYwBlAHAAdABpAG8AbgAgAGMAcgBlAGEA
dABpAG4AZwAgAG4AZQB3ACAAZABlAHAAYQByAHQAbQBlAG4AdAA6ACAAZABlAHMAYwByAGkAcAB0
AGkAbwBuAD0AAIMXUwBFAEwARQBDAFQAIABjAC4ARABCAEEATgBhAG0AZQAsACAAZAAuAEQAaQB2
AGkAcwBpAG8AbgBOAGEAbQBlACAARgBSAE8ATQAgAFsARABhAHQAYQBdAC4AWwBQAGUAcgBzAG8A
bgAuAFAAZQByAHMAbwBuAHMAXQAgAHAAIABJAE4ATgBFAFIAIABKAE8ASQBOACAAWwBEAGEAdABh
AF0ALgBbAFAAZQByAHMAbwBuAC4AUABlAHIAcwBvAG4ARABpAHYAaQBzAGkAbwBuAFgAcgBlAGYA
XQAgAHgAIABvAG4AIAB4AC4AWwBQAGUAcgBzAG8AbgBJAEQAXQAgAD0AIABwAC4AWwBQAGUAcgBz
AG8AbgBJAEQAXQAgACAASQBOAE4ARQBSACAASgBPAEkATgAgAFsARABhAHQAYQBdAC4AWwBQAGUA
cgBzAG8AbgAuAFAAZQByAHMAbwBuAEIAaQBvAGcAcgBhAHAAaABpAGMAcwBdACAAcABiACAAbwBu
ACAAcABiAC4AWwBQAGUAcgBzAG8AbgBJAEQAXQAgAD0AIAB4AC4AWwBQAGUAcgBzAG8AbgBJAEQA
XQAgACAASQBOAE4ARQBSACAASgBPAEkATgAgAFsARABhAHQAYQBdAC4AWwBEAGkAdgBpAHMAaQBv
AG4ALgBEAGkAdgBpAHMAaQBvAG4AcwBdACAAZAAgAG8AbgAgAGQALgBbAEQAaQB2AGkAcwBpAG8A
bgBJAEQAXQAgAD0AIAB4AC4AWwBEAGkAdgBpAHMAaQBvAG4ASQBEAF0AIAAgAEkATgBOAEUAUgAg
AEoATwBJAE4AIABbAEQAYQB0AGEAXQAuAFsAQwBvAG0AcABhAG4AeQAuAEMAbwBtAHAAYQBuAGkA
ZQBzAF0AIABjACAAbwBuACAAYwAuAFsAQwBvAG0AcABhAG4AeQBJAEQAXQAgAD0AIABkAC4AWwBD
AG8AbQBwAGEAbgB5AEkARABdACAAIABXAEgARQBSAEUAIABwAC4AUABlAHIAcwBvAG4ASQBEACAA
PQAgAAApIABhAG4AZAAgAHgALgBEAGkAdgBpAHMAaQBvAG4ASQBEACAAPQAgAAAPRABCAEEATgBh
AG0AZQAAgPtJAG4AcwBlAHIAdAAgAEkAbgB0AG8AIABwAGUAcgBzAG8AbgBfAHUAcwBlAHIAIAAo
AGkAZAAsACAAZABlAHMAYwByAGkAcAB0AGkAbwBuACwAIABwAGUAcgBzAG8AbgBfAGkAZAAsACAA
cwBsAG8AdABfAG4AdQBtAGIAZQByACwAIABmAGEAYwBpAGwAaQB0AHkALAAgAG0AbwBkAGkAZgB5
AF8AZABhAHQAZQAsACAAbQBvAGQAaQBmAHkAXwB0AGkAbQBlACkAIABWAEEATABVAEUAUwAgACgA
PwAsAD8ALAA/ACwAPwAsAD8ALAA/ACwAPwApADsAAEtTAEUATABFAEMAVAAgAE0AQQBYACgASQBE
ACkAIABNAGEAeABJAEQAIABmAHIAbwBtACAAcABlAHIAcwBvAG4AXwB1AHMAZQByAABrVQBwAGQA
YQB0AGkAbgBnACAAYwBvAG0AcABhAG4AeQAgAG4AYQBtAGUAIABhAG4AZAAgAGQAaQB2AGkAcwBp
AG8AbgAgAGYAbwByACAAdABoAGkAcwAgAHAAZQByAHMAbwBuAC4ALgAgAAAVUABQAGUAcgBzAG8A
bgBJAEQAPQAAgM9VAHAAZABhAHQAZQAgAHAAZQByAHMAbwBuAF8AdQBzAGUAcgAgAHMAZQB0ACAA
ZABlAHMAYwByAGkAcAB0AGkAbwBuAD0APwAsACAAbQBvAGQAaQBmAHkAXwBkAGEAdABlAD0APwAs
ACAAbQBvAGQAaQBmAHkAXwB0AGkAbQBlAD0APwAgAFcASABFAFIARQAgAHAAZQByAHMAbwBuAF8A
aQBkAD0APwAgAEEATgBEACAAcwBsAG8AdABfAG4AdQBtAGIAZQByAD0APwA7AAAfQwBvAG0AcABh
AG4AeQAgAFUAcABkAGEAdABlAGQAAE9FAHIAcgBvAHIAIABJAG4AcwBlAHIAdABpAG4AZwAgAGMA
bwBtAHAAYQBuAHkAIABuAGEAbQBlACAAdQBzAGUAcgAgAGQAYQB0AGEAIAAAIUQAaQB2AGkAcwBp
AG8AbgAgAFUAcABkAGEAdABlAGQAAFFFAHIAcgBvAHIAIABJAG4AcwBlAHIAdABpAG4AZwAgAEQA
aQB2AGkAcwBpAG8AbgAgAE4AYQBtAGUAIAB1AHMAZQByACAAZABhAHQAYQAgAABTRQByAHIAbwBy
ACAAdQBwAGQAYQB0AGkAbgBnACAAYwBvAG0AcABhAG4AeQAgAGEAbgBkACAAZABpAHYAaQBzAGkA
bwBuACAAZABhAHQAYQAgAAAdJwAgADoAIAAgAEwAZQBuAGcAdABoACAAPQAgAAEdRABpAHYAcwBp
AG8AbgAgAEwAbwBhAGQAZQBkAABXUwBFAEwARQBDAFQAIABpAGQAIABmAHIAbwBtACAAZABlAHAA
YQByAHQAbQBlAG4AdAAgAHcAaABlAHIAZQAgAGQAaQB2AGkAcwBpAG8AbgA9AD8AOwAAIUQAZQBw
AGEAcgB0AG0AZQBuAHQAIABpAGQAIAA9ACAAAIDJUABQACAARABlAHAAYQByAHQAbQBlAG4AdAAg
AGQAbwBlAHMAIABuAG8AdAAgAGUAeABpAHMAdAAgAGYAbwByACAAUABQACAARABpAHYAaQBzAGkA
bwBuACAAewAwAH0AIAB1AHMAaQBuAGcAIABCAE8AQQBBACAARABpAHYAaQBzAGkAbwBuAEkARAAg
AHsAMQB9AC4AIABJAG4AcwBlAHIAdABpAG4AZwAgAFAAUAAgAEQAZQBwAGEAcgB0AG0AZQBuAHQA
LgAAH1MARQBMAEUAQwBUACAAaQBkACAAZgByAG8AbQAgAABVLgBwAGUAcgBzAG8AbgAgAHcAaABl
AHIAZQAgAGUAbQBwAGwAbwB5AGUAZQA9AD8AIABhAG4AZAAgAGQAZQBwAGEAcgB0AG0AZQBuAHQA
PQA/ADsAAA9TAFEATAA6ACAAPQAgAAAVZABlAHAAYQByAHQAbQBlAG4AdAAAGWUAbQBwAGwAbwB5
AGUAZQA6ACAAPQAgAAAdZABlAHAAYQByAHQAbQBlAG4AdAA6ACAAPQAgAAAXUABlAHIAcwBvAG4A
SQBEACAAPQAgAACDzy4AcABlAHIAcwBvAG4AIAAoAHAAaQBuACwAIABzAHQAYQB0AHUAcwAsACAA
dAB5AHAAZQAsACAAcABlAHIAcwBvAG4AXwBrAHAAXwByAGUAcwBwACwAIABwAGUAcgBzAG8AbgBf
AHQAcgBhAGMAZQAsACAAcABlAHIAcwBvAG4AXwB0AHIAYQBjAGUAXwBhAGwAYQByAG0ALAAgAGUA
bQBwAGwAbwB5AGUAZQAsACAAZABlAHAAYQByAHQAbQBlAG4AdAAsACAAZgBpAHIAcwB0AF8AbgBh
AG0AZQAsAGwAYQBzAHQAXwBuAGEAbQBlACwAIABpAG4AaQB0AGkAYQBsAHMALAAgAHQAaQB0AGwA
ZQAsACAAYQBkAGQAcgBlAHMAcwAxACwAIABhAGQAZAByAGUAcwBzADIALAAgAGEAZABkAHIAZQBz
AHMAMwAsACAAYQBkAGQAcgBlAHMAcwA0ACwAYQBkAGQAcgBlAHMAcwA1ACwAIABwAGgAbwBuAGUA
LAAgAHAAaABvAG4AZQAyACwAIAAJAHIAZQBpAHMAcwB1AGUAXwBjAG4AdAAsACAAYQBwAGIALAAg
AHIAZQBhAGQAZQByACwAIABhAGMAYwBlAHMAcwBfAGQAYQB0AGUALABhAGMAYwBlAHMAcwBfAHQA
aQBtAGUALAAgAGEAYwBjAGUAcwBzAF8AdAB6ACwAIABhAGMAdABpAHYAZQBfAGQAYQB0AGUALAAg
AGEAYwB0AGkAdgBlAF8AdABpAG0AZQAsACAAYQBjAHQAaQB2AGUAXwBjAG8AbgB0AGUAeAB0ACwA
IABkAGUAYQBjAHQAaQB2AGUAXwBkAGEAdABlACwAIABkAGUAYQBjAHQAaQB2AGUAXwB0AGkAbQBl
ACwAIABkAGUAYQBjAHQAaQB2AGUAXwBjAG8AbgB0AGUAeAB0ACwAIABmAG8AcgBjAGUAXwBkAG8A
dwBuAGwAbwBhAGQALAAgAGYAYQBjAGkAbABpAHQAeQAsACAAbQBvAGQAaQBmAHkAXwBkAGEAdABl
ACwAIABtAG8AZABpAGYAeQBfAHQAaQBtAGUAKQAgAHYAYQBsAHUAZQBzACAAKAA/ACwAPwAsAD8A
LAA/ACwAPwAsAD8ALAA/ACwAPwAsAD8ALAA/ACwAPwAsAD8ALAA/ACwAPwAsAD8ALAA/ACwAPwAs
AD8ALAA/ACwAPwAsAD8ALAA/ACwAPwAsAD8ALAA/ACwAPwAsAD8ALAA/ACwAPwAsAD8ALAA/ACwA
PwAsAD8ALAA/ACwAPwApADsAAA1zAHQAYQB0AHUAcwAACXQAeQBwAGUAAB1wAGUAcgBzAG8AbgBf
AGsAcABfAHIAZQBzAHAAABlwAGUAcgBzAG8AbgBfAHQAcgBhAGMAZQAAJXAAZQByAHMAbwBuAF8A
dAByAGEAYwBlAF8AYQBsAGEAcgBtAAANcABoAG8AbgBlADIAABdyAGUAaQBzAHMAdQBlAF8AYwBu
AHQAAAdhAHAAYgAADXIAZQBhAGQAZQByAAAXYQBjAGMAZQBzAHMAXwBkAGEAdABlAAAXYQBjAGMA
ZQBzAHMAXwB0AGkAbQBlAAATYQBjAGMAZQBzAHMAXwB0AHoAABdhAGMAdABpAHYAZQBfAGQAYQB0
AGUAABdhAGMAdABpAHYAZQBfAHQAaQBtAGUAAB1hAGMAdABpAHYAZQBfAGMAbwBuAHQAZQB4AHQA
ABtkAGUAYQBjAHQAaQB2AGUAXwBkAGEAdABlAAAbZABlAGEAYwB0AGkAdgBlAF8AdABpAG0AZQAA
IWQAZQBhAGMAdABpAHYAZQBfAGMAbwBuAHQAZQB4AHQAAB1mAG8AcgBjAGUAXwBkAG8AdwBuAGwA
bwBhAGQAAB1QAGEAcgBhAG0AIABGAGEAaQBsAGUAZAA6ACAAADVQAGEAcgBhAG0AcwAgAGEAZABk
AGUAZAAgAHQAbwAgAHMAcQBsACAAaQBuAHMAZQByAHQAACtUAHIAeQBQAGEAcgBzAGUAIABGAGEA
aQBsAGUAZAAgAEEAZwBhAGkAbgAAWzAAIABSAG8AdwBzACAASQBuAHMAZQByAHQAZQBkACAAZgBv
AHIAIABOAGUAdwAgAFAAZQByAHMAbwBuAC4AIABFAG0AcABsAG8AeQBlAGUASQBEACAAPQAgAAAF
IAAtAAFDTgBlAHcAIABQAGUAcgBzAG8AbgAgAGMAcgBlAGEAdABlAGQALgAgAEUAbQBwAGwAbwB5
AGUAZQBJAEQAIAA9ACAAAAcgAC0AIAABD1UAcABkAGEAdABlACAAAIFjLgBwAGUAcgBzAG8AbgAg
AHMAZQB0ACAAZgBhAGMAaQBsAGkAdAB5ACAAPQAgAC0AMQAsACAAYQBwAGIAPQAwACwAYQBjAHQA
aQB2AGUAXwBkAGEAdABlAD0AMQA5ADcAMQAwADEAMAAxACwAIABhAGMAdABpAHYAZQBfAGMAbwBu
AHQAZQB4AHQAPQAxACwAIABkAGUAYQBjAHQAaQB2AGUAXwBjAG8AbgB0AGUAeAB0AD0AMQAsACAA
YQBjAHQAaQB2AGUAXwB0AGkAbQBlACAAPQAgADIAMwA1ADkANQA5ACwAIABkAGUAYQBjAHQAaQB2
AGUAXwBkAGEAdABlAD0AMgAwADIAMAAxADIAMwAxACwAIABkAGUAYQBjAHQAaQB2AGUAXwB0AGkA
bQBlAD0AMgAzADUAOQA1ADkAIAAgAHcAaABlAHIAZQAgAGUAbQBwAGwAbwB5AGUAZQA9ACcAASUn
ACAAYQBuAGQAIABkAGUAcABhAHIAdABtAGUAbgB0AD0AJwABV0UAcgByAG8AcgAgAHUAcABkAGEA
dABpAG4AZwAgAHAAZQByAHMAbwBuACAAcgBlAGMAbwByAGQALgAgAEUAbQBwAGwAbwB5AGUAZQBJ
AEQAIAA9ACAAAICBRQByAHIAbwByACAAdQBwAGQAYQB0AGkAbgBnACAAcABlAHIAcwBvAG4AIABj
AG8AbQBwAGEAbgB5ACAAYQBuAGQAIABkAGkAdgBpAHMAaQBvAG4AIAByAGUAYwBvAHIAZAAuACAA
RQBtAHAAbABvAHkAZQBlAEkARAAgAD0AIAAARUUAeABjAGUAcAB0AGkAbwBuACAAaQBuACAAaQBu
AHMAZQByAHQAaQBuAGcAIABQAGUAcgBzAG8AbgAuACAAIAA9ACAAAD1MAG8AYQBkAGkAbgBnACAA
cABlAHIAcwBvAG4AIABkAGkAdgBpAHMAaQBvAG4AIAByAGUAYwBvAHIAZAAATVAAZQByAHMAbwBu
ACAARABpAHYAaQBzAGkAbwBuACAATABvAGEAZABlAGQALAAgAEwAbwBhAGQAaQBuAGcAIABQAGUA
cgBzAG8AbgAAG1AAZQByAHMAbwBuACAATABvAGEAZABlAGQAAC9JAG4AcwBlAHIAdABpAG4AZwAg
AHAAZQByAHMAbwBuACAAcgBlAGMAbwByAGQAAC9QAGUAcgBzAG8AbgAgAEkAbgBzAGUAcgB0ACAA
cwB1AGMAYwBlAGUAZABlAGQAAIDtVQBQAEQAQQBUAEUAIABbAEQAYQB0AGEAXQAuAFsAQQBjAGMA
ZQBzAHMAQwBvAG4AdAByAG8AbAAuAFQAcgBhAG4AcwBmAGUAcgBQAGUAcgBzAG8AbgBEAGkAdgBp
AHMAaQBvAG4AcwBdACAAUwBlAHQAIABbAFcAaABlAG4AVAByAGEAbgBzAG0AaQB0AHQAZQBkAF0A
PQBnAGUAdABEAGEAdABlACgAKQAgAFcASABFAFIARQAgAFsAVAByAGEAbgBzAGYAZQByAEkARABd
ACAAPQAgAEAAVAByAGEAbgBzAGYAZQByAEkARAAAgKFGAGEAaQBsAGUAZAAgAHQAbwAgAHUAcABk
AGEAdABlACAAVAByAGEAbgBzAGYAZQByAFAAZQByAHMAbwBuAEQAaQB2AGkAcwBpAG8AbgBzAC4A
VwBoAGUAbgBUAHIAYQBuAHMAbQBpAHQAdABlAGQAIABkAGEAdABlACAAZgBvAHIAIAB0AHIAYQBu
AHMAYQBjAHQAaQBvAG4ASQBEACAAAIEfUwBlAGwAZQBjAHQAIABwAC4AaQBkACwAIABwAC4AZQBt
AHAAbABvAHkAZQBlACwAIABwAC4AcABpAG4ALAAgAHAALgBmAGkAcgBzAHQAXwBuAGEAbQBlACwA
IABwAC4AbABhAHMAdABfAG4AYQBtAGUALAAgAHAALgBpAG4AaQB0AGkAYQBsAHMALAAgAHAALgBz
AHQAYQB0AHUAcwAgACwAIABwAC4AZABlAHAAYQByAHQAbQBlAG4AdAAsACAARAAuAEQAaQB2AGkA
cwBpAG8AbgAgACwAIABwAC4AbQBvAGQAaQBmAHkAXwBkAGEAdABlACAALABwAC4AbQBvAGQAaQBm
AHkAXwB0AGkAbQBlACAAZgByAG8AbQAgAACAqS4AcABlAHIAcwBvAG4AIABwACAAIABsAGUAZgB0
ACAAbwB1AHQAZQByACAAagBvAGkAbgAgAGQAZQBwAGEAcgB0AG0AZQBuAHQAIABEACAAbwBuACAA
RAAuAGkAZAAgAD0AIABQAC4AZABlAHAAYQByAHQAbQBlAG4AdAAgACAAdwBoAGUAcgBlACAAcAAu
AGUAbQBwAGwAbwB5AGUAZQAgAD0AIAAnAAEpJwAgAGEAbgBkACAARAAuAGQAaQB2AGkAcwBpAG8A
bgAgAD0AIAAnAAEFJwA7AAEVSQBOAFMARQBSAFQAIABpAGQAOgAAFSAAZQBtAHAAbABvAHkAZQBl
ADoAAAsgAHAAaQBuADoAABkgAGYAaQByAHMAdABfAG4AYQBtAGUAOgAAFyAAbABhAHMAdABfAG4A
YQBtAGUAOgAAFSAAaQBuAGkAdABpAGEAbABzADoAABEgAHMAdABhAHQAdQBzADoAABkgAGQAZQBw
AGEAcgB0AG0AZQBuAHQAOgAAFSAAZABpAHYAaQBzAGkAbwBuADoAAGVFAHgAYwBlAHAAdABpAG8A
bgAgAGkAbgAgAG8AYgB0AGEAaQBuAGkAbgBnACAAcABlAHIAcwBvAG4AIAByAGUAYwBvAHIAZAAg
AGYAbwByACAARQBtAHAAbABvAHkAZQBlACAAAEVUAHIAYQBuAHMAZgBlAHIAaQBuAGcAIABiAGEA
ZABnAGUAcwAgAGYAbwByACAAdABoAGkAcwAgAHAAZQByAHMAbwBuAABdRQBYAEUAQwAgAFsAVQB0
AGkAbABpAHQAeQBdAC4AWwBUAHIAYQBuAHMAZgBlAHIAQgBhAGQAZwBlAGkAbgBQAFAAXQAgAEAA
VAByAGEAbgBzAGYAZQByAEkARAAAO1QAcgBhAG4AcwBmAGUAcgAgAGIAYQBkAGcAZQAgAHMAcABy
AG8AYwAgAGUAeABlAGMAdQB0AGUAZAAAG0UAbQBwAGwAbwB5AGUAZQAgAEkARAAgAD0AAAUuACAA
ACEgAFIAZQBjAG8AcgBkAHMAIABVAHAAZABhAHQAZQBkAACA3VUAUABEAEEAVABFACAAWwBEAGEA
dABhAF0ALgBbAEEAYwBjAGUAcwBzAEMAbwBuAHQAcgBvAGwALgBUAHIAYQBuAHMAZgBlAHIAUABl
AHIAcwBvAG4AcwBdACAAUwBlAHQAIABbAFcAaABlAG4AVAByAGEAbgBzAG0AaQB0AHQAZQBkAF0A
PQBnAGUAdABEAGEAdABlACgAKQAgAFcASABFAFIARQAgAFsAVAByAGEAbgBzAGYAZQByAEkARABd
ACAAPQAgAEAAVAByAGEAbgBzAGYAZQByAEkARAAAgJFGAGEAaQBsAGUAZAAgAHQAbwAgAHUAcABk
AGEAdABlACAAVAByAGEAbgBzAGYAZQByAFAAZQByAHMAbwBuAHMALgBXAGgAZQBuAFQAcgBhAG4A
cwBtAGkAdAB0AGUAZAAgAGQAYQB0AGUAIABmAG8AcgAgAHQAcgBhAG4AcwBhAGMAdABpAG8AbgBJ
AEQAIAAAFVUAUABEAEEAVABFACAAaQBkADoAAE1TAGUAbABlAGMAdAAgAGkAZAAgAGYAcgBvAG0A
IABwAGUAcgBzAG8AbgAgAHcAaABlAHIAZQAgAGUAbQBwAGwAbwB5AGUAZQA9AD8AAGFGAGEAaQBs
AGUAZAAgAHQAbwAgAHIAZQB0AHIAaQBlAHYAZQAgAEkAbgBzAGUAcgB0AGUAZAAgAFAAZQByAHMA
bwBuACAALgAgAEUAbQBwAGwAbwB5AGUAZQBJAEQAIAAALUwAYQB3ACAAZgBsAGEAZwAgAHMAZQB0
ACAAaQBuACAAaQBuAHMAZQByAHQAAG9zAGUAdAB0AGkAbgBnACAAdQBzAGUAcgAgAHYAYQBsAHUA
ZQAgAEUAbQBwAGwAbwB5AGUAZQBJAGQAPQB7ADAAfQAsACAAcwBsAG8AdAA9AHsAMQB9ACwAIAB2
AGEAbAB1AGUAPQB7ADIAfQAgAACAkUUAeABjAGUAcAB0AGkAbwBuACAAaQBuACAAcwBlAHQAdABp
AG4AZwAgAHUAcwBlAHIAIAB2AGEAbAB1AGUAIABFAG0AcABsAG8AeQBlAGUASQBkAD0AewAwAH0A
LAAgAHMAbABvAHQAPQB7ADEAfQAsACAAdgBhAGwAdQBlAD0AewAyAH0AOgB7ADMAfQAgAAAlRwBl
AHQAdABpAG4AZwAgAHYAYQBsAHUAZQAgAGYAbwByACAAAE9zAGUAdAB0AGkAbgBnACAAdQBzAGUA
cgAgAHYAYQBsAHUAZQAgACAAcwBsAG8AdAA9AHsAMAB9ACwAIAB2AGEAbAB1AGUAPQB7ADEAfQAA
gRMuAGIAYQBkAGcAZQAgAHMAZQB0ACAAZABlAHMAYwByAGkAcAB0AGkAbwBuAD0APwAsACAAcABl
AHIAcwBvAG4AXwBpAGQAPQA/ACwAIAByAGUAdAB1AHIAbgBfAGQAYQB0AGUAPQAgAD8ALAAgAHIA
ZQB0AHUAcgBuAF8AdABpAG0AZQA9ACAAPwAsAHIAZQB0AHUAcgBuAF8AdAB6AD0AIAA/ACwAcwB0
AGEAdAB1AHMAPQA/ACwAIABtAG8AZABpAGYAeQBfAGQAYQB0AGUAPQAgAD8ALAAgAG0AbwBkAGkA
ZgB5AF8AdABpAG0AZQA9ACAAPwAgAHcAaABlAHIAZQAgAGIAaQBkACAAPQAgAD8AABdyAGUAdAB1
AHIAbgBfAGQAYQB0AGUAABdyAGUAdAB1AHIAbgBfAHQAaQBtAGUAABNyAGUAdAB1AHIAbgBfAHQA
egAAB2IAaQBkAAA/RgBhAGkAbABlAGQAIAB0AG8AIABVAHAAZABhAHQAZQAgAGIAYQBkAGcAZQAg
AG4AdQBtAGIAZQByAD0AIAAAEywAIABTAHQAYQB0AHUAcwA9AAAtVQBwAGQAYQB0AGUAZAAgAGIA
YQBkAGcAZQAgAG4AdQBtAGIAZQByAD0AIAAAQUUAeABjAGUAcAB0AGkAbwBuACAAdQBwAGQAYQB0
AGkAbgBnACAAYgBhAGQAZwBlACAAbgB1AG0AYgBlAHIAPQAAg3UuAGIAYQBkAGcAZQAgACgAZABl
AHMAYwByAGkAcAB0AGkAbwBuACwAIABiAGkAZAAsACAAcwB0AGEAdAB1AHMALAAgAGIAYQBkAGcA
ZQBfAHQAbwB1AHIALAAgAGIAYQBkAGcAZQBfAHQAZQBtAHAALAAgAHAAZQByAHMAbwBuAF8AaQBk
ACwAIAByAGUAYQBkAGUAcgAsACAAYQBjAGMAZQBzAHMAXwBkAGEAdABlACwAIABhAGMAYwBlAHMA
cwBfAHQAaQBtAGUALAAgAGEAYwBjAGUAcwBzAF8AdAB6ACwAIABpAHMAcwB1AGUAXwBkAGEAdABl
ACwAIABpAHMAcwB1AGUAXwB0AGkAbQBlACwAaQBzAHMAdQBlAF8AYwBvAG4AdABlAHgAdAAsACAA
ZQB4AHAAaQByAGUAZABfAGQAYQB0AGUALAAgAGUAeABwAGkAcgBlAGQAXwB0AGkAbQBlACwAZQB4
AHAAaQByAGUAZABfAGMAbwBuAHQAZQB4AHQALAAgAHIAZQB0AHUAcgBuAF8AZABhAHQAZQAsACAA
cgBlAHQAdQByAG4AXwB0AGkAbQBlACwAcgBlAHQAdQByAG4AXwB0AHoALAAgAHUAcwBhAGcAZQBf
AGMAbwB1AG4AdAAsAHUAcwBhAGcAZQBfAGUAeABoAGEAdQBzAHQAZQBkACwAIAB0AG8AdQByAF8A
YgBhAGQAZwBlACwAIABiAGkAZABfAGYAbwByAG0AYQB0AF8AaQBkACwAIAByAGUAaQBzAHMAdQBl
AF8AYwBuAHQALAByAGUAcAByAGkAbgB0AF8AYwBuAHQALAAgAHUAbgBpAHEAdQBlAF8AaQBkACwA
IABiAGEAZABnAGUAXwBkAGUAcwBpAGcAbgAsACAAZgBhAGMAaQBsAGkAdAB5ACwAIABtAG8AZABp
AGYAeQBfAGQAYQB0AGUALAAgAG0AbwBkAGkAZgB5AF8AdABpAG0AZQApACAAdgBhAGwAdQBlAHMA
IAAoAD8ALAA/ACwAPwAsAD8ALAA/ACwAPwAsAD8ALAA/ACwAPwAsAD8ALAA/ACwAPwAsAD8ALAA/
ACwAPwAsAD8ALAA/ACwAPwAsAD8ALAA/ACwAPwAsAD8ALAA/ACwAPwAsAD8ALAA/ACwAPwAsAD8A
LAA/ACwAPwApAACCXS4AYgBhAGQAZwBlACAAKABkAGUAcwBjAHIAaQBwAHQAaQBvAG4ALAAgAGIA
aQBkACwAIABzAHQAYQB0AHUAcwAsACAAcABlAHIAcwBvAG4AXwBpAGQALAAgAGkAcwBzAHUAZQBf
AGQAYQB0AGUALAAgAGkAcwBzAHUAZQBfAHQAaQBtAGUALAAgAGkAcwBzAHUAZQBfAGMAbwBuAHQA
ZQB4AHQALAAgAGUAeABwAGkAcgBlAGQAXwBkAGEAdABlACwAIABlAHgAcABpAHIAZQBkAF8AdABp
AG0AZQAsACAAZQB4AHAAaQByAGUAZABfAGMAbwBuAHQAZQB4AHQALAAgAHIAZQB0AHUAcgBuAF8A
ZABhAHQAZQAsACAAcgBlAHQAdQByAG4AXwB0AGkAbQBlACwAIAByAGUAdAB1AHIAbgBfAHQAegAs
ACAAYgBpAGQAXwBmAG8AcgBtAGEAdABfAGkAZAAsACAAcgBlAGkAcwBzAHUAZQBfAGMAbgB0ACwA
IAByAGUAcAByAGkAbgB0AF8AYwBuAHQALAAgAHUAbgBpAHEAdQBlAF8AaQBkACwAIABmAGEAYwBp
AGwAaQB0AHkALAAgAG0AbwBkAGkAZgB5AF8AZABhAHQAZQAsACAAbQBvAGQAaQBmAHkAXwB0AGkA
bQBlACkAIAB2AGEAbAB1AGUAcwAgACgAPwAsAD8ALAA/ACwAPwAsAD8ALAA/ACwAPwAsAD8ALAA/
ACwAPwAsAD8ALAA/ACwAPwAsAD8ALAA/ACwAPwAsAD8ALAA/ACwAPwAsAD8AKQAAFWkAcwBzAHUA
ZQBfAGQAYQB0AGUAABVpAHMAcwB1AGUAXwB0AGkAbQBlAAAbaQBzAHMAdQBlAF8AYwBvAG4AdABl
AHgAdAAAGWUAeABwAGkAcgBlAGQAXwBkAGEAdABlAAAZZQB4AHAAaQByAGUAZABfAHQAaQBtAGUA
AB9lAHgAcABpAHIAZQBkAF8AYwBvAG4AdABlAHgAdAAAG2IAaQBkAF8AZgBvAHIAbQBhAHQAXwBp
AGQAAAswADAAMQAwADEAAAUwADAAABdyAGUAcAByAGkAbgB0AF8AYwBuAHQAABN1AG4AaQBxAHUA
ZQBfAGkAZAAAN0YAYQBpAGwAZQBkACAAdABvACAAYwByAGUAYQB0AGUAIABuAGUAdwAgAGIAYQBk
AGcAZQAgAAAlQwByAGUAYQB0AGUAZAAgAG4AZQB3ACAAYgBhAGQAZwBlACAAADtFAHgAYwBlAHAA
dABpAG8AbgAgAGkAbgAgAGkAbgBzAGUAcgB0AGkAbgBnACAAYgBhAGQAZwBlACAAAHdCAGUAZwBp
AG4AIAB1AHAAZABhAHQAZQAgAG8AZgAgAG0AbwBkAGkAZgB5ACAAZABhAHQAZQAvAG0AbwBkAGkA
ZgB5ACAAdABpAG0AZQAgAGYAbwByACAAVAByAGEAbgBzAGEAYwB0AGkAbwBuACAASQBEACAAAGtb
AFUAdABpAGwAaQB0AHkAXQAuAFsAUABQAF8AUABlAHIAcwBvAG4AXwBNAG8AZABpAGYAeQBEAGEA
dABlAFQAaQBtAGUARgByAG8AbQBCAGEAZABnAGUAVAByAGEAbgBzAGYAZQByAF0AABdAAFQAcgBh
AG4AcwBmAGUAcgBJAEQAAHFOAG8AIABkAGEAdABhACAAcgBlAHQAdQByAG4AZQBkACAAZgByAG8A
bQAgAG0AbwBkAGkAZgB5ACAAZABhAHQAZQAvAHQAaQBtAGUAIABzAHQAbwByAGUAZAAgAHAAcgBv
AGMAZQBkAHUAcgBlACEAABNCAGEAZABnAGUASQBEADoAIAAAG0IAYQBkAGcAZQBOAHUAbQBiAGUA
cgA6ACAAABlQAHIAbwB4AE4AdQBtAGIAZQByADoAIAAAFVAAcgBvAHgATgB1AG0AYgBlAHIAABlD
AGEAcgBkAE4AdQBtAGIAZQByADoAIAAAGUUAbQBwAGwAbwB5AGUAZQBJAEQAOgAgAAAdUABQACAA
UABlAHIAcwBvAG4AIABJAEQAOgAgAAAfUABQAF8AUABlAHIAcwBvAG4ASQBEAF8AQwBTAFYAACNQ
AFAAIABTAGUAbABlAGMAdAAgAFEAdQBlAHIAeQA6ACAAAB9QAFAAXwBRAHUAZQByAHkAXwBTAGUA
bABlAGMAdAAAI1AAUAAgAFUAcABkAGEAdABlACAAUQB1AGUAcgB5ADoAIAAAH1AAUABfAFEAdQBl
AHIAeQBfAFUAcABkAGEAdABlAAArUABlAHIAcwBvAG4AIABSAG8AdwBzACAAVQBwAGQAYQB0AGUA
ZAA6ACAAABdQAGUAcgBzAG8AbgBDAG8AdQBuAHQAAFlOAG8AIABwAGUAcgBzAG8AbgAgAHcAYQBz
ACAAZgBvAHUAbgBkACAAaQBuACAAQQBDAEEATQBTACAAZgBvAHIAIAB0AGgAaQBzACAAYgBhAGQA
ZwBlACEAAICNRQB4AGMAZQBwAHQAaQBvAG4AIAB3AGgAZQBuACAAYQB0AHQAZQBtAHAAdABpAG4A
ZwAgAHUAcABkAGEAdABlACAAbwBmACAAbQBvAGQAaQBmAHkAIABkAGEAdABlAC8AbQBvAGQAaQBm
AHkAIAB0AGkAbQBlACAAaQBuACAAQQBDAEEATQBTADoAIAAAc0UAbgBkACAAdQBwAGQAYQB0AGUA
IABvAGYAIABtAG8AZABpAGYAeQAgAGQAYQB0AGUALwBtAG8AZABpAGYAeQAgAHQAaQBtAGUAIABm
AG8AcgAgAFQAcgBhAG4AcwBhAGMAdABpAG8AbgAgAEkARAAgAACGnVMARQBMAEUAQwBUACAAdABv
AHAAKAAxACkAIABwAGIALgBbAEUAbQBwAGwAbwB5AGUAZQBJAEQAXQAsAHAAYgAuAFsAUABlAHIA
cwBvAG4ASQBEAF0ALAAgAHgALgBbAFMAVABBAEUAbQBwAGwAbwB5AGUAZQBTAHQAYQB0AHUAcwBJ
AEQAXQAsACAAIABkAC4AWwBEAGkAdgBpAHMAaQBvAG4ASQBEAF0ALAAgAGQALgBbAEQAaQB2AGkA
cwBpAG8AbgBDAG8AZABlAF0ALAAgAGQALgBbAEQAaQB2AGkAcwBpAG8AbgBOAGEAbQBlAF0ALAAg
AGMALgBbAEMAbwBtAHAAYQBuAHkASQBEAF0ALAAgAGMALgBbAEMAbwBtAHAAYQBuAHkAQwBvAGQA
ZQBdACwAIABjAC4AWwBDAG8AcgBwAG8AcgBhAHQAaQBvAG4ATgBhAG0AZQBdACwAIAAgAGIALgBb
AEIAYQBkAGcAZQBJAEQAXQAsACAAYgAuAFsAQgBhAGQAZwBlAE4AdQBtAGIAZQByAF0ALAAgAGIA
LgBbAEIAYQBkAGcAZQBDAG8AbABvAHIASQBEAF0ALAAgAGIALgBbAEMAYQByAGQATgB1AG0AYgBl
AHIAXQAsACAAYgAuAFsAVwBoAGUAbgBCAGUAYwBvAG0AZQBzAEEAYwB0AGkAdgBlAF0ALAAgAGIA
LgBXAGgAZQBuAEUAeABwAGkAcgBlAHMAIAAsACAAYgBjAC4AQgBhAGQAZwBlAEMAbwBsAG8AcgAg
AEYAUgBPAE0AIABbAEQAYQB0AGEAXQAuAFsAQQBjAGMAZQBzAHMAQwBvAG4AdAByAG8AbAAuAFQA
cgBhAG4AcwBmAGUAcgBCAGEAZABnAGUAcwBdACAAdABiACAAIABJAE4ATgBFAFIAIABKAE8ASQBO
ACAAWwBEAGEAdABhAF0ALgBbAFAAZQByAHMAbwBuAC4AQgBhAGQAZwBlAHMAXQAgAGIAIABvAG4A
IABiAC4AWwBCAGEAZABnAGUASQBEAF0AIAA9ACAAdABiAC4AWwBCAGEAZABnAGUASQBEAF0AIAAg
AEkATgBOAEUAUgAgAEoATwBJAE4AIABbAEQAYQB0AGEAXQAuAFsAUABlAHIAcwBvAG4ALgBQAGUA
cgBzAG8AbgBEAGkAdgBpAHMAaQBvAG4AWAByAGUAZgBdACAAeAAgAG8AbgAgAGIALgBbAFAAZQBy
AHMAbwBuAEQAaQB2AGkAcwBpAG8AbgBYAHIAZQBmAEkARABdACAAPQAgAHgALgBbAFAAZQByAHMA
bwBuAEQAaQB2AGkAcwBpAG8AbgBYAHIAZQBmAEkARABdACAAIABJAE4ATgBFAFIAIABKAE8ASQBO
ACAAWwBEAGEAdABhAF0ALgBbAFAAZQByAHMAbwBuAC4AUABlAHIAcwBvAG4AQgBpAG8AZwByAGEA
cABoAGkAYwBzAF0AIABwAGIAIABvAG4AIABwAGIALgBbAFAAZQByAHMAbwBuAEkARABdACAAPQAg
AHgALgBbAFAAZQByAHMAbwBuAEkARABdACAAIABJAE4ATgBFAFIAIABKAE8ASQBOACAAWwBEAGEA
dABhAF0ALgBbAEQAaQB2AGkAcwBpAG8AbgAuAEQAaQB2AGkAcwBpAG8AbgBzAF0AIABkACAAbwBu
ACAAZAAuAFsARABpAHYAaQBzAGkAbwBuAEkARABdACAAPQAgAHgALgBbAEQAaQB2AGkAcwBpAG8A
bgBJAEQAXQAgACAASQBOAE4ARQBSACAASgBPAEkATgAgAFsARABhAHQAYQBdAC4AWwBDAG8AbQBw
AGEAbgB5AC4AQwBvAG0AcABhAG4AaQBlAHMAXQAgAGMAIABvAG4AIABjAC4AWwBDAG8AbQBwAGEA
bgB5AEkARABdACAAPQAgAGQALgBbAEMAbwBtAHAAYQBuAHkASQBEAF0AIAAgAEkATgBOAEUAUgAg
AEoATwBJAE4AIABbAEQAYQB0AGEAXQAuAFsARgBhAGMAaQBsAGkAdAB5AC4AQgBhAGQAZwBlAEMA
bwBsAG8AcgBzAF0AIABiAGMAIABvAG4AIABiAGMALgBCAGEAZABnAGUAQwBvAGwAbwByAEkARAAg
AD0AIABiAC4AQgBhAGQAZwBlAEMAbwBsAG8AcgBJAEQAIABXAEgARQBSAEUAIAB0AGIALgBUAHIA
YQBuAHMAZgBlAHIASQBEACAAPQAgAAAnUwBUAEEARQBtAHAAbABvAHkAZQBlAFMAdABhAHQAdQBz
AEkARAAAFUQAaQB2AGkAcwBpAG8AbgBJAGQAABlCAGEAZABnAGUAQwBvAGwAbwByAEkARAAAI1cA
aABlAG4AQgBlAGMAbwBtAGUAcwBBAGMAdABpAHYAZQAAF1cAaABlAG4ARQB4AHAAaQByAGUAcwAA
FUIAYQBkAGcAZQBDAG8AbABvAHIAABtCAGEAZABnAGUAIABGAGUAdABjAGgAZQBkAACCT1MARQBM
AEUAQwBUACAASQBjAG8AbgBBAGIAYgByAGUAdgBpAGEAdABpAG8AbgAgAGYAcgBvAG0AIAAgAFsA
RABhAHQAYQBdAC4AWwBBAGMAYwBlAHMAcwBDAG8AbgB0AHIAbwBsAC4AVAByAGEAbgBzAGYAZQBy
AEIAYQBkAGcAZQBzAF0AIAB0AGIAIABJAE4ATgBFAFIAIABKAE8ASQBOACAAWwBEAGEAdABhAF0A
LgBbAFAAZQByAHMAbwBuAC4AQgBhAGQAZwBlAHMAXQAgAGIAIABvAG4AIABiAC4AWwBCAGEAZABn
AGUASQBEAF0AIAA9ACAAdABiAC4AWwBCAGEAZABnAGUASQBEAF0AIABJAG4AbgBlAHIAIABKAE8A
SQBOACAAWwBEAGEAdABhAF0ALgBbAFAAZQByAHMAbwBuAC4AQgBhAGQAZwBlAEkAYwBvAG4AUABl
AHIAaQBvAGQAcwBdACAAYgBpAHAAIABvAG4AIABiAGkAcAAuAEIAYQBkAGcAZQBJAEQAIAA9ACAA
YgAuAEIAYQBkAGcAZQBJAEQAIABJAE4ATgBFAFIAIABKAE8ASQBOACAAWwBEAGEAdABhAF0ALgBb
AEkAYwBvAG4ALgBJAGMAbwBuAHMAXQAgAGkAYwAgAG8AbgAgAGkAYwAuAEkAYwBvAG4ASQBEACAA
PQAgAGIAaQBwAC4ASQBjAG8AbgBJAEQAIAAgAFcASABFAFIARQAgAHQAYgAuAFQAcgBhAG4AcwBm
AGUAcgBJAEQAIAA9ACAAAC9hAG4AZAAgAEkAYwBvAG4AQQBiAGIAcgBlAHYAaQBhAHQAaQBvAG4A
IAA9ACAAAAsnAEEAVABDACcAAQNZAAADTgAADScAQQBQAEQAUAAnAAERJwBMAEUATwAtAFcAUwAn
AAETJwBDAEIAUAAtAFIARQBEACcAAQdSAEUARAAAEycAQwBCAFAALQBCAEwASwAnAAELQgBMAEEA
QwBLAAAJTgBPAE4ARQAAFScARABSAFYAUgAtAEcAUgBOACcAASVCAGEAZABnAGUAIABpAGMAbwBu
AHMAIABsAG8AYQBkAGUAZAAAgItQAGUAcgBzAG8AbgAgAEQAaQB2AGkAcwBpAG8AbgAgAGQAbwBl
AHMAIABuAG8AdAAgAGUAeABpAHMAdAAgAHcAaABpAGwAZQAgAHQAcgB5AGkAbgBnACAAdABvACAA
dQBwAGQAYQB0AGUAIABiAGEAZABnAGUAIAB1AHMAZQByACAAZABhAHQAYQAAWUIAYQBkAGcAZQAg
AGUAeABpAHMAdABzACwAIAAgAHUAcABkAGEAdABpAG4AZwAgAGIAYQBkAGcAZQAgAGEAdAB0AHIA
aQBiAHUAdABlACAAZABhAHQAYQAAgKtGAGEAaQBsAGUAZAAgAHQAbwAgAHUAcABkAGEAdABlACAA
VAByAGEAbgBzAGYAZQByAEIAYQBkAGcAZQBzAC4AVwBoAGUAbgBUAHIAYQBuAHMAbQBpAHQAdABl
AGQAIABkAGEAdABlACAAZgBvAHIAIABCAGEAZABnAGUAcwAgAHUAcABkAGEAdABlACAAdAByAGEA
bgBzAGEAYwB0AGkAbwBuAEkARAAgAACA21MARQBMAEUAQwBUACAAcAAuAGkAZAAgAGkAZAAgAEYA
UgBPAE0AIABQAGUAcgBzAG8AbgAgAHAAIABJAG4AbgBlAHIAIABKAG8AaQBuACAARABlAHAAYQBy
AHQAbQBlAG4AdAAgAGQAIABvAG4AIABwAC4AZABlAHAAYQByAHQAbQBlAG4AdAA9AGQALgBpAGQA
IABXAGgAZQByAGUAIABwAC4ARQBtAHAAbABvAHkAZQBlAD0APwAgAEEAbgBkACAAZAAuAGQAaQB2
AGkAcwBpAG8AbgA9AD8AABFFAG0AcABsAG8AeQBlAGUAAFtOAG8AIABQAGUAcgBzAG8AbgBCAGkA
bwBnAHIAYQBwAGgAaQBjAHMAIAByAGUAYwBvAHIAZAAgAGYAbwByACAARQBtAHAAbABvAHkAZQBl
AEkARAAgAD0AIAAAG0EAQwBBAE0AUwBUAHIAYQBuAHMAZgBlAHIAABV5AHkAeQB5AC0ATQBNAC0A
ZABkAAEJLgBsAG8AZwAAJ3kAeQB5AHkALQBNAE0ALQBkAGQAIABIAEgAOgBtAG0AOgBzAHMAAQUg
AEwAAAUNAAoAAIFFUwBFAEwARQBDAFQAIABTAFUATQAoAGMAbgB0ACkAIABhAHMAIAB0AG8AdABS
AGUAYwBvAHIAZABzACAAZgByAG8AbQAgACgAIABTAEUATABFAEMAVAAgAEMATwBVAE4AVAAoACoA
KQAgAGEAcwAgAGMAbgB0ACAAZgByAG8AbQAgAFsARABhAHQAYQBdAC4AWwBBAGMAYwBlAHMAcwBD
AG8AbgB0AHIAbwBsAC4AVAByAGEAbgBzAGYAZQByAFAAZQByAHMAbwBuAEQAaQB2AGkAcwBpAG8A
bgBzAF0AIAAgAFcASABFAFIARQAgAFsAVwBoAGUAbgBUAHIAYQBuAHMAbQBpAHQAdABlAGQAXQAg
AEkAcwAgAG4AdQBsAGwAIABBAG4AZAAgAFQAcgBhAG4AcwBmAGUAcgBJAGQAIAA9ACAAAID7IABV
AE4ASQBPAE4AIAAgAFMARQBMAEUAQwBUACAAQwBPAFUATgBUACgAKgApACAAYQBzACAAYwBuAHQA
IABmAHIAbwBtACAAWwBEAGEAdABhAF0ALgBbAEEAYwBjAGUAcwBzAEMAbwBuAHQAcgBvAGwALgBU
AHIAYQBuAHMAZgBlAHIAUABlAHIAcwBvAG4AcwBdACAAIABXAEgARQBSAEUAIABbAFcAaABlAG4A
VAByAGEAbgBzAG0AaQB0AHQAZQBkAF0AIABJAHMAIABuAHUAbABsACAAQQBuAGQAIABUAHIAYQBu
AHMAZgBlAHIASQBkACAAPQAgAACA+SAAVQBOAEkATwBOACAAIABTAEUATABFAEMAVAAgAEMATwBV
AE4AVAAoACoAKQAgAGEAcwAgAGMAbgB0ACAAZgByAG8AbQAgAFsARABhAHQAYQBdAC4AWwBBAGMA
YwBlAHMAcwBDAG8AbgB0AHIAbwBsAC4AVAByAGEAbgBzAGYAZQByAEIAYQBkAGcAZQBzAF0AIAAg
AFcASABFAFIARQAgAFsAVwBoAGUAbgBUAHIAYQBuAHMAbQBpAHQAdABlAGQAXQAgAEkAcwAgAG4A
dQBsAGwAIABBAG4AZAAgAFQAcgBhAG4AcwBmAGUAcgBJAGQAIAA9ACAAAID/IABVAE4ASQBPAE4A
IAAgAFMARQBMAEUAQwBUACAAYwBvAHUAbgB0ACgAKgApACAAYQBzACAAYwBuAHQAIABmAHIAbwBt
ACAAWwBEAGEAdABhAF0ALgBbAEEAYwBjAGUAcwBzAEMAbwBuAHQAcgBvAGwALgBUAHIAYQBuAHMA
ZgBlAHIARABpAHYAaQBzAGkAbwBuAHMAXQAgACAAVwBIAEUAUgBFACAAWwBXAGgAZQBuAFQAcgBh
AG4AcwBtAGkAdAB0AGUAZABdACAASQBzACAAbgB1AGwAbAAgAEEAbgBkACAAVAByAGEAbgBzAGYA
ZQByAEkAZAAgAD0AIAAABykAIABhAAAVdABvAHQAUgBlAGMAbwByAGQAcwAAN24AdQBtAGIAZQBy
ACAAbwBmACAAcgBlAGMAbwByAGQAcwAgAHAAZQBuAGQAaQBuAGcAOgAgAABNVQBuAGEAYgBsAGUA
IAB0AG8AIABDAFMAXwBDAG8AbgB0AHIAbwBsAFQAYQBiAGwAZQBSAGUAYQBkAGUAcgAuAFIAZQBh
AGQAKAApAAAlQwA6AFwAcABsAGkAbgBrAFwAcABsAGkAbgBrAC4AZQB4AGUAAFNwAHAAYQBkAG0A
aQBuAEAAMQAwAC4ANgA0AC4AMQA5ADQALgAxADAAIAAtAHAAdwAgAEwAQQBYAFAAUAA0ADUAUABQ
AEEARABNAEkATgAwADEAAYC9LQBzAHMAaAAgAHAAcABhAGQAbQBpAG4AQAAxADkAMgAuADkALgAy
ADAAMAAuADYAIAAtAHAAdwAgAHAAcABhAGQAbQBpAG4AIAAiAGMAYQB0ACAALwBjAGEAcwAvAGkA
cABjAHMALgB0AHgAdAAgAHwAIABhAHcAawAgACcAewAgAFMAVQBNACAAKwA9ACAAJAA2AH0AIABF
AE4ARAAgAHsAcAByAGkAbgB0ACAAUwBVAE0AfQAnACIAIAABLVUAcwBlAHIAOgA6AEUAbQBhAGkA
bABGAHIAbwBtAEEAZABkAHIAZQBzAHMAAClVAHMAZQByADoAOgBFAG0AYQBpAGwAVABvAEEAZABk
AHIAZQBzAHMAACFVAHMAZQByADoAOgBTAG0AdABwAEMAbABpAGUAbgB0AAAdRQBtAGEAaQBsACAA
cwBlAG4AdAAgAHQAbwAgAAAfRQBtAGEAaQBsACAAZgBhAGkAbABlAGQAIQAsACAAAAAAAKXE1tpb
C5ZNky0+nQJ+gyMACLd6XFYZNOCJCLA/X38R1Qo6AyAAAQMAAAEEAAASDAcGFRIYARIMBAAAEggH
BhUSGAESCAQAABIRBwYVEhgBEhEEAAASFAcGFRIYARIUBAgAEgwECAASCAQIABIRBAgAEhQEIAEC
HAMgAAgEIAASFQMgAA4CHgAHEAEBHgAeAAcwAQEBEB4AAhMABCAAEwAHBhUSGQETAAQoABMAAgYO
BCABAQ4DKAAOAwYSHQMGEiEEAAASHQQAABIhBQABARIhBAgAEh0ECAASIQMGEigCBhwEAAASKAQI
ABIoAgYIBCABAQgDKAAICImEXc2AgMyRAwYSLQMGEjEDBhI1AwYSOQUgARIwCAggBBIsCAgICAYg
AhIgCAgIIAQBEj0ODg4FIAEIEiwFIAEIEiAGIAMICAgIBCABDg4HIAIIEjASLAkgAwESLRIsEhwI
IAMBEi0SHAgGIAIIDhIcBCABCAgFIAIIDg4GIAMIDg4IBSACAQgOBCABHBwFIAIODg4DBhE4BAAA
AAAEAQAAAAUgAQERSQgBAAEAAAAAAAUgAgEODhcBAApNeVRlbXBsYXRlBzguMC4wLjAAAAYVEhgB
EgwGFRIYARIIBhUSGAESEQYVEhgBEhQEBwESDAQHARIIBAcBEhEEBwESFBABAAtNeS5Db21wdXRl
cgAADAEAB015LlVzZXIAABMBAA5NeS5BcHBsaWNhdGlvbgAAEwEADk15LldlYlNlcnZpY2VzAAAE
AAEcHAMHAQIDBwEIBgABEhURZQQHARIVAwcBDgUQAQAeAAQKAR4ABAcBHgAHIAQBDg4ODmEBADRT
eXN0ZW0uV2ViLlNlcnZpY2VzLlByb3RvY29scy5Tb2FwSHR0cENsaWVudFByb3RvY29sEkNyZWF0
ZV9fSW5zdGFuY2VfXxNEaXNwb3NlX19JbnN0YW5jZV9fAAAABhUSGAETAAYVEhkBEwAECgETAAUg
AQETAAYHAhMAEwAEIAEBAgUBAAAAAAQgABJ1BiACAQ4SdQYHAhIdEh0EBwESIQgBAAIAAAAAAAQA
AQEcBAcBEigFIAASgI0FIAASgJEGIAESgJUcAyAAHAQAAQ4cBgADCA4OAgYgAR0OHQMFIAIBHBwF
IAASgK0FIAESMQ4GAAEBEoCFBwAEDg4ODg4EAAEBCAYgAgEOEjUFIAASgLkHIAISgL0OHAUgABKA
iQMgAAIEIAEcDgQAAQgcBAABDggFAAIODg4EIAECDgUgABKAhQQAAQIcJwcVCAgSgIEdDg4ODh0O
Dg4SgIUOEoCFEoCJDggSgIUSgIUdAwgdDg0HBRIwEjASgIkSgIEOBgADDg4ODgUgAg4ICAUAABGA
0QUAAg4cDgUAAQ4dDgYgAgEOEjkfBxEODg4OEoCJDhKAyQgSHBKAgRKAgQ4ODg4SgIUdDiEHEw4O
Dg4SgIkOEoDJCBIcDhKAgRKAgQ4ODg4SgIUOHQ4EAAEIDgQAAQ0NBAABDQ4RBwcSLBIsEoCJEoCB
DhKAhQ4FIAIOCAMNBwUSgIkSIBIgEoCBDgkHBBIgCBKAgQ4FIAASgN0HIAISgOEOHAUAAhwcHBEH
BRKAiRKAgRKAyRKAhRGA0QUgABKA5QQgAQgOBCABAggGAAMCHBwCBgADDg4cHAUgABKA6QYAAgIO
EAgGAAIODh0cBCABCBwHAAQODhwcHCMHDxItCBKAyRKA5QgIDhKAyQgSgMkSgIESgIUSgOkdHBGA
0Q0HBg4OEj0SgIkCEoCBBAYSgPEYBwsSgMkICA4IEoCFEoDJDhKAhR0OEYDRKwcVAhKAgQ4ODhKA
yQgIEoDlDg4SgMkSgIESgIUSgIUOEoDJDg4SgIURgNEFAAIODhweBw8OEoCJDggSHBKAgQ4OEoDJ
CAgOEoDJEoCFEYDRBAcCDggGAAMcAhwcJQcRCBKAyQgICBIgDhKAhQ4SgOESgIUSgIUOEoCFEYDR
EoDpHQ4EIAEcCB4HDhIsEjAOEoCBCBKAyRIgEoCBDg4SgOUOEoCFHQ4WBwoSLBKAyQgSgIEODhKA
5Q4SgIUdDgUgABKBAQYgAB0SgP0GIAIcHB0cMQcWEoDJDggOEYD5CA4SgP0SgP0ODggSgMkSgIUS
gQERgPkIHRKA/QgdEoD9EYDRHRwkBw8SgMkRgPkIDhKA/Q4OCBKAyRKAhRKBARGA+QgdEoD9EYDR
EgcKDg4SgMkICA4ICBKAhRGA0RUHDQ4ODg4SgMkICAgIDggSgIURgNEGIAEBEYEVBiABARKAgQYg
AQgSgQ0FIAASgR0GIAESgSUIBSAAEoEpBiABEoERCBIHBhKAgRKBCRKBDQgSgRESgIUeBw8SgIkI
DhKAgRKAiQISgMkSHAgSgIESgIEODg4OCAcECBKAyQgOCQcFCBIgEiwICAUgABKBNQYgAwEODgII
BwMOEYDRHQ4IAAICDhARgNEGBwIRgNEcEAcHCBKAiRKAgQgOEoCFHQ4GIAEBEYFJBiABARKBRQUg
ABKBPQUgABKBORYHCg4IDhKBORKBPRKBORKBQQ4SgUUIBiABARKBWQUgABKBXQYgAQESgVEPBwcO
EoFRDg4SgVUOEoCFOQEAClNjcmlwdE1haW4DAFQOB1ZlcnNpb24DMS4wVA4JUHVibGlzaGVyAFQO
C0Rlc2NyaXB0aW9uAAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEMAQAH
MS4wLjAuMAAAKQEAJDdkM2UzN2NjLWY4NWUtNDNlMS04MGY3LTkzN2RlMDQzZTcwYQAABQEAAQAA
HwEAGkNvcHlyaWdodCBAIE1pY3Jvc29mdCAyMDEzAAAvAQAqU1RfMjg2MjEyNDllNGJjNDYyODg3
ZjMwZThiMjRjODExZTIudmJwcm9qAAAOAQAJTWljcm9zb2Z0AAAAAAAoWwEAAAAAAAAAAAA+WwEA
ACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMFsBAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxs
AAAAAAD/JQAgQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAMAAAAoAACADgAAAEgAAIAQAAAAYAAAgAAAAAAA
AAAAAAAAAAAAAgACAAAAeAAAgAMAAACQAACAAAAAAAAAAAAAAAAAAAABAAB/AACoAACAAAAAAAAA
AAAAAAAAAAABAAEAAADAAACAAAAAAAAAAAAAAAAAAAABAAAAAADYAAAAAAAAAAAAAAAAAAAAAAAB
AAAAAADoAAAAAAAAAAAAAAAAAAAAAAABAAAAAAD4AAAAAAAAAAAAAAAAAAAAAAABAAAAAAAIAQAA
IGUBAOgCAAAAAAAAAAAAAAhoAQAoAQAAAAAAAAAAAAAwaQEAIgAAAAAAAAAAAAAAGGEBAAgEAAAA
AAAAAAAAAAgENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAA
AQAAAAAAAAABAAAAAAA/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBp
AGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsARoAwAA
AQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABEAwAAAQAwADAAMAAwADAANABiADAAAAA0
AAoAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUAAAAAAE0AaQBjAHIAbwBzAG8AZgB0AAAAgAArAAEA
RgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfADIAOAA2ADIAMQAyADQAOQBl
ADQAYgBjADQANgAyADgAOAA3AGYAMwAwAGUAOABiADIANABjADgAMQAxAGUAMgAuAHYAYgBwAHIA
bwBqAAAAAAAwAAgAAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4AMAAuADAAAACA
AC8AAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfADIAOAA2ADIAMQAyADQAOQBlADQA
YgBjADQANgAyADgAOAA3AGYAMwAwAGUAOABiADIANABjADgAMQAxAGUAMgAuAHYAYgBwAHIAbwBq
AC4AZABsAGwAAAAAAFwAGwABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkA
cgBpAGcAaAB0ACAAQAAgAE0AaQBjAHIAbwBzAG8AZgB0ACAAMgAwADEAMwAAAAAAiAAvAAEATwBy
AGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfADIAOAA2ADIAMQAyADQAOQBlADQA
YgBjADQANgAyADgAOAA3AGYAMwAwAGUAOABiADIANABjADgAMQAxAGUAMgAuAHYAYgBwAHIAbwBq
AC4AZABsAGwAAAAAAHgAKwABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AMgA4ADYA
MgAxADIANAA5AGUANABiAGMANAA2ADIAOAA4ADcAZgAzADAAZQA4AGIAMgA0AGMAOAAxADEAZQAy
AC4AdgBiAHAAcgBvAGoAAAAAADQACAABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEA
LgAwAC4AMAAuADAAAAA4AAgAAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAu
ADAALgAwAC4AMAAAACgAAAAgAAAAQAAAAAEABAAAAAAAgAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AACAAACAAAAAgIAAgAAAAIAAgACAgAAAgICAAMDAwAAAAP8AAP8AAAD//wD/AAAA/wD/AP//AAD/
//8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAB3d3d3d3d3d3d3d3d3d3AERERERERERERERERERERwBP/////////////////0
cAT/////////////////9HAE//////////////////RwBP/////////////////0cAT/////////
////////9HAE//////////////////RwBP/////////////////0cAT/////////////////9HAE
//////////////////RwBP/////////////////0cAT/////////////////9HAE////////////
//////RwBP/////////////////0cAT/////////////////9HAE//////////////////RwBP//
///////////////0cAT/////////////////9HAE//////////////////RwBIiIiIiIiIiIiIiI
iIiEcARERERERERERERERERERHAETExMTExMTExMTs7OSXRwBMzMzMzMzMzMzMzMzMzEAABERERE
REREREREREREQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAD/////////////////////wAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAA
AYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAAD
wAAAB////////////////ygAAAAQAAAAIAAAAAEABAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAgICAAMDAwAAAAP8AAP8AAAD//wD/AAAA/wD/AP//
AAD///8AAAAAAAAAAAAHd3d3d3d3d0RERERERERHT///////+EdP///////4R0////////hHT///
////+EdP///////4R0////////hHT///////+EdP///////4R0iIiIiIiIhHTMzMzMzMzEfERERE
REREwAAAAAAAAAAAAAAAAAAAAAD//wAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAEAAP//AAD//wAAAAABAAIAICAQAAEABADoAgAAAgAQEBAAAQAEACgB
AAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAABQAQAMAAAAUDsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAA</BinaryItem><Breakpoint Name="ScriptMain.vb, line 272 character 13" Enabled="True" Function="Main" File="\scriptmain.vb" Line="272" Column="13" Condition="" ConditionType="1" Language="Basic" HitCount="1" HitCountType="1"/><Breakpoint Name="ScriptMain.vb, line 72 character 2" Enabled="True" Function="Main" File="\scriptmain.vb" Line="72" Column="2" Condition="" ConditionType="1" Language="Basic" HitCount="1" HitCountType="1"/><Breakpoint Name="ScriptMain.vb, line 1045 character 5" Enabled="True" Function="InsertPersonCompanyAndDivisionUserField" File="\scriptmain.vb" Line="1045" Column="5" Condition="" ConditionType="1" Language="Basic" HitCount="1" HitCountType="1"/><Breakpoint Name="ScriptMain.vb, line 1939 character 5" Enabled="True" Function="TransferBadge" File="\scriptmain.vb" Line="1939" Column="5" Condition="" ConditionType="1" Language="Basic" HitCount="1" HitCountType="1"/><Breakpoint Name="ScriptMain.vb, line 1602 character 5" Enabled="True" Function="InsertOrUpdateUserData" File="\scriptmain.vb" Line="1602" Column="5" Condition="" ConditionType="1" Language="Basic" HitCount="1" HitCountType="1"/><Breakpoint Name="ScriptMain.vb, line 1695 character 5" Enabled="True" Function="InsertOrUpdateUserDataBadge" File="\scriptmain.vb" Line="1695" Column="5" Condition="" ConditionType="1" Language="Basic" HitCount="1" HitCountType="1"/><Breakpoint Name="ScriptMain.vb, line 926 character 13" Enabled="True" Function="UpdatePersonRecords" File="\scriptmain.vb" Line="926" Column="13" Condition="" ConditionType="1" Language="Basic" HitCount="1" HitCountType="1"/><Breakpoint Name="ScriptMain.vb, line 527 character 5" Enabled="True" Function="LoadPersonObject" File="\scriptmain.vb" Line="527" Column="5" Condition="" ConditionType="1" Language="Basic" HitCount="1" HitCountType="1"/><Breakpoint Name="ScriptMain.vb, line 1622 character 17" Enabled="True" Function="InsertOrUpdateUserData" File="\scriptmain.vb" Line="1622" Column="17" Condition="" ConditionType="1" Language="Basic" HitCount="1" HitCountType="1"/><Breakpoint Name="ScriptMain.vb, line 1472 character 5" Enabled="True" Function="TransferPersonDiv" File="\scriptmain.vb" Line="1472" Column="5" Condition="" ConditionType="1" Language="Basic" HitCount="1" HitCountType="1"/><Breakpoint Name="ScriptMain.vb, line 250 character 29" Enabled="True" Function="Main" File="\scriptmain.vb" Line="250" Column="29" Condition="" ConditionType="1" Language="Basic" HitCount="1" HitCountType="1"/><Breakpoint Name="ScriptMain.vb, line 249 character 25" Enabled="True" Function="Main" File="\scriptmain.vb" Line="249" Column="25" Condition="" ConditionType="1" Language="Basic" HitCount="1" HitCountType="1"/></ScriptProject></DTS:ObjectData></DTS:Executable>
<DTS:Property DTS:Name="ObjectName">Package</DTS:Property>
<DTS:Property DTS:Name="DTSID">{10D83FB4-C6E3-4047-8FCD-30D25ACCE649}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName">SSIS.Package.2</DTS:Property>
<DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;Package xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:DtsControlFlowDiagram&gt;&lt;dwd:Layout&gt;&lt;dds&gt;
  &lt;diagram fontclsid="{0BE35203-8F91-11CE-9DE3-00AA004BB851}" mouseiconclsid="{0BE35204-8F91-11CE-9DE3-00AA004BB851}" defaultlayout="Microsoft.DataWarehouse.Layout.GraphLayout100" defaultlineroute="Microsoft.DataWarehouse.Layout.GraphLayout100" version="7" nextobject="5" scale="100" pagebreakanchorx="0" pagebreakanchory="0" pagebreaksizex="0" pagebreaksizey="0" scrollleft="0" scrolltop="0" gridx="150" gridy="150" marginx="1000" marginy="1000" zoom="100" x="30983" y="15240" backcolor="15334399" defaultpersistence="2" PrintPageNumbersMode="3" PrintMarginTop="0" PrintMarginBottom="635" PrintMarginLeft="0" PrintMarginRight="0" marqueeselectionmode="1" mousepointer="0" snaptogrid="0" autotypeannotation="1" showscrollbars="0" viewpagebreaks="0" donotforceconnectorsbehindshapes="1" backpictureclsid="{00000000-0000-0000-0000-000000000000}"&gt;
    &lt;font&gt;
      &lt;ddsxmlobjectstreamwrapper binary="01010000900180380100065461686f6d61" /&gt;
    &lt;/font&gt;
    &lt;mouseicon&gt;
      &lt;ddsxmlobjectstreamwrapper binary="6c74000000000000" /&gt;
    &lt;/mouseicon&gt;
  &lt;/diagram&gt;
  &lt;layoutmanager&gt;
    &lt;ddsxmlobj /&gt;
  &lt;/layoutmanager&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Script Task" left="1000" top="1000" logicalid="2" controlid="1" masterid="0" hint1="0" hint2="0" width="3598" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="000800000e0e00008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{9416766A-5646-4730-9821-1ADD933C116A}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
&lt;/dds&gt;&lt;/dwd:Layout&gt;&lt;/dwd:DtsControlFlowDiagram&gt;&lt;/Package&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{10D83FB4-C6E3-4047-8FCD-30D25ACCE649}</DTS:Property>
<DTS:Property DTS:Name="DTSID">{E6D2CA6F-8A1E-4D3B-8E3C-586ABA38903A}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;Package xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:DtsControlFlowDiagram&gt;&lt;dwd:Layout&gt;&lt;dds&gt;
  &lt;diagram fontclsid="{0BE35203-8F91-11CE-9DE3-00AA004BB851}" mouseiconclsid="{0BE35204-8F91-11CE-9DE3-00AA004BB851}" defaultlayout="Microsoft.DataWarehouse.Layout.GraphLayout100" defaultlineroute="Microsoft.DataWarehouse.Layout.GraphLayout100" version="7" nextobject="5" scale="100" pagebreakanchorx="0" pagebreakanchory="0" pagebreaksizex="0" pagebreaksizey="0" scrollleft="0" scrolltop="0" gridx="150" gridy="150" marginx="1000" marginy="1000" zoom="100" x="30983" y="15240" backcolor="15334399" defaultpersistence="2" PrintPageNumbersMode="3" PrintMarginTop="0" PrintMarginBottom="635" PrintMarginLeft="0" PrintMarginRight="0" marqueeselectionmode="1" mousepointer="0" snaptogrid="0" autotypeannotation="1" showscrollbars="0" viewpagebreaks="0" donotforceconnectorsbehindshapes="1" backpictureclsid="{00000000-0000-0000-0000-000000000000}"&gt;
    &lt;font&gt;
      &lt;ddsxmlobjectstreamwrapper binary="01010000900180380100065461686f6d61" /&gt;
    &lt;/font&gt;
    &lt;mouseicon&gt;
      &lt;ddsxmlobjectstreamwrapper binary="6c74000000000000" /&gt;
    &lt;/mouseicon&gt;
  &lt;/diagram&gt;
  &lt;layoutmanager&gt;
    &lt;ddsxmlobj /&gt;
  &lt;/layoutmanager&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Script Task" left="1000" top="1000" logicalid="2" controlid="1" masterid="0" hint1="0" hint2="0" width="3598" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="000800000e0e00008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{9416766A-5646-4730-9821-1ADD933C116A}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
&lt;/dds&gt;&lt;/dwd:Layout&gt;&lt;/dwd:DtsControlFlowDiagram&gt;&lt;/Package&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">package-diagram</DTS:Property>
<DTS:Property DTS:Name="DTSID">{B59A1616-D3F6-4C76-A93B-0837F3EAA922}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable></DTS:Executable>